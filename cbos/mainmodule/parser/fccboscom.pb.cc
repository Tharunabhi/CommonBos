// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fccboscom.proto

#include "fccboscom.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmAck_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmDetails_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BOSAlarm_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BosAck_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DULogs_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataModule_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndDetails_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndInventory_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndTotalizer_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DbConf_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeliveryReceipt_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCCDoorStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FccOperation_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeat_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterlockStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationControl_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherDevice_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceChangeStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductPriceChange_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PromotionalMsg_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpControl_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpTrxn_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndDetails_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndInventory_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndTotalizer_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankControl_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankDelivery_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankInventory_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankStatus_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrxnMopUpdate_fccboscom_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpsStatus_fccboscom_2eproto;
namespace fccboscom {
class RoDataDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<RoData> _instance;
} _RoData_default_instance_;
class DbConfDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DbConf> _instance;
} _DbConf_default_instance_;
class DataModuleDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DataModule> _instance;
} _DataModule_default_instance_;
class TankStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TankStatus> _instance;
} _TankStatus_default_instance_;
class PumpStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PumpStatus> _instance;
} _PumpStatus_default_instance_;
class UpsStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<UpsStatus> _instance;
} _UpsStatus_default_instance_;
class PumpTrxnDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PumpTrxn> _instance;
} _PumpTrxn_default_instance_;
class TankInventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TankInventory> _instance;
} _TankInventory_default_instance_;
class TankDeliveryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TankDelivery> _instance;
} _TankDelivery_default_instance_;
class DeliveryReceiptDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeliveryReceipt> _instance;
} _DeliveryReceipt_default_instance_;
class AlarmDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmDetails> _instance;
} _AlarmDetails_default_instance_;
class DayEndDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DayEndDetails> _instance;
} _DayEndDetails_default_instance_;
class DayEndTotalizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DayEndTotalizer> _instance;
} _DayEndTotalizer_default_instance_;
class DayEndInventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DayEndInventory> _instance;
} _DayEndInventory_default_instance_;
class ShiftEndDetailsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShiftEndDetails> _instance;
} _ShiftEndDetails_default_instance_;
class ShiftEndTotalizerDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShiftEndTotalizer> _instance;
} _ShiftEndTotalizer_default_instance_;
class ShiftEndInventoryDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ShiftEndInventory> _instance;
} _ShiftEndInventory_default_instance_;
class PumpControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PumpControl> _instance;
} _PumpControl_default_instance_;
class TankControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TankControl> _instance;
} _TankControl_default_instance_;
class ProductPriceChangeDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ProductPriceChange> _instance;
} _ProductPriceChange_default_instance_;
class PriceChangeStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PriceChangeStatus> _instance;
} _PriceChangeStatus_default_instance_;
class OperationControlDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OperationControl> _instance;
} _OperationControl_default_instance_;
class TrxnMopUpdateDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<TrxnMopUpdate> _instance;
} _TrxnMopUpdate_default_instance_;
class AlarmAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<AlarmAck> _instance;
} _AlarmAck_default_instance_;
class FccOperationDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FccOperation> _instance;
} _FccOperation_default_instance_;
class BosAckDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BosAck> _instance;
} _BosAck_default_instance_;
class HeartBeatDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<HeartBeat> _instance;
} _HeartBeat_default_instance_;
class OtherDeviceDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<OtherDevice> _instance;
} _OtherDevice_default_instance_;
class DULogsDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DULogs> _instance;
} _DULogs_default_instance_;
class BOSAlarmDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BOSAlarm> _instance;
} _BOSAlarm_default_instance_;
class FCCDoorStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<FCCDoorStatus> _instance;
} _FCCDoorStatus_default_instance_;
class InterlockStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<InterlockStatus> _instance;
} _InterlockStatus_default_instance_;
class DeviceStatusDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DeviceStatus> _instance;
} _DeviceStatus_default_instance_;
class PromotionalMsgDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<PromotionalMsg> _instance;
} _PromotionalMsg_default_instance_;
}  // namespace fccboscom
static void InitDefaultsscc_info_AlarmAck_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_AlarmAck_default_instance_;
    new (ptr) ::fccboscom::AlarmAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::AlarmAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmAck_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmAck_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_AlarmDetails_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_AlarmDetails_default_instance_;
    new (ptr) ::fccboscom::AlarmDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::AlarmDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_AlarmDetails_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_AlarmDetails_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_BOSAlarm_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_BOSAlarm_default_instance_;
    new (ptr) ::fccboscom::BOSAlarm();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::BOSAlarm::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BOSAlarm_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BOSAlarm_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_BosAck_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_BosAck_default_instance_;
    new (ptr) ::fccboscom::BosAck();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::BosAck::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_BosAck_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_BosAck_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DULogs_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DULogs_default_instance_;
    new (ptr) ::fccboscom::DULogs();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DULogs::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DULogs_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DULogs_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DataModule_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DataModule_default_instance_;
    new (ptr) ::fccboscom::DataModule();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DataModule::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DataModule_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DataModule_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DayEndDetails_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DayEndDetails_default_instance_;
    new (ptr) ::fccboscom::DayEndDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DayEndDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndDetails_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DayEndDetails_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DayEndInventory_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DayEndInventory_default_instance_;
    new (ptr) ::fccboscom::DayEndInventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DayEndInventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndInventory_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DayEndInventory_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DayEndTotalizer_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DayEndTotalizer_default_instance_;
    new (ptr) ::fccboscom::DayEndTotalizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DayEndTotalizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DayEndTotalizer_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DayEndTotalizer_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DbConf_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DbConf_default_instance_;
    new (ptr) ::fccboscom::DbConf();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DbConf::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_DbConf_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_DbConf_fccboscom_2eproto}, {
      &scc_info_DataModule_fccboscom_2eproto.base,}};

static void InitDefaultsscc_info_DeliveryReceipt_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DeliveryReceipt_default_instance_;
    new (ptr) ::fccboscom::DeliveryReceipt();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DeliveryReceipt::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeliveryReceipt_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeliveryReceipt_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_DeviceStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_DeviceStatus_default_instance_;
    new (ptr) ::fccboscom::DeviceStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::DeviceStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DeviceStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DeviceStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_FCCDoorStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_FCCDoorStatus_default_instance_;
    new (ptr) ::fccboscom::FCCDoorStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::FCCDoorStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FCCDoorStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FCCDoorStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_FccOperation_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_FccOperation_default_instance_;
    new (ptr) ::fccboscom::FccOperation();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::FccOperation::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_FccOperation_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_FccOperation_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_HeartBeat_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_HeartBeat_default_instance_;
    new (ptr) ::fccboscom::HeartBeat();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::HeartBeat::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_HeartBeat_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_HeartBeat_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_InterlockStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_InterlockStatus_default_instance_;
    new (ptr) ::fccboscom::InterlockStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::InterlockStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_InterlockStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_InterlockStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_OperationControl_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_OperationControl_default_instance_;
    new (ptr) ::fccboscom::OperationControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::OperationControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OperationControl_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OperationControl_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_OtherDevice_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_OtherDevice_default_instance_;
    new (ptr) ::fccboscom::OtherDevice();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::OtherDevice::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_OtherDevice_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_OtherDevice_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_PriceChangeStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_PriceChangeStatus_default_instance_;
    new (ptr) ::fccboscom::PriceChangeStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::PriceChangeStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PriceChangeStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PriceChangeStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_ProductPriceChange_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_ProductPriceChange_default_instance_;
    new (ptr) ::fccboscom::ProductPriceChange();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::ProductPriceChange::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ProductPriceChange_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ProductPriceChange_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_PromotionalMsg_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_PromotionalMsg_default_instance_;
    new (ptr) ::fccboscom::PromotionalMsg();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::PromotionalMsg::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PromotionalMsg_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PromotionalMsg_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_PumpControl_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_PumpControl_default_instance_;
    new (ptr) ::fccboscom::PumpControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::PumpControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpControl_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PumpControl_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_PumpStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_PumpStatus_default_instance_;
    new (ptr) ::fccboscom::PumpStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::PumpStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PumpStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_PumpTrxn_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_PumpTrxn_default_instance_;
    new (ptr) ::fccboscom::PumpTrxn();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::PumpTrxn::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_PumpTrxn_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_PumpTrxn_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_RoData_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_RoData_default_instance_;
    new (ptr) ::fccboscom::RoData();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::RoData::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<32> scc_info_RoData_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 32, 0, InitDefaultsscc_info_RoData_fccboscom_2eproto}, {
      &scc_info_DbConf_fccboscom_2eproto.base,
      &scc_info_TankStatus_fccboscom_2eproto.base,
      &scc_info_PumpStatus_fccboscom_2eproto.base,
      &scc_info_UpsStatus_fccboscom_2eproto.base,
      &scc_info_PumpTrxn_fccboscom_2eproto.base,
      &scc_info_TankInventory_fccboscom_2eproto.base,
      &scc_info_TankDelivery_fccboscom_2eproto.base,
      &scc_info_DeliveryReceipt_fccboscom_2eproto.base,
      &scc_info_AlarmDetails_fccboscom_2eproto.base,
      &scc_info_DayEndDetails_fccboscom_2eproto.base,
      &scc_info_DayEndTotalizer_fccboscom_2eproto.base,
      &scc_info_DayEndInventory_fccboscom_2eproto.base,
      &scc_info_ShiftEndDetails_fccboscom_2eproto.base,
      &scc_info_ShiftEndTotalizer_fccboscom_2eproto.base,
      &scc_info_ShiftEndInventory_fccboscom_2eproto.base,
      &scc_info_PumpControl_fccboscom_2eproto.base,
      &scc_info_TankControl_fccboscom_2eproto.base,
      &scc_info_ProductPriceChange_fccboscom_2eproto.base,
      &scc_info_PriceChangeStatus_fccboscom_2eproto.base,
      &scc_info_OperationControl_fccboscom_2eproto.base,
      &scc_info_TrxnMopUpdate_fccboscom_2eproto.base,
      &scc_info_AlarmAck_fccboscom_2eproto.base,
      &scc_info_FccOperation_fccboscom_2eproto.base,
      &scc_info_BosAck_fccboscom_2eproto.base,
      &scc_info_HeartBeat_fccboscom_2eproto.base,
      &scc_info_OtherDevice_fccboscom_2eproto.base,
      &scc_info_DULogs_fccboscom_2eproto.base,
      &scc_info_BOSAlarm_fccboscom_2eproto.base,
      &scc_info_FCCDoorStatus_fccboscom_2eproto.base,
      &scc_info_InterlockStatus_fccboscom_2eproto.base,
      &scc_info_DeviceStatus_fccboscom_2eproto.base,
      &scc_info_PromotionalMsg_fccboscom_2eproto.base,}};

static void InitDefaultsscc_info_ShiftEndDetails_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_ShiftEndDetails_default_instance_;
    new (ptr) ::fccboscom::ShiftEndDetails();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::ShiftEndDetails::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndDetails_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShiftEndDetails_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_ShiftEndInventory_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_ShiftEndInventory_default_instance_;
    new (ptr) ::fccboscom::ShiftEndInventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::ShiftEndInventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndInventory_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShiftEndInventory_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_ShiftEndTotalizer_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_ShiftEndTotalizer_default_instance_;
    new (ptr) ::fccboscom::ShiftEndTotalizer();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::ShiftEndTotalizer::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ShiftEndTotalizer_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ShiftEndTotalizer_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_TankControl_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_TankControl_default_instance_;
    new (ptr) ::fccboscom::TankControl();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::TankControl::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankControl_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TankControl_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_TankDelivery_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_TankDelivery_default_instance_;
    new (ptr) ::fccboscom::TankDelivery();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::TankDelivery::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankDelivery_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TankDelivery_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_TankInventory_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_TankInventory_default_instance_;
    new (ptr) ::fccboscom::TankInventory();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::TankInventory::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankInventory_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TankInventory_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_TankStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_TankStatus_default_instance_;
    new (ptr) ::fccboscom::TankStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::TankStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TankStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TankStatus_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_TrxnMopUpdate_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_TrxnMopUpdate_default_instance_;
    new (ptr) ::fccboscom::TrxnMopUpdate();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::TrxnMopUpdate::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_TrxnMopUpdate_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_TrxnMopUpdate_fccboscom_2eproto}, {}};

static void InitDefaultsscc_info_UpsStatus_fccboscom_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::fccboscom::_UpsStatus_default_instance_;
    new (ptr) ::fccboscom::UpsStatus();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::fccboscom::UpsStatus::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_UpsStatus_fccboscom_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_UpsStatus_fccboscom_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_fccboscom_2eproto[34];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_fccboscom_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_fccboscom_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_fccboscom_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, msgid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, ack_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, msgrecordid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, dbconf_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, tankstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, pumpstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, upsstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, pumptrxn_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, tankinventory_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, tankdelivery_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, deliveryreceipt_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, alarmdetails_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, dayenddetails_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, dayendtotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, dayendinventory_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, shiftenddetails_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, shiftendtotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, shiftendinventory_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, pumpcontrol_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, tankcontrol_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, productpricechange_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, pricechangestatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, operationcontrol_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, trxnmopupdate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, alarmack_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, fccoperation_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, bosack_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, heartbeat_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, otherdevice_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, dulogs_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, bosalarm_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, fccdoorstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, interlockstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, devicestatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::RoData, promotionalmsg_),
  0,
  1,
  2,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DbConf, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DbConf, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DbConf, tablename_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DbConf, datamodule_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DbConf, operation_),
  0,
  ~0u,
  1,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DataModule, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DataModule, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DataModule, key_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DataModule, value_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DataModule, datatype_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, tankid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, tankstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, productlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, productvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, waterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, watervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, temperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, tcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, ullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, density_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, tcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankStatus, lockval_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, pumpid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, pumpuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, nozzleid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, trxnvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, trxnamount_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, lockval_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, npndstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, motortimeout_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpStatus, pumptype_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, upsid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, upsuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, inputvtg_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, outputvtg_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, batteryvtg_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, inputfreq_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, temperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, upsstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, loadpercent_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, batterypercent_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, inventoryid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::UpsStatus, inventorytime_),
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  0,
  9,
  10,
  11,
  1,
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, pumpid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, pumpuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, nozzleid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, nozzleuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, trxnvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, trxnamount_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, unitrate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, startvolumetotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, endvolumetotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, presettype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, presetmode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, presetvalue_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, trxnid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, trxnstarttime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, trxnendtime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, gradeuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, pumpmode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, shiftid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, dealershiftid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, moptype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, lasttrxnendvoltotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, discountrate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, totaldiscount_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpTrxn, presetid_),
  2,
  3,
  4,
  5,
  6,
  7,
  9,
  8,
  11,
  10,
  12,
  13,
  14,
  0,
  1,
  15,
  16,
  17,
  18,
  19,
  21,
  20,
  22,
  24,
  23,
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, tankid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, productlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, waterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, productvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, watervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, tcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, ullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, temperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, tankstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, productdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, producttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, inventoryid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, inventorytime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankInventory, inventorymode_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  0,
  14,
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, tankid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, starttime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, starttemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, startproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endtime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endtemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, endproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, deliveryid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, atgid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankDelivery, atguid_),
  2,
  3,
  0,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  1,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, productuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, supplypoint_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, invoiceno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, invoicedatetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, invoicequantity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, invoiceamount_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, truckno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, compartmentno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, observeddensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, invoicedensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, observedtemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, dataentrytime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeliveryReceipt, deliveryid_),
  5,
  6,
  0,
  1,
  2,
  7,
  8,
  3,
  9,
  10,
  11,
  12,
  4,
  13,
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, alarmid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, alarmsequenceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, alarmtrxncode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, nozzleid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, datetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, alarmstate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, param1_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, param2_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, param3_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, param4_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmDetails, param5_),
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, opentime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, closetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndDetails, status_),
  2,
  0,
  1,
  3,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, nozzleuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, starttotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, endtotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, totalsalevolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, recordid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndTotalizer, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, starttemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, startullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endtemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, endullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, totalsalevolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, inventoryid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, tankstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, recorduid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DayEndInventory, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, shiftid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, shifttype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, opentime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, closetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndDetails, recorduid_),
  2,
  3,
  4,
  0,
  1,
  5,
  6,
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, shiftid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, shifttype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, recorduid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, nozzleuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, tankno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, starttotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, endtotalizer_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, totalsalevolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, lasttrxnid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, nozzlestatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndTotalizer, status_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  0,
  11,
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, shiftid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, shifttype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, recorduid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, dayid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, startullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, starttemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endproductlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endwaterlevel_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endproductvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endwatervolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endproducttcvolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endproductdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endproducttcdensity_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endullage_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, endtemperature_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, totalsalevolume_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, inventoryuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, tankstatus_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ShiftEndInventory, status_),
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  23,
  22,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, pumpuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, nozzleid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, controlid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, presettype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, presetvalue_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, presetmop_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, pumpmode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PumpControl, presetrefid_),
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  0,
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankControl, tankuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TankControl, controlid_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, priceidentifier_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, gradeuid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, graderate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, effectivetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, updatetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, updateflag_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, updateby_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, effectivetype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, enddatetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::ProductPriceChange, flag_),
  5,
  6,
  7,
  0,
  1,
  8,
  2,
  3,
  4,
  9,
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, priceidentifier_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, productid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, productnewprice_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, effectivetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PriceChangeStatus, flag_),
  1,
  2,
  3,
  4,
  0,
  5,
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, operationcontrolid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, operationmode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, time_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, configkey_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OperationControl, configvalue_),
  3,
  4,
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, trxnid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, moptype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, updatedate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::TrxnMopUpdate, updateby_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmAck, recorduid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmAck, ackby_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::AlarmAck, acktime_),
  2,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::fccboscom::FccOperation, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::FccOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::FccOperation, key_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::FccOperation, value_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fccboscom::BosAck, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BosAck, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::BosAck, msgid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BosAck, recid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BosAck, operation_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::fccboscom::HeartBeat, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::HeartBeat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::HeartBeat, devicetype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::HeartBeat, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::HeartBeat, timestamp_),
  1,
  2,
  0,
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, devicetype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, swversion_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, hwversion_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::OtherDevice, trxncount_),
  0,
  1,
  2,
  3,
  4,
  5,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, logid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, pumpno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, nozzleno_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, productcode_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, logtrantype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc1_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param1_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc2_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param2_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc3_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param3_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc4_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param4_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc5_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param5_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc6_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param6_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc7_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param7_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc8_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param8_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc9_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param9_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc10_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param10_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc11_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param11_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, paramdesc12_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, param12_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, createdate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, logdatetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DULogs, logtypedesc_),
  27,
  28,
  29,
  30,
  31,
  0,
  1,
  2,
  3,
  4,
  5,
  6,
  7,
  8,
  9,
  10,
  11,
  12,
  13,
  14,
  15,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  24,
  25,
  26,
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, alarmid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, alarmstate_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, param1_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, param2_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, param3_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, param4_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::BOSAlarm, param5_),
  5,
  6,
  7,
  0,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::fccboscom::FCCDoorStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::FCCDoorStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::FCCDoorStatus, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::FCCDoorStatus, datetime_),
  1,
  0,
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, devicetype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, interlocktype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, datetime_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::InterlockStatus, nozzleid_),
  1,
  2,
  3,
  0,
  4,
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, devicetype_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, deviceid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, nozzleid_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, status_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::DeviceStatus, datetime_),
  1,
  2,
  3,
  4,
  0,
  PROTOBUF_FIELD_OFFSET(::fccboscom::PromotionalMsg, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::fccboscom::PromotionalMsg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::fccboscom::PromotionalMsg, message_),
  0,
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 40, sizeof(::fccboscom::RoData)},
  { 75, 83, sizeof(::fccboscom::DbConf)},
  { 86, 94, sizeof(::fccboscom::DataModule)},
  { 97, 115, sizeof(::fccboscom::TankStatus)},
  { 128, 143, sizeof(::fccboscom::PumpStatus)},
  { 153, 170, sizeof(::fccboscom::UpsStatus)},
  { 182, 212, sizeof(::fccboscom::PumpTrxn)},
  { 237, 257, sizeof(::fccboscom::TankInventory)},
  { 272, 300, sizeof(::fccboscom::TankDelivery)},
  { 323, 342, sizeof(::fccboscom::DeliveryReceipt)},
  { 356, 373, sizeof(::fccboscom::AlarmDetails)},
  { 385, 394, sizeof(::fccboscom::DayEndDetails)},
  { 398, 410, sizeof(::fccboscom::DayEndTotalizer)},
  { 417, 447, sizeof(::fccboscom::DayEndInventory)},
  { 472, 484, sizeof(::fccboscom::ShiftEndDetails)},
  { 491, 508, sizeof(::fccboscom::ShiftEndTotalizer)},
  { 520, 552, sizeof(::fccboscom::ShiftEndInventory)},
  { 579, 592, sizeof(::fccboscom::PumpControl)},
  { 600, 607, sizeof(::fccboscom::TankControl)},
  { 609, 624, sizeof(::fccboscom::ProductPriceChange)},
  { 634, 645, sizeof(::fccboscom::PriceChangeStatus)},
  { 651, 661, sizeof(::fccboscom::OperationControl)},
  { 666, 675, sizeof(::fccboscom::TrxnMopUpdate)},
  { 679, 687, sizeof(::fccboscom::AlarmAck)},
  { 690, 697, sizeof(::fccboscom::FccOperation)},
  { 699, 707, sizeof(::fccboscom::BosAck)},
  { 710, 718, sizeof(::fccboscom::HeartBeat)},
  { 721, 732, sizeof(::fccboscom::OtherDevice)},
  { 738, 775, sizeof(::fccboscom::DULogs)},
  { 807, 820, sizeof(::fccboscom::BOSAlarm)},
  { 828, 835, sizeof(::fccboscom::FCCDoorStatus)},
  { 837, 847, sizeof(::fccboscom::InterlockStatus)},
  { 852, 862, sizeof(::fccboscom::DeviceStatus)},
  { 867, 873, sizeof(::fccboscom::PromotionalMsg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_RoData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DbConf_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DataModule_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_TankStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_PumpStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_UpsStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_PumpTrxn_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_TankInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_TankDelivery_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DeliveryReceipt_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_AlarmDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DayEndDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DayEndTotalizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DayEndInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_ShiftEndDetails_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_ShiftEndTotalizer_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_ShiftEndInventory_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_PumpControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_TankControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_ProductPriceChange_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_PriceChangeStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_OperationControl_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_TrxnMopUpdate_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_AlarmAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_FccOperation_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_BosAck_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_HeartBeat_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_OtherDevice_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DULogs_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_BOSAlarm_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_FCCDoorStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_InterlockStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_DeviceStatus_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::fccboscom::_PromotionalMsg_default_instance_),
};

const char descriptor_table_protodef_fccboscom_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\017fccboscom.proto\022\tfccboscom\"\237\014\n\006RoData\022"
  "\r\n\005msgid\030\001 \002(\r\022\013\n\003ack\030\002 \001(\r\022\023\n\013msgRecord"
  "Id\030\003 \001(\r\022!\n\006dbConf\030\004 \003(\0132\021.fccboscom.DbC"
  "onf\022)\n\ntankStatus\030\005 \003(\0132\025.fccboscom.Tank"
  "Status\022)\n\npumpStatus\030\006 \003(\0132\025.fccboscom.P"
  "umpStatus\022\'\n\tupsStatus\030\007 \003(\0132\024.fccboscom"
  ".UpsStatus\022%\n\010pumpTrxn\030\010 \003(\0132\023.fccboscom"
  ".PumpTrxn\022/\n\rtankInventory\030\t \003(\0132\030.fccbo"
  "scom.TankInventory\022-\n\014tankDelivery\030\n \003(\013"
  "2\027.fccboscom.TankDelivery\0223\n\017deliveryRec"
  "eipt\030\013 \003(\0132\032.fccboscom.DeliveryReceipt\022-"
  "\n\014alarmDetails\030\014 \003(\0132\027.fccboscom.AlarmDe"
  "tails\022/\n\rdayEndDetails\030\r \003(\0132\030.fccboscom"
  ".DayEndDetails\0223\n\017dayEndTotalizer\030\016 \003(\0132"
  "\032.fccboscom.DayEndTotalizer\0223\n\017dayEndInv"
  "entory\030\017 \003(\0132\032.fccboscom.DayEndInventory"
  "\0223\n\017shiftEndDetails\030\020 \003(\0132\032.fccboscom.Sh"
  "iftEndDetails\0227\n\021shiftEndTotalizer\030\021 \003(\013"
  "2\034.fccboscom.ShiftEndTotalizer\0227\n\021shiftE"
  "ndInventory\030\022 \003(\0132\034.fccboscom.ShiftEndIn"
  "ventory\022+\n\013pumpControl\030\023 \003(\0132\026.fccboscom"
  ".PumpControl\022+\n\013tankControl\030\024 \003(\0132\026.fccb"
  "oscom.TankControl\0229\n\022productPriceChange\030"
  "\025 \003(\0132\035.fccboscom.ProductPriceChange\0227\n\021"
  "priceChangeStatus\030\026 \003(\0132\034.fccboscom.Pric"
  "eChangeStatus\0225\n\020operationControl\030\027 \003(\0132"
  "\033.fccboscom.OperationControl\022/\n\rtrxnMopU"
  "pdate\030\030 \003(\0132\030.fccboscom.TrxnMopUpdate\022%\n"
  "\010alarmAck\030\031 \003(\0132\023.fccboscom.AlarmAck\022-\n\014"
  "fccOperation\030\032 \003(\0132\027.fccboscom.FccOperat"
  "ion\022!\n\006bosAck\030\033 \003(\0132\021.fccboscom.BosAck\022\'"
  "\n\theartBeat\030\034 \003(\0132\024.fccboscom.HeartBeat\022"
  "+\n\013otherDevice\030\035 \003(\0132\026.fccboscom.OtherDe"
  "vice\022!\n\006duLogs\030\036 \003(\0132\021.fccboscom.DULogs\022"
  "%\n\010bosAlarm\030\037 \003(\0132\023.fccboscom.BOSAlarm\022/"
  "\n\rfccDoorStatus\030  \003(\0132\030.fccboscom.FCCDoo"
  "rStatus\0223\n\017interlockStatus\030! \003(\0132\032.fccbo"
  "scom.InterlockStatus\022-\n\014deviceStatus\030\" \003"
  "(\0132\027.fccboscom.DeviceStatus\0221\n\016promotion"
  "alMsg\030# \003(\0132\031.fccboscom.PromotionalMsg\"Y"
  "\n\006DbConf\022\021\n\ttableName\030\001 \002(\t\022)\n\ndataModul"
  "e\030\002 \003(\0132\025.fccboscom.DataModule\022\021\n\toperat"
  "ion\030\003 \002(\r\":\n\nDataModule\022\013\n\003key\030\001 \002(\t\022\r\n\005"
  "value\030\002 \002(\t\022\020\n\010dataType\030\003 \002(\r\"\203\002\n\nTankSt"
  "atus\022\016\n\006tankId\030\001 \002(\r\022\017\n\007tankUid\030\002 \002(\r\022\022\n"
  "\ntankStatus\030\003 \002(\r\022\024\n\014productLevel\030\004 \002(\002\022"
  "\025\n\rproductVolume\030\005 \002(\002\022\022\n\nwaterLevel\030\006 \002"
  "(\002\022\023\n\013waterVolume\030\007 \002(\002\022\023\n\013temperature\030\010"
  " \002(\002\022\020\n\010tcVolume\030\t \002(\001\022\016\n\006ullage\030\n \002(\002\022\017"
  "\n\007density\030\013 \001(\002\022\021\n\ttcDensity\030\014 \001(\002\022\017\n\007lo"
  "ckVal\030\r \001(\r\"\304\001\n\nPumpStatus\022\016\n\006pumpId\030\001 \002"
  "(\r\022\017\n\007pumpUid\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\020\n\010n"
  "ozzleId\030\004 \002(\r\022\022\n\ntrxnVolume\030\005 \002(\002\022\022\n\ntrx"
  "nAmount\030\006 \002(\002\022\017\n\007lockVal\030\007 \002(\r\022\022\n\nnpndSt"
  "atus\030\010 \001(\r\022\024\n\014motorTimeout\030\t \001(\r\022\020\n\010pump"
  "Type\030\n \001(\r\"\367\001\n\tUpsStatus\022\r\n\005upsId\030\001 \002(\r\022"
  "\016\n\006upsUid\030\002 \002(\r\022\020\n\010inputVtg\030\003 \002(\002\022\021\n\tout"
  "putVtg\030\004 \002(\002\022\022\n\nbatteryVtg\030\005 \002(\002\022\021\n\tinpu"
  "tFreq\030\006 \002(\002\022\023\n\013temperature\030\007 \002(\002\022\021\n\tupsS"
  "tatus\030\010 \002(\t\022\023\n\013loadPercent\030\t \001(\002\022\026\n\016batt"
  "eryPercent\030\n \001(\002\022\023\n\013inventoryId\030\013 \001(\r\022\025\n"
  "\rinventoryTime\030\014 \001(\t\"\211\004\n\010PumpTrxn\022\016\n\006pum"
  "pId\030\001 \002(\r\022\017\n\007pumpUid\030\002 \002(\r\022\020\n\010nozzleId\030\003"
  " \002(\r\022\021\n\tnozzleUid\030\004 \002(\r\022\022\n\ntrxnVolume\030\005 "
  "\002(\002\022\022\n\ntrxnAmount\030\006 \002(\002\022\020\n\010unitRate\030\007 \002("
  "\002\022\034\n\024startVolumeTotalizer\030\010 \002(\001\022\032\n\022endVo"
  "lumeTotalizer\030\t \002(\001\022\022\n\npresetType\030\n \002(\r\022"
  "\022\n\npresetMode\030\013 \001(\r\022\023\n\013presetValue\030\014 \001(\002"
  "\022\016\n\006trxnId\030\r \002(\r\022\025\n\rtrxnStartTime\030\016 \002(\t\022"
  "\023\n\013trxnEndTime\030\017 \002(\t\022\r\n\005dayId\030\020 \002(\r\022\020\n\010g"
  "radeUid\030\021 \002(\r\022\020\n\010pumpMode\030\022 \002(\r\022\017\n\007shift"
  "Id\030\023 \002(\r\022\025\n\rdealerShiftId\030\024 \002(\r\022\017\n\007mopTy"
  "pe\030\025 \002(\r\022\037\n\027lastTrxnEndVolTotalizer\030\026 \002("
  "\001\022\024\n\014discountRate\030\027 \001(\002\022\025\n\rtotalDiscount"
  "\030\030 \001(\002\022\020\n\010presetId\030\031 \001(\001\"\306\002\n\rTankInvento"
  "ry\022\016\n\006tankId\030\001 \002(\r\022\017\n\007tankUid\030\002 \002(\r\022\024\n\014p"
  "roductLevel\030\003 \002(\002\022\022\n\nwaterLevel\030\004 \002(\002\022\025\n"
  "\rproductVolume\030\005 \002(\002\022\023\n\013waterVolume\030\006 \002("
  "\002\022\020\n\010tcVolume\030\007 \002(\002\022\016\n\006ullage\030\010 \002(\002\022\023\n\013t"
  "emperature\030\t \002(\002\022\022\n\ntankStatus\030\n \002(\r\022\026\n\016"
  "productDensity\030\013 \001(\002\022\030\n\020productTcDensity"
  "\030\014 \001(\002\022\023\n\013inventoryId\030\r \002(\r\022\025\n\rinventory"
  "Time\030\016 \002(\t\022\025\n\rinventoryMode\030\017 \002(\r\"\262\004\n\014Ta"
  "nkDelivery\022\016\n\006tankId\030\001 \002(\r\022\017\n\007tankUid\030\002 "
  "\002(\r\022\021\n\tstartTime\030\003 \002(\t\022\031\n\021startProductLe"
  "vel\030\004 \002(\002\022\027\n\017startWaterLevel\030\005 \002(\002\022\032\n\022st"
  "artProductVolume\030\006 \002(\002\022\030\n\020startWaterVolu"
  "me\030\007 \002(\002\022\034\n\024startProductTcVolume\030\010 \002(\002\022\030"
  "\n\020startTemperature\030\t \002(\002\022\033\n\023startProduct"
  "Density\030\n \001(\002\022\035\n\025startProductTcDensity\030\013"
  " \001(\002\022\017\n\007endTime\030\014 \002(\t\022\027\n\017endProductLevel"
  "\030\r \002(\002\022\025\n\rendWaterLevel\030\016 \002(\002\022\030\n\020endProd"
  "uctVolume\030\017 \002(\002\022\026\n\016endWaterVolume\030\020 \002(\002\022"
  "\032\n\022endProductTcVolume\030\021 \002(\002\022\026\n\016endTemper"
  "ature\030\022 \002(\002\022\031\n\021endProductDensity\030\023 \001(\002\022\033"
  "\n\023endProductTcDensity\030\024 \001(\002\022\022\n\ndeliveryI"
  "d\030\025 \002(\r\022\r\n\005atgId\030\026 \002(\r\022\016\n\006atgUid\030\027 \002(\r\"\310"
  "\002\n\017DeliveryReceipt\022\017\n\007tankUid\030\001 \002(\r\022\022\n\np"
  "roductUid\030\002 \002(\r\022\023\n\013supplyPoint\030\003 \002(\t\022\021\n\t"
  "invoiceNo\030\004 \002(\t\022\027\n\017invoiceDateTime\030\005 \002(\t"
  "\022\027\n\017invoiceQuantity\030\006 \002(\002\022\025\n\rinvoiceAmou"
  "nt\030\007 \002(\002\022\017\n\007truckNo\030\010 \002(\t\022\025\n\rcompartment"
  "No\030\t \002(\r\022\027\n\017observedDensity\030\n \002(\002\022\026\n\016inv"
  "oiceDensity\030\013 \002(\002\022\033\n\023observedTemperature"
  "\030\014 \002(\002\022\025\n\rdataEntryTime\030\r \002(\t\022\022\n\ndeliver"
  "yId\030\016 \002(\r\"\351\001\n\014AlarmDetails\022\017\n\007alarmId\030\001 "
  "\002(\r\022\027\n\017alarmSequenceId\030\002 \002(\r\022\025\n\ralarmTrx"
  "nCode\030\003 \002(\r\022\020\n\010deviceId\030\004 \002(\r\022\020\n\010nozzleI"
  "d\030\005 \001(\r\022\020\n\010dateTime\030\006 \002(\t\022\022\n\nalarmState\030"
  "\007 \002(\r\022\016\n\006param1\030\010 \001(\t\022\016\n\006param2\030\t \001(\t\022\016\n"
  "\006param3\030\n \001(\t\022\016\n\006param4\030\013 \001(\t\022\016\n\006param5\030"
  "\014 \001(\t\"S\n\rDayEndDetails\022\r\n\005dayId\030\001 \002(\r\022\020\n"
  "\010openTime\030\002 \001(\t\022\021\n\tcloseTime\030\003 \001(\t\022\016\n\006st"
  "atus\030\004 \002(\r\"\234\001\n\017DayEndTotalizer\022\r\n\005dayId\030"
  "\001 \002(\r\022\021\n\tnozzleUid\030\002 \002(\r\022\026\n\016startTotaliz"
  "er\030\003 \002(\001\022\024\n\014endTotalizer\030\004 \001(\001\022\027\n\017totalS"
  "aleVolume\030\005 \001(\001\022\020\n\010recordId\030\006 \002(\r\022\016\n\006sta"
  "tus\030\007 \002(\r\"\352\004\n\017DayEndInventory\022\r\n\005dayId\030\001"
  " \002(\r\022\017\n\007tankUid\030\002 \002(\r\022\031\n\021startProductLev"
  "el\030\003 \002(\002\022\027\n\017startWaterLevel\030\004 \002(\002\022\032\n\022sta"
  "rtProductVolume\030\005 \002(\002\022\030\n\020startWaterVolum"
  "e\030\006 \002(\002\022\034\n\024startProductTcVolume\030\007 \002(\002\022\030\n"
  "\020startTemperature\030\010 \002(\002\022\033\n\023startProductD"
  "ensity\030\t \001(\002\022\035\n\025startProductTcDensity\030\n "
  "\001(\002\022\023\n\013startUllage\030\013 \002(\002\022\027\n\017endProductLe"
  "vel\030\014 \001(\002\022\025\n\rendWaterLevel\030\r \001(\002\022\030\n\020endP"
  "roductVolume\030\016 \001(\002\022\026\n\016endWaterVolume\030\017 \001"
  "(\002\022\032\n\022endProductTcVolume\030\020 \001(\002\022\026\n\016endTem"
  "perature\030\021 \001(\002\022\031\n\021endProductDensity\030\022 \001("
  "\002\022\033\n\023endProductTcDensity\030\023 \001(\002\022\021\n\tendUll"
  "age\030\024 \001(\002\022\027\n\017totalSaleVolume\030\025 \001(\001\022\023\n\013in"
  "ventoryId\030\026 \001(\r\022\022\n\ntankStatus\030\027 \001(\r\022\021\n\tr"
  "ecordUid\030\030 \002(\r\022\016\n\006status\030\031 \002(\r\"\214\001\n\017Shift"
  "EndDetails\022\017\n\007shiftId\030\001 \002(\r\022\021\n\tshiftType"
  "\030\002 \002(\r\022\r\n\005dayId\030\003 \002(\r\022\020\n\010openTime\030\004 \001(\t\022"
  "\021\n\tcloseTime\030\005 \001(\t\022\016\n\006status\030\006 \002(\r\022\021\n\tre"
  "cordUid\030\007 \002(\r\"\375\001\n\021ShiftEndTotalizer\022\017\n\007s"
  "hiftId\030\001 \002(\r\022\021\n\tshiftType\030\002 \002(\r\022\r\n\005dayId"
  "\030\003 \002(\r\022\021\n\trecordUid\030\004 \002(\r\022\021\n\tnozzleUid\030\005"
  " \002(\r\022\016\n\006tankNo\030\006 \002(\r\022\026\n\016startTotalizer\030\007"
  " \002(\001\022\024\n\014endTotalizer\030\010 \001(\001\022\027\n\017totalSaleV"
  "olume\030\t \001(\001\022\022\n\nlastTrxnId\030\n \001(\r\022\024\n\014nozzl"
  "eStatus\030\013 \001(\t\022\016\n\006status\030\014 \002(\r\"\221\005\n\021ShiftE"
  "ndInventory\022\017\n\007shiftId\030\001 \002(\r\022\021\n\tshiftTyp"
  "e\030\002 \002(\r\022\021\n\trecordUid\030\003 \002(\r\022\r\n\005dayId\030\004 \002("
  "\r\022\017\n\007tankUid\030\005 \002(\r\022\031\n\021startProductLevel\030"
  "\006 \002(\002\022\027\n\017startWaterLevel\030\007 \002(\002\022\032\n\022startP"
  "roductVolume\030\010 \002(\002\022\030\n\020startWaterVolume\030\t"
  " \002(\002\022\034\n\024startProductTcVolume\030\n \002(\002\022\033\n\023st"
  "artProductDensity\030\013 \001(\002\022\035\n\025startProductT"
  "cDensity\030\014 \001(\002\022\023\n\013startUllage\030\r \002(\002\022\030\n\020s"
  "tartTemperature\030\016 \002(\002\022\027\n\017endProductLevel"
  "\030\017 \001(\002\022\025\n\rendWaterLevel\030\020 \001(\002\022\030\n\020endProd"
  "uctVolume\030\021 \001(\002\022\026\n\016endWaterVolume\030\022 \001(\002\022"
  "\032\n\022endProductTcVolume\030\023 \001(\002\022\031\n\021endProduc"
  "tDensity\030\024 \001(\002\022\033\n\023endProductTcDensity\030\025 "
  "\001(\002\022\021\n\tendUllage\030\026 \001(\002\022\026\n\016endTemperature"
  "\030\027 \001(\002\022\027\n\017totalSaleVolume\030\030 \001(\001\022\024\n\014inven"
  "toryUid\030\031 \001(\r\022\022\n\ntankStatus\030\032 \001(\r\022\016\n\006sta"
  "tus\030\033 \002(\r\"\246\001\n\013PumpControl\022\017\n\007pumpUid\030\001 \002"
  "(\r\022\020\n\010nozzleId\030\002 \002(\r\022\021\n\tcontrolId\030\003 \002(\r\022"
  "\022\n\npresetType\030\004 \001(\r\022\023\n\013presetValue\030\005 \001(\002"
  "\022\021\n\tpresetMop\030\006 \001(\r\022\020\n\010pumpMode\030\007 \001(\r\022\023\n"
  "\013presetRefId\030\010 \001(\t\"1\n\013TankControl\022\017\n\007tan"
  "kUid\030\001 \002(\r\022\021\n\tcontrolId\030\002 \002(\r\"\335\001\n\022Produc"
  "tPriceChange\022\027\n\017priceIdentifier\030\001 \002(\r\022\020\n"
  "\010gradeUid\030\002 \002(\r\022\021\n\tgradeRate\030\003 \002(\002\022\025\n\ref"
  "fectiveTime\030\004 \002(\t\022\022\n\nupdateTime\030\005 \001(\t\022\022\n"
  "\nupdateFlag\030\006 \001(\r\022\020\n\010updateBy\030\007 \001(\t\022\025\n\re"
  "ffectiveType\030\010 \001(\t\022\023\n\013endDatetime\030\t \002(\t\022"
  "\014\n\004flag\030\n \001(\r\"\215\001\n\021PriceChangeStatus\022\027\n\017p"
  "riceIdentifier\030\001 \002(\r\022\021\n\tproductId\030\002 \002(\r\022"
  "\016\n\006status\030\003 \002(\r\022\027\n\017productNewPrice\030\004 \002(\002"
  "\022\025\n\reffectiveTime\030\005 \002(\t\022\014\n\004flag\030\006 \001(\r\"{\n"
  "\020OperationControl\022\032\n\022operationControlId\030"
  "\001 \002(\r\022\025\n\roperationMode\030\002 \001(\r\022\014\n\004time\030\003 \001"
  "(\t\022\021\n\tconfigKey\030\004 \001(\t\022\023\n\013configValue\030\005 \001"
  "(\t\"V\n\rTrxnMopUpdate\022\016\n\006trxnId\030\001 \002(\r\022\017\n\007m"
  "opType\030\002 \002(\r\022\022\n\nupdateDate\030\003 \002(\t\022\020\n\010upda"
  "teBy\030\004 \002(\t\"=\n\010AlarmAck\022\021\n\trecordUid\030\001 \002("
  "\r\022\r\n\005ackBy\030\002 \002(\t\022\017\n\007ackTime\030\003 \002(\t\"*\n\014Fcc"
  "Operation\022\013\n\003key\030\001 \002(\r\022\r\n\005value\030\002 \001(\t\"9\n"
  "\006BosAck\022\r\n\005msgId\030\001 \002(\r\022\r\n\005recId\030\002 \002(\r\022\021\n"
  "\toperation\030\003 \002(\r\"D\n\tHeartBeat\022\022\n\ndeviceT"
  "ype\030\001 \002(\r\022\020\n\010deviceId\030\002 \002(\r\022\021\n\ttimestamp"
  "\030\003 \001(\t\"|\n\013OtherDevice\022\022\n\ndeviceType\030\001 \002("
  "\r\022\020\n\010deviceId\030\002 \002(\r\022\016\n\006status\030\003 \002(\r\022\021\n\ts"
  "wVersion\030\004 \001(\r\022\021\n\thwVersion\030\005 \001(\r\022\021\n\ttrx"
  "nCount\030\006 \001(\r\"\327\004\n\006DULogs\022\r\n\005logId\030\001 \002(\005\022\016"
  "\n\006pumpno\030\002 \002(\005\022\020\n\010nozzleno\030\003 \002(\005\022\023\n\013prod"
  "uctCode\030\004 \002(\005\022\023\n\013logTranType\030\005 \002(\005\022\022\n\npa"
  "ramDesc1\030\006 \001(\t\022\016\n\006param1\030\007 \001(\t\022\022\n\nparamD"
  "esc2\030\010 \001(\t\022\016\n\006param2\030\t \001(\t\022\022\n\nparamDesc3"
  "\030\n \001(\t\022\016\n\006param3\030\013 \001(\t\022\022\n\nparamDesc4\030\014 \001"
  "(\t\022\016\n\006param4\030\r \001(\t\022\022\n\nparamDesc5\030\016 \001(\t\022\016"
  "\n\006param5\030\017 \001(\t\022\022\n\nparamDesc6\030\020 \001(\t\022\016\n\006pa"
  "ram6\030\021 \001(\t\022\022\n\nparamDesc7\030\022 \001(\t\022\016\n\006param7"
  "\030\023 \001(\t\022\022\n\nparamDesc8\030\024 \001(\t\022\016\n\006param8\030\025 \001"
  "(\t\022\022\n\nparamDesc9\030\026 \001(\t\022\016\n\006param9\030\027 \001(\t\022\023"
  "\n\013paramDesc10\030\030 \001(\t\022\017\n\007param10\030\031 \001(\t\022\023\n\013"
  "paramDesc11\030\032 \001(\t\022\017\n\007param11\030\033 \001(\t\022\023\n\013pa"
  "ramDesc12\030\034 \001(\t\022\017\n\007param12\030\035 \001(\t\022\022\n\ncrea"
  "teDate\030\036 \002(\t\022\023\n\013logDatetime\030\037 \001(\t\022\023\n\013log"
  "TypeDesc\030  \001(\t\"\221\001\n\010BOSAlarm\022\017\n\007alarmId\030\001"
  " \002(\r\022\020\n\010deviceId\030\002 \002(\r\022\022\n\nalarmState\030\003 \002"
  "(\r\022\016\n\006param1\030\004 \001(\t\022\016\n\006param2\030\005 \001(\t\022\016\n\006pa"
  "ram3\030\006 \001(\t\022\016\n\006param4\030\007 \001(\t\022\016\n\006param5\030\010 \001"
  "(\t\"1\n\rFCCDoorStatus\022\016\n\006status\030\001 \002(\r\022\020\n\010d"
  "ateTime\030\002 \002(\t\"r\n\017InterlockStatus\022\022\n\ndevi"
  "ceType\030\001 \002(\005\022\020\n\010deviceId\030\002 \002(\005\022\025\n\rinterl"
  "ockType\030\003 \002(\005\022\020\n\010dateTime\030\004 \002(\t\022\020\n\010nozzl"
  "eId\030\005 \001(\005\"h\n\014DeviceStatus\022\022\n\ndeviceType\030"
  "\001 \002(\r\022\020\n\010deviceId\030\002 \002(\r\022\020\n\010nozzleId\030\003 \001("
  "\r\022\016\n\006status\030\004 \002(\r\022\020\n\010dateTime\030\005 \002(\t\"!\n\016P"
  "romotionalMsg\022\017\n\007message\030\001 \002(\t"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_fccboscom_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_fccboscom_2eproto_sccs[34] = {
  &scc_info_AlarmAck_fccboscom_2eproto.base,
  &scc_info_AlarmDetails_fccboscom_2eproto.base,
  &scc_info_BOSAlarm_fccboscom_2eproto.base,
  &scc_info_BosAck_fccboscom_2eproto.base,
  &scc_info_DULogs_fccboscom_2eproto.base,
  &scc_info_DataModule_fccboscom_2eproto.base,
  &scc_info_DayEndDetails_fccboscom_2eproto.base,
  &scc_info_DayEndInventory_fccboscom_2eproto.base,
  &scc_info_DayEndTotalizer_fccboscom_2eproto.base,
  &scc_info_DbConf_fccboscom_2eproto.base,
  &scc_info_DeliveryReceipt_fccboscom_2eproto.base,
  &scc_info_DeviceStatus_fccboscom_2eproto.base,
  &scc_info_FCCDoorStatus_fccboscom_2eproto.base,
  &scc_info_FccOperation_fccboscom_2eproto.base,
  &scc_info_HeartBeat_fccboscom_2eproto.base,
  &scc_info_InterlockStatus_fccboscom_2eproto.base,
  &scc_info_OperationControl_fccboscom_2eproto.base,
  &scc_info_OtherDevice_fccboscom_2eproto.base,
  &scc_info_PriceChangeStatus_fccboscom_2eproto.base,
  &scc_info_ProductPriceChange_fccboscom_2eproto.base,
  &scc_info_PromotionalMsg_fccboscom_2eproto.base,
  &scc_info_PumpControl_fccboscom_2eproto.base,
  &scc_info_PumpStatus_fccboscom_2eproto.base,
  &scc_info_PumpTrxn_fccboscom_2eproto.base,
  &scc_info_RoData_fccboscom_2eproto.base,
  &scc_info_ShiftEndDetails_fccboscom_2eproto.base,
  &scc_info_ShiftEndInventory_fccboscom_2eproto.base,
  &scc_info_ShiftEndTotalizer_fccboscom_2eproto.base,
  &scc_info_TankControl_fccboscom_2eproto.base,
  &scc_info_TankDelivery_fccboscom_2eproto.base,
  &scc_info_TankInventory_fccboscom_2eproto.base,
  &scc_info_TankStatus_fccboscom_2eproto.base,
  &scc_info_TrxnMopUpdate_fccboscom_2eproto.base,
  &scc_info_UpsStatus_fccboscom_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_fccboscom_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fccboscom_2eproto = {
  false, false, descriptor_table_protodef_fccboscom_2eproto, "fccboscom.proto", 8590,
  &descriptor_table_fccboscom_2eproto_once, descriptor_table_fccboscom_2eproto_sccs, descriptor_table_fccboscom_2eproto_deps, 34, 0,
  schemas, file_default_instances, TableStruct_fccboscom_2eproto::offsets,
  file_level_metadata_fccboscom_2eproto, 34, file_level_enum_descriptors_fccboscom_2eproto, file_level_service_descriptors_fccboscom_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_fccboscom_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_fccboscom_2eproto)), true);
namespace fccboscom {

// ===================================================================

void RoData::InitAsDefaultInstance() {
}
class RoData::_Internal {
 public:
  using HasBits = decltype(std::declval<RoData>()._has_bits_);
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_ack(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_msgrecordid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

RoData::RoData(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  dbconf_(arena),
  tankstatus_(arena),
  pumpstatus_(arena),
  upsstatus_(arena),
  pumptrxn_(arena),
  tankinventory_(arena),
  tankdelivery_(arena),
  deliveryreceipt_(arena),
  alarmdetails_(arena),
  dayenddetails_(arena),
  dayendtotalizer_(arena),
  dayendinventory_(arena),
  shiftenddetails_(arena),
  shiftendtotalizer_(arena),
  shiftendinventory_(arena),
  pumpcontrol_(arena),
  tankcontrol_(arena),
  productpricechange_(arena),
  pricechangestatus_(arena),
  operationcontrol_(arena),
  trxnmopupdate_(arena),
  alarmack_(arena),
  fccoperation_(arena),
  bosack_(arena),
  heartbeat_(arena),
  otherdevice_(arena),
  dulogs_(arena),
  bosalarm_(arena),
  fccdoorstatus_(arena),
  interlockstatus_(arena),
  devicestatus_(arena),
  promotionalmsg_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.RoData)
}
RoData::RoData(const RoData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      dbconf_(from.dbconf_),
      tankstatus_(from.tankstatus_),
      pumpstatus_(from.pumpstatus_),
      upsstatus_(from.upsstatus_),
      pumptrxn_(from.pumptrxn_),
      tankinventory_(from.tankinventory_),
      tankdelivery_(from.tankdelivery_),
      deliveryreceipt_(from.deliveryreceipt_),
      alarmdetails_(from.alarmdetails_),
      dayenddetails_(from.dayenddetails_),
      dayendtotalizer_(from.dayendtotalizer_),
      dayendinventory_(from.dayendinventory_),
      shiftenddetails_(from.shiftenddetails_),
      shiftendtotalizer_(from.shiftendtotalizer_),
      shiftendinventory_(from.shiftendinventory_),
      pumpcontrol_(from.pumpcontrol_),
      tankcontrol_(from.tankcontrol_),
      productpricechange_(from.productpricechange_),
      pricechangestatus_(from.pricechangestatus_),
      operationcontrol_(from.operationcontrol_),
      trxnmopupdate_(from.trxnmopupdate_),
      alarmack_(from.alarmack_),
      fccoperation_(from.fccoperation_),
      bosack_(from.bosack_),
      heartbeat_(from.heartbeat_),
      otherdevice_(from.otherdevice_),
      dulogs_(from.dulogs_),
      bosalarm_(from.bosalarm_),
      fccdoorstatus_(from.fccdoorstatus_),
      interlockstatus_(from.interlockstatus_),
      devicestatus_(from.devicestatus_),
      promotionalmsg_(from.promotionalmsg_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&msgrecordid_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(msgrecordid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.RoData)
}

void RoData::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_RoData_fccboscom_2eproto.base);
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&msgrecordid_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(msgrecordid_));
}

RoData::~RoData() {
  // @@protoc_insertion_point(destructor:fccboscom.RoData)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void RoData::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void RoData::ArenaDtor(void* object) {
  RoData* _this = reinterpret_cast< RoData* >(object);
  (void)_this;
}
void RoData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void RoData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const RoData& RoData::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_RoData_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void RoData::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.RoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  dbconf_.Clear();
  tankstatus_.Clear();
  pumpstatus_.Clear();
  upsstatus_.Clear();
  pumptrxn_.Clear();
  tankinventory_.Clear();
  tankdelivery_.Clear();
  deliveryreceipt_.Clear();
  alarmdetails_.Clear();
  dayenddetails_.Clear();
  dayendtotalizer_.Clear();
  dayendinventory_.Clear();
  shiftenddetails_.Clear();
  shiftendtotalizer_.Clear();
  shiftendinventory_.Clear();
  pumpcontrol_.Clear();
  tankcontrol_.Clear();
  productpricechange_.Clear();
  pricechangestatus_.Clear();
  operationcontrol_.Clear();
  trxnmopupdate_.Clear();
  alarmack_.Clear();
  fccoperation_.Clear();
  bosack_.Clear();
  heartbeat_.Clear();
  otherdevice_.Clear();
  dulogs_.Clear();
  bosalarm_.Clear();
  fccdoorstatus_.Clear();
  interlockstatus_.Clear();
  devicestatus_.Clear();
  promotionalmsg_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&msgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&msgrecordid_) -
        reinterpret_cast<char*>(&msgid_)) + sizeof(msgrecordid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* RoData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 msgid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msgid(&has_bits);
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 ack = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_ack(&has_bits);
          ack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 msgRecordId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_msgrecordid(&has_bits);
          msgrecordid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DbConf dbConf = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dbconf(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.TankStatus tankStatus = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tankstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.PumpStatus pumpStatus = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pumpstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.UpsStatus upsStatus = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_upsstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.PumpTrxn pumpTrxn = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_pumptrxn(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<66>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.TankInventory tankInventory = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tankinventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<74>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.TankDelivery tankDelivery = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_tankdelivery(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<82>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DeliveryReceipt deliveryReceipt = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_deliveryreceipt(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.AlarmDetails alarmDetails = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_alarmdetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<98>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DayEndDetails dayEndDetails = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dayenddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<106>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DayEndTotalizer dayEndTotalizer = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dayendtotalizer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<114>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DayEndInventory dayEndInventory = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_dayendinventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.ShiftEndDetails shiftEndDetails = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shiftenddetails(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<130>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.ShiftEndTotalizer shiftEndTotalizer = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shiftendtotalizer(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<138>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.ShiftEndInventory shiftEndInventory = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_shiftendinventory(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<146>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.PumpControl pumpControl = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pumpcontrol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<154>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.TankControl tankControl = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_tankcontrol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<162>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.ProductPriceChange productPriceChange = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_productpricechange(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<170>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.PriceChangeStatus priceChangeStatus = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_pricechangestatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<178>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.OperationControl operationControl = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_operationcontrol(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<186>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.TrxnMopUpdate trxnMopUpdate = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_trxnmopupdate(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<194>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.AlarmAck alarmAck = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_alarmack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<202>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.FccOperation fccOperation = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fccoperation(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<210>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.BosAck bosAck = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bosack(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<218>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.HeartBeat heartBeat = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_heartbeat(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<226>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.OtherDevice otherDevice = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_otherdevice(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<234>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DULogs duLogs = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_dulogs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<242>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.BOSAlarm bosAlarm = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_bosalarm(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<250>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.FCCDoorStatus fccDoorStatus = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_fccdoorstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<258>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.InterlockStatus interlockStatus = 33;
      case 33:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_interlockstatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<266>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DeviceStatus deviceStatus = 34;
      case 34:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_devicestatus(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<274>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.PromotionalMsg promotionalMsg = 35;
      case 35:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 2;
          do {
            ptr += 2;
            ptr = ctx->ParseMessage(_internal_add_promotionalmsg(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<282>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* RoData::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.RoData)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msgid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // optional uint32 ack = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_ack(), target);
  }

  // optional uint32 msgRecordId = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_msgrecordid(), target);
  }

  // repeated .fccboscom.DbConf dbConf = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dbconf_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_dbconf(i), target, stream);
  }

  // repeated .fccboscom.TankStatus tankStatus = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tankstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, this->_internal_tankstatus(i), target, stream);
  }

  // repeated .fccboscom.PumpStatus pumpStatus = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pumpstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_pumpstatus(i), target, stream);
  }

  // repeated .fccboscom.UpsStatus upsStatus = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_upsstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_upsstatus(i), target, stream);
  }

  // repeated .fccboscom.PumpTrxn pumpTrxn = 8;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pumptrxn_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, this->_internal_pumptrxn(i), target, stream);
  }

  // repeated .fccboscom.TankInventory tankInventory = 9;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tankinventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(9, this->_internal_tankinventory(i), target, stream);
  }

  // repeated .fccboscom.TankDelivery tankDelivery = 10;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tankdelivery_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(10, this->_internal_tankdelivery(i), target, stream);
  }

  // repeated .fccboscom.DeliveryReceipt deliveryReceipt = 11;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_deliveryreceipt_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(11, this->_internal_deliveryreceipt(i), target, stream);
  }

  // repeated .fccboscom.AlarmDetails alarmDetails = 12;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alarmdetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, this->_internal_alarmdetails(i), target, stream);
  }

  // repeated .fccboscom.DayEndDetails dayEndDetails = 13;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dayenddetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, this->_internal_dayenddetails(i), target, stream);
  }

  // repeated .fccboscom.DayEndTotalizer dayEndTotalizer = 14;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dayendtotalizer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, this->_internal_dayendtotalizer(i), target, stream);
  }

  // repeated .fccboscom.DayEndInventory dayEndInventory = 15;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dayendinventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(15, this->_internal_dayendinventory(i), target, stream);
  }

  // repeated .fccboscom.ShiftEndDetails shiftEndDetails = 16;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shiftenddetails_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(16, this->_internal_shiftenddetails(i), target, stream);
  }

  // repeated .fccboscom.ShiftEndTotalizer shiftEndTotalizer = 17;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shiftendtotalizer_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(17, this->_internal_shiftendtotalizer(i), target, stream);
  }

  // repeated .fccboscom.ShiftEndInventory shiftEndInventory = 18;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_shiftendinventory_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(18, this->_internal_shiftendinventory(i), target, stream);
  }

  // repeated .fccboscom.PumpControl pumpControl = 19;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pumpcontrol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(19, this->_internal_pumpcontrol(i), target, stream);
  }

  // repeated .fccboscom.TankControl tankControl = 20;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_tankcontrol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, this->_internal_tankcontrol(i), target, stream);
  }

  // repeated .fccboscom.ProductPriceChange productPriceChange = 21;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_productpricechange_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(21, this->_internal_productpricechange(i), target, stream);
  }

  // repeated .fccboscom.PriceChangeStatus priceChangeStatus = 22;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_pricechangestatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(22, this->_internal_pricechangestatus(i), target, stream);
  }

  // repeated .fccboscom.OperationControl operationControl = 23;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_operationcontrol_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(23, this->_internal_operationcontrol(i), target, stream);
  }

  // repeated .fccboscom.TrxnMopUpdate trxnMopUpdate = 24;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_trxnmopupdate_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(24, this->_internal_trxnmopupdate(i), target, stream);
  }

  // repeated .fccboscom.AlarmAck alarmAck = 25;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_alarmack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(25, this->_internal_alarmack(i), target, stream);
  }

  // repeated .fccboscom.FccOperation fccOperation = 26;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fccoperation_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(26, this->_internal_fccoperation(i), target, stream);
  }

  // repeated .fccboscom.BosAck bosAck = 27;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bosack_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(27, this->_internal_bosack(i), target, stream);
  }

  // repeated .fccboscom.HeartBeat heartBeat = 28;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_heartbeat_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(28, this->_internal_heartbeat(i), target, stream);
  }

  // repeated .fccboscom.OtherDevice otherDevice = 29;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_otherdevice_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(29, this->_internal_otherdevice(i), target, stream);
  }

  // repeated .fccboscom.DULogs duLogs = 30;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_dulogs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(30, this->_internal_dulogs(i), target, stream);
  }

  // repeated .fccboscom.BOSAlarm bosAlarm = 31;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bosalarm_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(31, this->_internal_bosalarm(i), target, stream);
  }

  // repeated .fccboscom.FCCDoorStatus fccDoorStatus = 32;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_fccdoorstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(32, this->_internal_fccdoorstatus(i), target, stream);
  }

  // repeated .fccboscom.InterlockStatus interlockStatus = 33;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_interlockstatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(33, this->_internal_interlockstatus(i), target, stream);
  }

  // repeated .fccboscom.DeviceStatus deviceStatus = 34;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_devicestatus_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(34, this->_internal_devicestatus(i), target, stream);
  }

  // repeated .fccboscom.PromotionalMsg promotionalMsg = 35;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_promotionalmsg_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(35, this->_internal_promotionalmsg(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.RoData)
  return target;
}

size_t RoData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.RoData)
  size_t total_size = 0;

  // required uint32 msgid = 1;
  if (_internal_has_msgid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msgid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fccboscom.DbConf dbConf = 4;
  total_size += 1UL * this->_internal_dbconf_size();
  for (const auto& msg : this->dbconf_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.TankStatus tankStatus = 5;
  total_size += 1UL * this->_internal_tankstatus_size();
  for (const auto& msg : this->tankstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.PumpStatus pumpStatus = 6;
  total_size += 1UL * this->_internal_pumpstatus_size();
  for (const auto& msg : this->pumpstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.UpsStatus upsStatus = 7;
  total_size += 1UL * this->_internal_upsstatus_size();
  for (const auto& msg : this->upsstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.PumpTrxn pumpTrxn = 8;
  total_size += 1UL * this->_internal_pumptrxn_size();
  for (const auto& msg : this->pumptrxn_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.TankInventory tankInventory = 9;
  total_size += 1UL * this->_internal_tankinventory_size();
  for (const auto& msg : this->tankinventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.TankDelivery tankDelivery = 10;
  total_size += 1UL * this->_internal_tankdelivery_size();
  for (const auto& msg : this->tankdelivery_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DeliveryReceipt deliveryReceipt = 11;
  total_size += 1UL * this->_internal_deliveryreceipt_size();
  for (const auto& msg : this->deliveryreceipt_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.AlarmDetails alarmDetails = 12;
  total_size += 1UL * this->_internal_alarmdetails_size();
  for (const auto& msg : this->alarmdetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DayEndDetails dayEndDetails = 13;
  total_size += 1UL * this->_internal_dayenddetails_size();
  for (const auto& msg : this->dayenddetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DayEndTotalizer dayEndTotalizer = 14;
  total_size += 1UL * this->_internal_dayendtotalizer_size();
  for (const auto& msg : this->dayendtotalizer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DayEndInventory dayEndInventory = 15;
  total_size += 1UL * this->_internal_dayendinventory_size();
  for (const auto& msg : this->dayendinventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.ShiftEndDetails shiftEndDetails = 16;
  total_size += 2UL * this->_internal_shiftenddetails_size();
  for (const auto& msg : this->shiftenddetails_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.ShiftEndTotalizer shiftEndTotalizer = 17;
  total_size += 2UL * this->_internal_shiftendtotalizer_size();
  for (const auto& msg : this->shiftendtotalizer_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.ShiftEndInventory shiftEndInventory = 18;
  total_size += 2UL * this->_internal_shiftendinventory_size();
  for (const auto& msg : this->shiftendinventory_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.PumpControl pumpControl = 19;
  total_size += 2UL * this->_internal_pumpcontrol_size();
  for (const auto& msg : this->pumpcontrol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.TankControl tankControl = 20;
  total_size += 2UL * this->_internal_tankcontrol_size();
  for (const auto& msg : this->tankcontrol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.ProductPriceChange productPriceChange = 21;
  total_size += 2UL * this->_internal_productpricechange_size();
  for (const auto& msg : this->productpricechange_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.PriceChangeStatus priceChangeStatus = 22;
  total_size += 2UL * this->_internal_pricechangestatus_size();
  for (const auto& msg : this->pricechangestatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.OperationControl operationControl = 23;
  total_size += 2UL * this->_internal_operationcontrol_size();
  for (const auto& msg : this->operationcontrol_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.TrxnMopUpdate trxnMopUpdate = 24;
  total_size += 2UL * this->_internal_trxnmopupdate_size();
  for (const auto& msg : this->trxnmopupdate_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.AlarmAck alarmAck = 25;
  total_size += 2UL * this->_internal_alarmack_size();
  for (const auto& msg : this->alarmack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.FccOperation fccOperation = 26;
  total_size += 2UL * this->_internal_fccoperation_size();
  for (const auto& msg : this->fccoperation_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.BosAck bosAck = 27;
  total_size += 2UL * this->_internal_bosack_size();
  for (const auto& msg : this->bosack_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.HeartBeat heartBeat = 28;
  total_size += 2UL * this->_internal_heartbeat_size();
  for (const auto& msg : this->heartbeat_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.OtherDevice otherDevice = 29;
  total_size += 2UL * this->_internal_otherdevice_size();
  for (const auto& msg : this->otherdevice_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DULogs duLogs = 30;
  total_size += 2UL * this->_internal_dulogs_size();
  for (const auto& msg : this->dulogs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.BOSAlarm bosAlarm = 31;
  total_size += 2UL * this->_internal_bosalarm_size();
  for (const auto& msg : this->bosalarm_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.FCCDoorStatus fccDoorStatus = 32;
  total_size += 2UL * this->_internal_fccdoorstatus_size();
  for (const auto& msg : this->fccdoorstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.InterlockStatus interlockStatus = 33;
  total_size += 2UL * this->_internal_interlockstatus_size();
  for (const auto& msg : this->interlockstatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.DeviceStatus deviceStatus = 34;
  total_size += 2UL * this->_internal_devicestatus_size();
  for (const auto& msg : this->devicestatus_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .fccboscom.PromotionalMsg promotionalMsg = 35;
  total_size += 2UL * this->_internal_promotionalmsg_size();
  for (const auto& msg : this->promotionalmsg_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000006u) {
    // optional uint32 ack = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_ack());
    }

    // optional uint32 msgRecordId = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_msgrecordid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void RoData::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.RoData)
  GOOGLE_DCHECK_NE(&from, this);
  const RoData* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<RoData>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.RoData)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.RoData)
    MergeFrom(*source);
  }
}

void RoData::MergeFrom(const RoData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.RoData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  dbconf_.MergeFrom(from.dbconf_);
  tankstatus_.MergeFrom(from.tankstatus_);
  pumpstatus_.MergeFrom(from.pumpstatus_);
  upsstatus_.MergeFrom(from.upsstatus_);
  pumptrxn_.MergeFrom(from.pumptrxn_);
  tankinventory_.MergeFrom(from.tankinventory_);
  tankdelivery_.MergeFrom(from.tankdelivery_);
  deliveryreceipt_.MergeFrom(from.deliveryreceipt_);
  alarmdetails_.MergeFrom(from.alarmdetails_);
  dayenddetails_.MergeFrom(from.dayenddetails_);
  dayendtotalizer_.MergeFrom(from.dayendtotalizer_);
  dayendinventory_.MergeFrom(from.dayendinventory_);
  shiftenddetails_.MergeFrom(from.shiftenddetails_);
  shiftendtotalizer_.MergeFrom(from.shiftendtotalizer_);
  shiftendinventory_.MergeFrom(from.shiftendinventory_);
  pumpcontrol_.MergeFrom(from.pumpcontrol_);
  tankcontrol_.MergeFrom(from.tankcontrol_);
  productpricechange_.MergeFrom(from.productpricechange_);
  pricechangestatus_.MergeFrom(from.pricechangestatus_);
  operationcontrol_.MergeFrom(from.operationcontrol_);
  trxnmopupdate_.MergeFrom(from.trxnmopupdate_);
  alarmack_.MergeFrom(from.alarmack_);
  fccoperation_.MergeFrom(from.fccoperation_);
  bosack_.MergeFrom(from.bosack_);
  heartbeat_.MergeFrom(from.heartbeat_);
  otherdevice_.MergeFrom(from.otherdevice_);
  dulogs_.MergeFrom(from.dulogs_);
  bosalarm_.MergeFrom(from.bosalarm_);
  fccdoorstatus_.MergeFrom(from.fccdoorstatus_);
  interlockstatus_.MergeFrom(from.interlockstatus_);
  devicestatus_.MergeFrom(from.devicestatus_);
  promotionalmsg_.MergeFrom(from.promotionalmsg_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      ack_ = from.ack_;
    }
    if (cached_has_bits & 0x00000004u) {
      msgrecordid_ = from.msgrecordid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void RoData::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.RoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RoData::CopyFrom(const RoData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.RoData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RoData::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dbconf_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tankstatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pumpstatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(upsstatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pumptrxn_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tankinventory_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tankdelivery_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(deliveryreceipt_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(alarmdetails_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dayenddetails_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dayendtotalizer_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dayendinventory_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shiftenddetails_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shiftendtotalizer_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(shiftendinventory_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pumpcontrol_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(tankcontrol_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(productpricechange_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(pricechangestatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(operationcontrol_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(trxnmopupdate_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(alarmack_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fccoperation_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bosack_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(heartbeat_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(otherdevice_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(dulogs_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(bosalarm_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(fccdoorstatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(interlockstatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(devicestatus_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(promotionalmsg_)) return false;
  return true;
}

void RoData::InternalSwap(RoData* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  dbconf_.InternalSwap(&other->dbconf_);
  tankstatus_.InternalSwap(&other->tankstatus_);
  pumpstatus_.InternalSwap(&other->pumpstatus_);
  upsstatus_.InternalSwap(&other->upsstatus_);
  pumptrxn_.InternalSwap(&other->pumptrxn_);
  tankinventory_.InternalSwap(&other->tankinventory_);
  tankdelivery_.InternalSwap(&other->tankdelivery_);
  deliveryreceipt_.InternalSwap(&other->deliveryreceipt_);
  alarmdetails_.InternalSwap(&other->alarmdetails_);
  dayenddetails_.InternalSwap(&other->dayenddetails_);
  dayendtotalizer_.InternalSwap(&other->dayendtotalizer_);
  dayendinventory_.InternalSwap(&other->dayendinventory_);
  shiftenddetails_.InternalSwap(&other->shiftenddetails_);
  shiftendtotalizer_.InternalSwap(&other->shiftendtotalizer_);
  shiftendinventory_.InternalSwap(&other->shiftendinventory_);
  pumpcontrol_.InternalSwap(&other->pumpcontrol_);
  tankcontrol_.InternalSwap(&other->tankcontrol_);
  productpricechange_.InternalSwap(&other->productpricechange_);
  pricechangestatus_.InternalSwap(&other->pricechangestatus_);
  operationcontrol_.InternalSwap(&other->operationcontrol_);
  trxnmopupdate_.InternalSwap(&other->trxnmopupdate_);
  alarmack_.InternalSwap(&other->alarmack_);
  fccoperation_.InternalSwap(&other->fccoperation_);
  bosack_.InternalSwap(&other->bosack_);
  heartbeat_.InternalSwap(&other->heartbeat_);
  otherdevice_.InternalSwap(&other->otherdevice_);
  dulogs_.InternalSwap(&other->dulogs_);
  bosalarm_.InternalSwap(&other->bosalarm_);
  fccdoorstatus_.InternalSwap(&other->fccdoorstatus_);
  interlockstatus_.InternalSwap(&other->interlockstatus_);
  devicestatus_.InternalSwap(&other->devicestatus_);
  promotionalmsg_.InternalSwap(&other->promotionalmsg_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(RoData, msgrecordid_)
      + sizeof(RoData::msgrecordid_)
      - PROTOBUF_FIELD_OFFSET(RoData, msgid_)>(
          reinterpret_cast<char*>(&msgid_),
          reinterpret_cast<char*>(&other->msgid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata RoData::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DbConf::InitAsDefaultInstance() {
}
class DbConf::_Internal {
 public:
  using HasBits = decltype(std::declval<DbConf>()._has_bits_);
  static void set_has_tablename(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

DbConf::DbConf(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  datamodule_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DbConf)
}
DbConf::DbConf(const DbConf& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_),
      datamodule_(from.datamodule_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  tablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_tablename()) {
    tablename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_tablename(),
      GetArena());
  }
  operation_ = from.operation_;
  // @@protoc_insertion_point(copy_constructor:fccboscom.DbConf)
}

void DbConf::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DbConf_fccboscom_2eproto.base);
  tablename_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  operation_ = 0u;
}

DbConf::~DbConf() {
  // @@protoc_insertion_point(destructor:fccboscom.DbConf)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DbConf::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  tablename_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DbConf::ArenaDtor(void* object) {
  DbConf* _this = reinterpret_cast< DbConf* >(object);
  (void)_this;
}
void DbConf::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DbConf::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DbConf& DbConf::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DbConf_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DbConf::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DbConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  datamodule_.Clear();
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    tablename_.ClearNonDefaultToEmpty();
  }
  operation_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DbConf::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string tableName = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_tablename();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DbConf.tableName");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated .fccboscom.DataModule dataModule = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_datamodule(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // required uint32 operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_operation(&has_bits);
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DbConf::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DbConf)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string tableName = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_tablename().data(), static_cast<int>(this->_internal_tablename().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DbConf.tableName");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_tablename(), target);
  }

  // repeated .fccboscom.DataModule dataModule = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_datamodule_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_datamodule(i), target, stream);
  }

  // required uint32 operation = 3;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DbConf)
  return target;
}

size_t DbConf::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DbConf)
  size_t total_size = 0;

  if (_internal_has_tablename()) {
    // required string tableName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tablename());
  }

  if (_internal_has_operation()) {
    // required uint32 operation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());
  }

  return total_size;
}
size_t DbConf::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DbConf)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string tableName = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_tablename());

    // required uint32 operation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .fccboscom.DataModule dataModule = 2;
  total_size += 1UL * this->_internal_datamodule_size();
  for (const auto& msg : this->datamodule_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DbConf::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DbConf)
  GOOGLE_DCHECK_NE(&from, this);
  const DbConf* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DbConf>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DbConf)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DbConf)
    MergeFrom(*source);
  }
}

void DbConf::MergeFrom(const DbConf& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DbConf)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  datamodule_.MergeFrom(from.datamodule_);
  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_tablename(from._internal_tablename());
    }
    if (cached_has_bits & 0x00000002u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DbConf::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DbConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DbConf::CopyFrom(const DbConf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DbConf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DbConf::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(datamodule_)) return false;
  return true;
}

void DbConf::InternalSwap(DbConf* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datamodule_.InternalSwap(&other->datamodule_);
  tablename_.Swap(&other->tablename_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(operation_, other->operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DbConf::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DataModule::InitAsDefaultInstance() {
}
class DataModule::_Internal {
 public:
  using HasBits = decltype(std::declval<DataModule>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_datatype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

DataModule::DataModule(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DataModule)
}
DataModule::DataModule(const DataModule& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_key()) {
    key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_key(),
      GetArena());
  }
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  datatype_ = from.datatype_;
  // @@protoc_insertion_point(copy_constructor:fccboscom.DataModule)
}

void DataModule::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DataModule_fccboscom_2eproto.base);
  key_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  datatype_ = 0u;
}

DataModule::~DataModule() {
  // @@protoc_insertion_point(destructor:fccboscom.DataModule)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DataModule::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  key_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DataModule::ArenaDtor(void* object) {
  DataModule* _this = reinterpret_cast< DataModule* >(object);
  (void)_this;
}
void DataModule::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DataModule::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DataModule& DataModule::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DataModule_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DataModule::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DataModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      key_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      value_.ClearNonDefaultToEmpty();
    }
  }
  datatype_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DataModule::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_key();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DataModule.key");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DataModule.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dataType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_datatype(&has_bits);
          datatype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DataModule::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DataModule)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string key = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_key().data(), static_cast<int>(this->_internal_key().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DataModule.key");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_key(), target);
  }

  // required string value = 2;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DataModule.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  // required uint32 dataType = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_datatype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DataModule)
  return target;
}

size_t DataModule::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DataModule)
  size_t total_size = 0;

  if (_internal_has_key()) {
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());
  }

  if (_internal_has_value()) {
    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (_internal_has_datatype()) {
    // required uint32 dataType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datatype());
  }

  return total_size;
}
size_t DataModule::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DataModule)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string key = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_key());

    // required string value = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());

    // required uint32 dataType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_datatype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DataModule::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DataModule)
  GOOGLE_DCHECK_NE(&from, this);
  const DataModule* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DataModule>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DataModule)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DataModule)
    MergeFrom(*source);
  }
}

void DataModule::MergeFrom(const DataModule& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DataModule)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_key(from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000004u) {
      datatype_ = from.datatype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DataModule::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DataModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DataModule::CopyFrom(const DataModule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DataModule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DataModule::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DataModule::InternalSwap(DataModule* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  key_.Swap(&other->key_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(datatype_, other->datatype_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DataModule::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TankStatus::InitAsDefaultInstance() {
}
class TankStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<TankStatus>()._has_bits_);
  static void set_has_tankid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tankstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_productlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_productvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_waterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_tcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_ullage(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_density(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_tcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_lockval(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000003ff) ^ 0x000003ff) != 0;
  }
};

TankStatus::TankStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.TankStatus)
}
TankStatus::TankStatus(const TankStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tankid_, &from.tankid_,
    static_cast<size_t>(reinterpret_cast<char*>(&lockval_) -
    reinterpret_cast<char*>(&tankid_)) + sizeof(lockval_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.TankStatus)
}

void TankStatus::SharedCtor() {
  ::memset(&tankid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&lockval_) -
      reinterpret_cast<char*>(&tankid_)) + sizeof(lockval_));
}

TankStatus::~TankStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.TankStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TankStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TankStatus::ArenaDtor(void* object) {
  TankStatus* _this = reinterpret_cast< TankStatus* >(object);
  (void)_this;
}
void TankStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TankStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TankStatus& TankStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TankStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void TankStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.TankStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&tankid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&temperature_) -
        reinterpret_cast<char*>(&tankid_)) + sizeof(temperature_));
  }
  if (cached_has_bits & 0x00001f00u) {
    ::memset(&tcvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&lockval_) -
        reinterpret_cast<char*>(&tcvolume_)) + sizeof(lockval_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TankStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tankId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tankid(&has_bits);
          tankid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankStatus = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_tankstatus(&has_bits);
          tankstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float productLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_productlevel(&has_bits);
          productlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float productVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_productvolume(&has_bits);
          productvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float waterLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_waterlevel(&has_bits);
          waterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float waterVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_watervolume(&has_bits);
          watervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float temperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double tcVolume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_tcvolume(&has_bits);
          tcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required float ullage = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_ullage(&has_bits);
          ullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float density = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_density(&has_bits);
          density_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float tcDensity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_tcdensity(&has_bits);
          tcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 lockVal = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_lockval(&has_bits);
          lockval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TankStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.TankStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tankId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tankid(), target);
  }

  // required uint32 tankUid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tankuid(), target);
  }

  // required uint32 tankStatus = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_tankstatus(), target);
  }

  // required float productLevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_productlevel(), target);
  }

  // required float productVolume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_productvolume(), target);
  }

  // required float waterLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_waterlevel(), target);
  }

  // required float waterVolume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_watervolume(), target);
  }

  // required float temperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_temperature(), target);
  }

  // required double tcVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_tcvolume(), target);
  }

  // required float ullage = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_ullage(), target);
  }

  // optional float density = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_density(), target);
  }

  // optional float tcDensity = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_tcdensity(), target);
  }

  // optional uint32 lockVal = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_lockval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.TankStatus)
  return target;
}

size_t TankStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.TankStatus)
  size_t total_size = 0;

  if (_internal_has_tankid()) {
    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_tankstatus()) {
    // required uint32 tankStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankstatus());
  }

  if (_internal_has_productlevel()) {
    // required float productLevel = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_productvolume()) {
    // required float productVolume = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_waterlevel()) {
    // required float waterLevel = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_watervolume()) {
    // required float waterVolume = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_temperature()) {
    // required float temperature = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_tcvolume()) {
    // required double tcVolume = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_ullage()) {
    // required float ullage = 10;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t TankStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.TankStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000003ff) ^ 0x000003ff) == 0) {  // All required fields are present.
    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());

    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required uint32 tankStatus = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankstatus());

    // required float productLevel = 4;
    total_size += 1 + 4;

    // required float productVolume = 5;
    total_size += 1 + 4;

    // required float waterLevel = 6;
    total_size += 1 + 4;

    // required float waterVolume = 7;
    total_size += 1 + 4;

    // required float temperature = 8;
    total_size += 1 + 4;

    // required double tcVolume = 9;
    total_size += 1 + 8;

    // required float ullage = 10;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001c00u) {
    // optional float density = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float tcDensity = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional uint32 lockVal = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lockval());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TankStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.TankStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const TankStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TankStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.TankStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.TankStatus)
    MergeFrom(*source);
  }
}

void TankStatus::MergeFrom(const TankStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.TankStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      tankid_ = from.tankid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tankstatus_ = from.tankstatus_;
    }
    if (cached_has_bits & 0x00000008u) {
      productlevel_ = from.productlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      productvolume_ = from.productvolume_;
    }
    if (cached_has_bits & 0x00000020u) {
      waterlevel_ = from.waterlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      watervolume_ = from.watervolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      temperature_ = from.temperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      tcvolume_ = from.tcvolume_;
    }
    if (cached_has_bits & 0x00000200u) {
      ullage_ = from.ullage_;
    }
    if (cached_has_bits & 0x00000400u) {
      density_ = from.density_;
    }
    if (cached_has_bits & 0x00000800u) {
      tcdensity_ = from.tcdensity_;
    }
    if (cached_has_bits & 0x00001000u) {
      lockval_ = from.lockval_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TankStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.TankStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TankStatus::CopyFrom(const TankStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.TankStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TankStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TankStatus::InternalSwap(TankStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TankStatus, lockval_)
      + sizeof(TankStatus::lockval_)
      - PROTOBUF_FIELD_OFFSET(TankStatus, tankid_)>(
          reinterpret_cast<char*>(&tankid_),
          reinterpret_cast<char*>(&other->tankid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TankStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PumpStatus::InitAsDefaultInstance() {
}
class PumpStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PumpStatus>()._has_bits_);
  static void set_has_pumpid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_pumpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_trxnvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trxnamount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_lockval(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_npndstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_motortimeout(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_pumptype(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007f) ^ 0x0000007f) != 0;
  }
};

PumpStatus::PumpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.PumpStatus)
}
PumpStatus::PumpStatus(const PumpStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&pumpid_, &from.pumpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pumptype_) -
    reinterpret_cast<char*>(&pumpid_)) + sizeof(pumptype_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.PumpStatus)
}

void PumpStatus::SharedCtor() {
  ::memset(&pumpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pumptype_) -
      reinterpret_cast<char*>(&pumpid_)) + sizeof(pumptype_));
}

PumpStatus::~PumpStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.PumpStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PumpStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void PumpStatus::ArenaDtor(void* object) {
  PumpStatus* _this = reinterpret_cast< PumpStatus* >(object);
  (void)_this;
}
void PumpStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PumpStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PumpStatus& PumpStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PumpStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void PumpStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.PumpStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&pumpid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&npndstatus_) -
        reinterpret_cast<char*>(&pumpid_)) + sizeof(npndstatus_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&motortimeout_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pumptype_) -
        reinterpret_cast<char*>(&motortimeout_)) + sizeof(pumptype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PumpStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 pumpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pumpid(&has_bits);
          pumpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pumpUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pumpuid(&has_bits);
          pumpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float trxnVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_trxnvolume(&has_bits);
          trxnvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float trxnAmount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_trxnamount(&has_bits);
          trxnamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 lockVal = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_lockval(&has_bits);
          lockval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 npndStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 64)) {
          _Internal::set_has_npndstatus(&has_bits);
          npndstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 motorTimeout = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_motortimeout(&has_bits);
          motortimeout_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pumpType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_pumptype(&has_bits);
          pumptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PumpStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.PumpStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pumpId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pumpid(), target);
  }

  // required uint32 pumpUid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pumpuid(), target);
  }

  // required uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // required uint32 nozzleId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nozzleid(), target);
  }

  // required float trxnVolume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_trxnvolume(), target);
  }

  // required float trxnAmount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_trxnamount(), target);
  }

  // required uint32 lockVal = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_lockval(), target);
  }

  // optional uint32 npndStatus = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(8, this->_internal_npndstatus(), target);
  }

  // optional uint32 motorTimeout = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_motortimeout(), target);
  }

  // optional uint32 pumpType = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_pumptype(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.PumpStatus)
  return target;
}

size_t PumpStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.PumpStatus)
  size_t total_size = 0;

  if (_internal_has_pumpid()) {
    // required uint32 pumpId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpid());
  }

  if (_internal_has_pumpuid()) {
    // required uint32 pumpUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (_internal_has_nozzleid()) {
    // required uint32 nozzleId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());
  }

  if (_internal_has_trxnvolume()) {
    // required float trxnVolume = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_trxnamount()) {
    // required float trxnAmount = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_lockval()) {
    // required uint32 lockVal = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lockval());
  }

  return total_size;
}
size_t PumpStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.PumpStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007f) ^ 0x0000007f) == 0) {  // All required fields are present.
    // required uint32 pumpId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpid());

    // required uint32 pumpUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());

    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

    // required uint32 nozzleId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());

    // required float trxnVolume = 5;
    total_size += 1 + 4;

    // required float trxnAmount = 6;
    total_size += 1 + 4;

    // required uint32 lockVal = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_lockval());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 npndStatus = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000080u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_npndstatus());
  }

  if (cached_has_bits & 0x00000300u) {
    // optional uint32 motorTimeout = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_motortimeout());
    }

    // optional uint32 pumpType = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pumptype());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PumpStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.PumpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PumpStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PumpStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.PumpStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.PumpStatus)
    MergeFrom(*source);
  }
}

void PumpStatus::MergeFrom(const PumpStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.PumpStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      pumpid_ = from.pumpid_;
    }
    if (cached_has_bits & 0x00000002u) {
      pumpuid_ = from.pumpuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      nozzleid_ = from.nozzleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      trxnvolume_ = from.trxnvolume_;
    }
    if (cached_has_bits & 0x00000020u) {
      trxnamount_ = from.trxnamount_;
    }
    if (cached_has_bits & 0x00000040u) {
      lockval_ = from.lockval_;
    }
    if (cached_has_bits & 0x00000080u) {
      npndstatus_ = from.npndstatus_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      motortimeout_ = from.motortimeout_;
    }
    if (cached_has_bits & 0x00000200u) {
      pumptype_ = from.pumptype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PumpStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.PumpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PumpStatus::CopyFrom(const PumpStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.PumpStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PumpStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PumpStatus::InternalSwap(PumpStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PumpStatus, pumptype_)
      + sizeof(PumpStatus::pumptype_)
      - PROTOBUF_FIELD_OFFSET(PumpStatus, pumpid_)>(
          reinterpret_cast<char*>(&pumpid_),
          reinterpret_cast<char*>(&other->pumpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PumpStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void UpsStatus::InitAsDefaultInstance() {
}
class UpsStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<UpsStatus>()._has_bits_);
  static void set_has_upsid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_upsuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_inputvtg(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_outputvtg(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_batteryvtg(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_inputfreq(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_upsstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_loadpercent(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_batterypercent(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_inventoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_inventorytime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000001fd) ^ 0x000001fd) != 0;
  }
};

UpsStatus::UpsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.UpsStatus)
}
UpsStatus::UpsStatus(const UpsStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  upsstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_upsstatus()) {
    upsstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_upsstatus(),
      GetArena());
  }
  inventorytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inventorytime()) {
    inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inventorytime(),
      GetArena());
  }
  ::memcpy(&upsid_, &from.upsid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inventoryid_) -
    reinterpret_cast<char*>(&upsid_)) + sizeof(inventoryid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.UpsStatus)
}

void UpsStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_UpsStatus_fccboscom_2eproto.base);
  upsstatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inventorytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&upsid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inventoryid_) -
      reinterpret_cast<char*>(&upsid_)) + sizeof(inventoryid_));
}

UpsStatus::~UpsStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.UpsStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void UpsStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  upsstatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  inventorytime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void UpsStatus::ArenaDtor(void* object) {
  UpsStatus* _this = reinterpret_cast< UpsStatus* >(object);
  (void)_this;
}
void UpsStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void UpsStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const UpsStatus& UpsStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_UpsStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void UpsStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.UpsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      upsstatus_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      inventorytime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&upsid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inputfreq_) -
        reinterpret_cast<char*>(&upsid_)) + sizeof(inputfreq_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&temperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inventoryid_) -
        reinterpret_cast<char*>(&temperature_)) + sizeof(inventoryid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* UpsStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 upsId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_upsid(&has_bits);
          upsid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 upsUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_upsuid(&has_bits);
          upsuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float inputVtg = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_inputvtg(&has_bits);
          inputvtg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float outputVtg = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_outputvtg(&has_bits);
          outputvtg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float batteryVtg = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_batteryvtg(&has_bits);
          batteryvtg_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float inputFreq = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_inputfreq(&has_bits);
          inputfreq_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float temperature = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string upsStatus = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_upsstatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.UpsStatus.upsStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float loadPercent = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_loadpercent(&has_bits);
          loadpercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float batteryPercent = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_batterypercent(&has_bits);
          batterypercent_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventoryId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_inventoryid(&has_bits);
          inventoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string inventoryTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_inventorytime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.UpsStatus.inventoryTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* UpsStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.UpsStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 upsId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_upsid(), target);
  }

  // required uint32 upsUid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_upsuid(), target);
  }

  // required float inputVtg = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_inputvtg(), target);
  }

  // required float outputVtg = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_outputvtg(), target);
  }

  // required float batteryVtg = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_batteryvtg(), target);
  }

  // required float inputFreq = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_inputfreq(), target);
  }

  // required float temperature = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_temperature(), target);
  }

  // required string upsStatus = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_upsstatus().data(), static_cast<int>(this->_internal_upsstatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.UpsStatus.upsStatus");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_upsstatus(), target);
  }

  // optional float loadPercent = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_loadpercent(), target);
  }

  // optional float batteryPercent = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_batterypercent(), target);
  }

  // optional uint32 inventoryId = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_inventoryid(), target);
  }

  // optional string inventoryTime = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inventorytime().data(), static_cast<int>(this->_internal_inventorytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.UpsStatus.inventoryTime");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_inventorytime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.UpsStatus)
  return target;
}

size_t UpsStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.UpsStatus)
  size_t total_size = 0;

  if (_internal_has_upsstatus()) {
    // required string upsStatus = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsstatus());
  }

  if (_internal_has_upsid()) {
    // required uint32 upsId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upsid());
  }

  if (_internal_has_upsuid()) {
    // required uint32 upsUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upsuid());
  }

  if (_internal_has_inputvtg()) {
    // required float inputVtg = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_outputvtg()) {
    // required float outputVtg = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_batteryvtg()) {
    // required float batteryVtg = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_inputfreq()) {
    // required float inputFreq = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_temperature()) {
    // required float temperature = 7;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t UpsStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.UpsStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000001fd) ^ 0x000001fd) == 0) {  // All required fields are present.
    // required string upsStatus = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_upsstatus());

    // required uint32 upsId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upsid());

    // required uint32 upsUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_upsuid());

    // required float inputVtg = 3;
    total_size += 1 + 4;

    // required float outputVtg = 4;
    total_size += 1 + 4;

    // required float batteryVtg = 5;
    total_size += 1 + 4;

    // required float inputFreq = 6;
    total_size += 1 + 4;

    // required float temperature = 7;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string inventoryTime = 12;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000002u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inventorytime());
  }

  if (cached_has_bits & 0x00000e00u) {
    // optional float loadPercent = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

    // optional float batteryPercent = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional uint32 inventoryId = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventoryid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void UpsStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.UpsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const UpsStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<UpsStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.UpsStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.UpsStatus)
    MergeFrom(*source);
  }
}

void UpsStatus::MergeFrom(const UpsStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.UpsStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_upsstatus(from._internal_upsstatus());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_inventorytime(from._internal_inventorytime());
    }
    if (cached_has_bits & 0x00000004u) {
      upsid_ = from.upsid_;
    }
    if (cached_has_bits & 0x00000008u) {
      upsuid_ = from.upsuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      inputvtg_ = from.inputvtg_;
    }
    if (cached_has_bits & 0x00000020u) {
      outputvtg_ = from.outputvtg_;
    }
    if (cached_has_bits & 0x00000040u) {
      batteryvtg_ = from.batteryvtg_;
    }
    if (cached_has_bits & 0x00000080u) {
      inputfreq_ = from.inputfreq_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000200u) {
      loadpercent_ = from.loadpercent_;
    }
    if (cached_has_bits & 0x00000400u) {
      batterypercent_ = from.batterypercent_;
    }
    if (cached_has_bits & 0x00000800u) {
      inventoryid_ = from.inventoryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void UpsStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.UpsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpsStatus::CopyFrom(const UpsStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.UpsStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpsStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void UpsStatus::InternalSwap(UpsStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  upsstatus_.Swap(&other->upsstatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  inventorytime_.Swap(&other->inventorytime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(UpsStatus, inventoryid_)
      + sizeof(UpsStatus::inventoryid_)
      - PROTOBUF_FIELD_OFFSET(UpsStatus, upsid_)>(
          reinterpret_cast<char*>(&upsid_),
          reinterpret_cast<char*>(&other->upsid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata UpsStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PumpTrxn::InitAsDefaultInstance() {
}
class PumpTrxn::_Internal {
 public:
  using HasBits = decltype(std::declval<PumpTrxn>()._has_bits_);
  static void set_has_pumpid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_pumpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nozzleuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_trxnvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_trxnamount(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_unitrate(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_startvolumetotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_endvolumetotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_presettype(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_presetmode(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_presetvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_trxnid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_trxnstarttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_trxnendtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_gradeuid(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_pumpmode(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_shiftid(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_dealershiftid(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_moptype(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_lasttrxnendvoltotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_discountrate(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_totaldiscount(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_presetid(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x003fcfff) ^ 0x003fcfff) != 0;
  }
};

PumpTrxn::PumpTrxn(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.PumpTrxn)
}
PumpTrxn::PumpTrxn(const PumpTrxn& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  trxnstarttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trxnstarttime()) {
    trxnstarttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trxnstarttime(),
      GetArena());
  }
  trxnendtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_trxnendtime()) {
    trxnendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_trxnendtime(),
      GetArena());
  }
  ::memcpy(&pumpid_, &from.pumpid_,
    static_cast<size_t>(reinterpret_cast<char*>(&totaldiscount_) -
    reinterpret_cast<char*>(&pumpid_)) + sizeof(totaldiscount_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.PumpTrxn)
}

void PumpTrxn::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PumpTrxn_fccboscom_2eproto.base);
  trxnstarttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trxnendtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pumpid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&totaldiscount_) -
      reinterpret_cast<char*>(&pumpid_)) + sizeof(totaldiscount_));
}

PumpTrxn::~PumpTrxn() {
  // @@protoc_insertion_point(destructor:fccboscom.PumpTrxn)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PumpTrxn::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  trxnstarttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  trxnendtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PumpTrxn::ArenaDtor(void* object) {
  PumpTrxn* _this = reinterpret_cast< PumpTrxn* >(object);
  (void)_this;
}
void PumpTrxn::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PumpTrxn::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PumpTrxn& PumpTrxn::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PumpTrxn_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void PumpTrxn::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.PumpTrxn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      trxnstarttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      trxnendtime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&pumpid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trxnamount_) -
        reinterpret_cast<char*>(&pumpid_)) + sizeof(trxnamount_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&startvolumetotalizer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&dayid_) -
        reinterpret_cast<char*>(&startvolumetotalizer_)) + sizeof(dayid_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&gradeuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&presetid_) -
        reinterpret_cast<char*>(&gradeuid_)) + sizeof(presetid_));
  }
  totaldiscount_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PumpTrxn::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 pumpId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pumpid(&has_bits);
          pumpid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pumpUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pumpuid(&has_bits);
          pumpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_nozzleuid(&has_bits);
          nozzleuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float trxnVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_trxnvolume(&has_bits);
          trxnvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float trxnAmount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_trxnamount(&has_bits);
          trxnamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float unitRate = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_unitrate(&has_bits);
          unitrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required double startVolumeTotalizer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_startvolumetotalizer(&has_bits);
          startvolumetotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required double endVolumeTotalizer = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_endvolumetotalizer(&has_bits);
          endvolumetotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 presetType = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_presettype(&has_bits);
          presettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 presetMode = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 88)) {
          _Internal::set_has_presetmode(&has_bits);
          presetmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float presetValue = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_presetvalue(&has_bits);
          presetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 trxnId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_trxnid(&has_bits);
          trxnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string trxnStartTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_trxnstarttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.PumpTrxn.trxnStartTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string trxnEndTime = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_trxnendtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.PumpTrxn.trxnEndTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dayId = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 128)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gradeUid = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 136)) {
          _Internal::set_has_gradeuid(&has_bits);
          gradeuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 pumpMode = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 144)) {
          _Internal::set_has_pumpmode(&has_bits);
          pumpmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 shiftId = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 152)) {
          _Internal::set_has_shiftid(&has_bits);
          shiftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dealerShiftId = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 160)) {
          _Internal::set_has_dealershiftid(&has_bits);
          dealershiftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mopType = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_moptype(&has_bits);
          moptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double lastTrxnEndVolTotalizer = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 177)) {
          _Internal::set_has_lasttrxnendvoltotalizer(&has_bits);
          lasttrxnendvoltotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional float discountRate = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_discountrate(&has_bits);
          discountrate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float totalDiscount = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 197)) {
          _Internal::set_has_totaldiscount(&has_bits);
          totaldiscount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double presetId = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 201)) {
          _Internal::set_has_presetid(&has_bits);
          presetid_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PumpTrxn::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.PumpTrxn)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pumpId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pumpid(), target);
  }

  // required uint32 pumpUid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_pumpuid(), target);
  }

  // required uint32 nozzleId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nozzleid(), target);
  }

  // required uint32 nozzleUid = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_nozzleuid(), target);
  }

  // required float trxnVolume = 5;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_trxnvolume(), target);
  }

  // required float trxnAmount = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_trxnamount(), target);
  }

  // required float unitRate = 7;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_unitrate(), target);
  }

  // required double startVolumeTotalizer = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_startvolumetotalizer(), target);
  }

  // required double endVolumeTotalizer = 9;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_endvolumetotalizer(), target);
  }

  // required uint32 presetType = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_presettype(), target);
  }

  // optional uint32 presetMode = 11;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(11, this->_internal_presetmode(), target);
  }

  // optional float presetValue = 12;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_presetvalue(), target);
  }

  // required uint32 trxnId = 13;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_trxnid(), target);
  }

  // required string trxnStartTime = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trxnstarttime().data(), static_cast<int>(this->_internal_trxnstarttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.PumpTrxn.trxnStartTime");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_trxnstarttime(), target);
  }

  // required string trxnEndTime = 15;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_trxnendtime().data(), static_cast<int>(this->_internal_trxnendtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.PumpTrxn.trxnEndTime");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_trxnendtime(), target);
  }

  // required uint32 dayId = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(16, this->_internal_dayid(), target);
  }

  // required uint32 gradeUid = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(17, this->_internal_gradeuid(), target);
  }

  // required uint32 pumpMode = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(18, this->_internal_pumpmode(), target);
  }

  // required uint32 shiftId = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(19, this->_internal_shiftid(), target);
  }

  // required uint32 dealerShiftId = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(20, this->_internal_dealershiftid(), target);
  }

  // required uint32 mopType = 21;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_moptype(), target);
  }

  // required double lastTrxnEndVolTotalizer = 22;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(22, this->_internal_lasttrxnendvoltotalizer(), target);
  }

  // optional float discountRate = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_discountrate(), target);
  }

  // optional float totalDiscount = 24;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(24, this->_internal_totaldiscount(), target);
  }

  // optional double presetId = 25;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(25, this->_internal_presetid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.PumpTrxn)
  return target;
}

size_t PumpTrxn::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.PumpTrxn)
  size_t total_size = 0;

  if (_internal_has_trxnstarttime()) {
    // required string trxnStartTime = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trxnstarttime());
  }

  if (_internal_has_trxnendtime()) {
    // required string trxnEndTime = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trxnendtime());
  }

  if (_internal_has_pumpid()) {
    // required uint32 pumpId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpid());
  }

  if (_internal_has_pumpuid()) {
    // required uint32 pumpUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());
  }

  if (_internal_has_nozzleid()) {
    // required uint32 nozzleId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());
  }

  if (_internal_has_nozzleuid()) {
    // required uint32 nozzleUid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());
  }

  if (_internal_has_trxnvolume()) {
    // required float trxnVolume = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_trxnamount()) {
    // required float trxnAmount = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_startvolumetotalizer()) {
    // required double startVolumeTotalizer = 8;
    total_size += 1 + 8;
  }

  if (_internal_has_unitrate()) {
    // required float unitRate = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_presettype()) {
    // required uint32 presetType = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_presettype());
  }

  if (_internal_has_endvolumetotalizer()) {
    // required double endVolumeTotalizer = 9;
    total_size += 1 + 8;
  }

  if (_internal_has_trxnid()) {
    // required uint32 trxnId = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trxnid());
  }

  if (_internal_has_dayid()) {
    // required uint32 dayId = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_gradeuid()) {
    // required uint32 gradeUid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gradeuid());
  }

  if (_internal_has_pumpmode()) {
    // required uint32 pumpMode = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpmode());
  }

  if (_internal_has_shiftid()) {
    // required uint32 shiftId = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());
  }

  if (_internal_has_dealershiftid()) {
    // required uint32 dealerShiftId = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dealershiftid());
  }

  if (_internal_has_lasttrxnendvoltotalizer()) {
    // required double lastTrxnEndVolTotalizer = 22;
    total_size += 2 + 8;
  }

  if (_internal_has_moptype()) {
    // required uint32 mopType = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moptype());
  }

  return total_size;
}
size_t PumpTrxn::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.PumpTrxn)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x003fcfff) ^ 0x003fcfff) == 0) {  // All required fields are present.
    // required string trxnStartTime = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trxnstarttime());

    // required string trxnEndTime = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_trxnendtime());

    // required uint32 pumpId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpid());

    // required uint32 pumpUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());

    // required uint32 nozzleId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());

    // required uint32 nozzleUid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());

    // required float trxnVolume = 5;
    total_size += 1 + 4;

    // required float trxnAmount = 6;
    total_size += 1 + 4;

    // required double startVolumeTotalizer = 8;
    total_size += 1 + 8;

    // required float unitRate = 7;
    total_size += 1 + 4;

    // required uint32 presetType = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_presettype());

    // required double endVolumeTotalizer = 9;
    total_size += 1 + 8;

    // required uint32 trxnId = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trxnid());

    // required uint32 dayId = 16;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 gradeUid = 17;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gradeuid());

    // required uint32 pumpMode = 18;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpmode());

    // required uint32 shiftId = 19;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());

    // required uint32 dealerShiftId = 20;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dealershiftid());

    // required double lastTrxnEndVolTotalizer = 22;
    total_size += 2 + 8;

    // required uint32 mopType = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moptype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00003000u) {
    // optional uint32 presetMode = 11;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_presetmode());
    }

    // optional float presetValue = 12;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x00c00000u) {
    // optional float discountRate = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 4;
    }

    // optional double presetId = 25;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 8;
    }

  }
  // optional float totalDiscount = 24;
  if (cached_has_bits & 0x01000000u) {
    total_size += 2 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PumpTrxn::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.PumpTrxn)
  GOOGLE_DCHECK_NE(&from, this);
  const PumpTrxn* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PumpTrxn>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.PumpTrxn)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.PumpTrxn)
    MergeFrom(*source);
  }
}

void PumpTrxn::MergeFrom(const PumpTrxn& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.PumpTrxn)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_trxnstarttime(from._internal_trxnstarttime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_trxnendtime(from._internal_trxnendtime());
    }
    if (cached_has_bits & 0x00000004u) {
      pumpid_ = from.pumpid_;
    }
    if (cached_has_bits & 0x00000008u) {
      pumpuid_ = from.pumpuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      nozzleid_ = from.nozzleid_;
    }
    if (cached_has_bits & 0x00000020u) {
      nozzleuid_ = from.nozzleuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      trxnvolume_ = from.trxnvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      trxnamount_ = from.trxnamount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      startvolumetotalizer_ = from.startvolumetotalizer_;
    }
    if (cached_has_bits & 0x00000200u) {
      unitrate_ = from.unitrate_;
    }
    if (cached_has_bits & 0x00000400u) {
      presettype_ = from.presettype_;
    }
    if (cached_has_bits & 0x00000800u) {
      endvolumetotalizer_ = from.endvolumetotalizer_;
    }
    if (cached_has_bits & 0x00001000u) {
      presetmode_ = from.presetmode_;
    }
    if (cached_has_bits & 0x00002000u) {
      presetvalue_ = from.presetvalue_;
    }
    if (cached_has_bits & 0x00004000u) {
      trxnid_ = from.trxnid_;
    }
    if (cached_has_bits & 0x00008000u) {
      dayid_ = from.dayid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      gradeuid_ = from.gradeuid_;
    }
    if (cached_has_bits & 0x00020000u) {
      pumpmode_ = from.pumpmode_;
    }
    if (cached_has_bits & 0x00040000u) {
      shiftid_ = from.shiftid_;
    }
    if (cached_has_bits & 0x00080000u) {
      dealershiftid_ = from.dealershiftid_;
    }
    if (cached_has_bits & 0x00100000u) {
      lasttrxnendvoltotalizer_ = from.lasttrxnendvoltotalizer_;
    }
    if (cached_has_bits & 0x00200000u) {
      moptype_ = from.moptype_;
    }
    if (cached_has_bits & 0x00400000u) {
      discountrate_ = from.discountrate_;
    }
    if (cached_has_bits & 0x00800000u) {
      presetid_ = from.presetid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_totaldiscount(from._internal_totaldiscount());
  }
}

void PumpTrxn::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.PumpTrxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PumpTrxn::CopyFrom(const PumpTrxn& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.PumpTrxn)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PumpTrxn::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PumpTrxn::InternalSwap(PumpTrxn* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  trxnstarttime_.Swap(&other->trxnstarttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  trxnendtime_.Swap(&other->trxnendtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PumpTrxn, totaldiscount_)
      + sizeof(PumpTrxn::totaldiscount_)
      - PROTOBUF_FIELD_OFFSET(PumpTrxn, pumpid_)>(
          reinterpret_cast<char*>(&pumpid_),
          reinterpret_cast<char*>(&other->pumpid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PumpTrxn::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TankInventory::InitAsDefaultInstance() {
}
class TankInventory::_Internal {
 public:
  using HasBits = decltype(std::declval<TankInventory>()._has_bits_);
  static void set_has_tankid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_productlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_waterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_productvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_watervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_tcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_ullage(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_temperature(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_tankstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_productdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_producttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_inventoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_inventorytime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_inventorymode(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000067ff) ^ 0x000067ff) != 0;
  }
};

TankInventory::TankInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.TankInventory)
}
TankInventory::TankInventory(const TankInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  inventorytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_inventorytime()) {
    inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_inventorytime(),
      GetArena());
  }
  ::memcpy(&tankid_, &from.tankid_,
    static_cast<size_t>(reinterpret_cast<char*>(&inventorymode_) -
    reinterpret_cast<char*>(&tankid_)) + sizeof(inventorymode_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.TankInventory)
}

void TankInventory::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TankInventory_fccboscom_2eproto.base);
  inventorytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tankid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&inventorymode_) -
      reinterpret_cast<char*>(&tankid_)) + sizeof(inventorymode_));
}

TankInventory::~TankInventory() {
  // @@protoc_insertion_point(destructor:fccboscom.TankInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TankInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  inventorytime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TankInventory::ArenaDtor(void* object) {
  TankInventory* _this = reinterpret_cast< TankInventory* >(object);
  (void)_this;
}
void TankInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TankInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TankInventory& TankInventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TankInventory_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void TankInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.TankInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    inventorytime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&tankid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&tcvolume_) -
        reinterpret_cast<char*>(&tankid_)) + sizeof(tcvolume_));
  }
  if (cached_has_bits & 0x00007f00u) {
    ::memset(&ullage_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&inventorymode_) -
        reinterpret_cast<char*>(&ullage_)) + sizeof(inventorymode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TankInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tankId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tankid(&has_bits);
          tankid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float productLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_productlevel(&has_bits);
          productlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float waterLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_waterlevel(&has_bits);
          waterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float productVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_productvolume(&has_bits);
          productvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float waterVolume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_watervolume(&has_bits);
          watervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float tcVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_tcvolume(&has_bits);
          tcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float ullage = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_ullage(&has_bits);
          ullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float temperature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_temperature(&has_bits);
          temperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 tankStatus = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_tankstatus(&has_bits);
          tankstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float productDensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_productdensity(&has_bits);
          productdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float productTcDensity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_producttcdensity(&has_bits);
          producttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 inventoryId = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 104)) {
          _Internal::set_has_inventoryid(&has_bits);
          inventoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string inventoryTime = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_inventorytime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.TankInventory.inventoryTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 inventoryMode = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 120)) {
          _Internal::set_has_inventorymode(&has_bits);
          inventorymode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TankInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.TankInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tankId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tankid(), target);
  }

  // required uint32 tankUid = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tankuid(), target);
  }

  // required float productLevel = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_productlevel(), target);
  }

  // required float waterLevel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_waterlevel(), target);
  }

  // required float productVolume = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_productvolume(), target);
  }

  // required float waterVolume = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_watervolume(), target);
  }

  // required float tcVolume = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_tcvolume(), target);
  }

  // required float ullage = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_ullage(), target);
  }

  // required float temperature = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_temperature(), target);
  }

  // required uint32 tankStatus = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_tankstatus(), target);
  }

  // optional float productDensity = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_productdensity(), target);
  }

  // optional float productTcDensity = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_producttcdensity(), target);
  }

  // required uint32 inventoryId = 13;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(13, this->_internal_inventoryid(), target);
  }

  // required string inventoryTime = 14;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_inventorytime().data(), static_cast<int>(this->_internal_inventorytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.TankInventory.inventoryTime");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_inventorytime(), target);
  }

  // required uint32 inventoryMode = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(15, this->_internal_inventorymode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.TankInventory)
  return target;
}

size_t TankInventory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.TankInventory)
  size_t total_size = 0;

  if (_internal_has_inventorytime()) {
    // required string inventoryTime = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inventorytime());
  }

  if (_internal_has_tankid()) {
    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_productlevel()) {
    // required float productLevel = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_waterlevel()) {
    // required float waterLevel = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_productvolume()) {
    // required float productVolume = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_watervolume()) {
    // required float waterVolume = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_tcvolume()) {
    // required float tcVolume = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_ullage()) {
    // required float ullage = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_temperature()) {
    // required float temperature = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_tankstatus()) {
    // required uint32 tankStatus = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankstatus());
  }

  if (_internal_has_inventoryid()) {
    // required uint32 inventoryId = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inventoryid());
  }

  if (_internal_has_inventorymode()) {
    // required uint32 inventoryMode = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inventorymode());
  }

  return total_size;
}
size_t TankInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.TankInventory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000067ff) ^ 0x000067ff) == 0) {  // All required fields are present.
    // required string inventoryTime = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_inventorytime());

    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());

    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required float productLevel = 3;
    total_size += 1 + 4;

    // required float waterLevel = 4;
    total_size += 1 + 4;

    // required float productVolume = 5;
    total_size += 1 + 4;

    // required float waterVolume = 6;
    total_size += 1 + 4;

    // required float tcVolume = 7;
    total_size += 1 + 4;

    // required float ullage = 8;
    total_size += 1 + 4;

    // required float temperature = 9;
    total_size += 1 + 4;

    // required uint32 tankStatus = 10;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankstatus());

    // required uint32 inventoryId = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inventoryid());

    // required uint32 inventoryMode = 15;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_inventorymode());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00001800u) {
    // optional float productDensity = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float productTcDensity = 12;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TankInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.TankInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const TankInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TankInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.TankInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.TankInventory)
    MergeFrom(*source);
  }
}

void TankInventory::MergeFrom(const TankInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.TankInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_inventorytime(from._internal_inventorytime());
    }
    if (cached_has_bits & 0x00000002u) {
      tankid_ = from.tankid_;
    }
    if (cached_has_bits & 0x00000004u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000008u) {
      productlevel_ = from.productlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      waterlevel_ = from.waterlevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      productvolume_ = from.productvolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      watervolume_ = from.watervolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      tcvolume_ = from.tcvolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ullage_ = from.ullage_;
    }
    if (cached_has_bits & 0x00000200u) {
      temperature_ = from.temperature_;
    }
    if (cached_has_bits & 0x00000400u) {
      tankstatus_ = from.tankstatus_;
    }
    if (cached_has_bits & 0x00000800u) {
      productdensity_ = from.productdensity_;
    }
    if (cached_has_bits & 0x00001000u) {
      producttcdensity_ = from.producttcdensity_;
    }
    if (cached_has_bits & 0x00002000u) {
      inventoryid_ = from.inventoryid_;
    }
    if (cached_has_bits & 0x00004000u) {
      inventorymode_ = from.inventorymode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TankInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.TankInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TankInventory::CopyFrom(const TankInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.TankInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TankInventory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TankInventory::InternalSwap(TankInventory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  inventorytime_.Swap(&other->inventorytime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TankInventory, inventorymode_)
      + sizeof(TankInventory::inventorymode_)
      - PROTOBUF_FIELD_OFFSET(TankInventory, tankid_)>(
          reinterpret_cast<char*>(&tankid_),
          reinterpret_cast<char*>(&other->tankid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TankInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TankDelivery::InitAsDefaultInstance() {
}
class TankDelivery::_Internal {
 public:
  using HasBits = decltype(std::declval<TankDelivery>()._has_bits_);
  static void set_has_tankid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_starttime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_startproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_startproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_startwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_starttemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_startproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_startproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_endtime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_endproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_endwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_endproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_endwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_endproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_endtemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_endproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_endproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_deliveryid(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_atgid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_atguid(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0073f3ff) ^ 0x0073f3ff) != 0;
  }
};

TankDelivery::TankDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.TankDelivery)
}
TankDelivery::TankDelivery(const TankDelivery& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_starttime()) {
    starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_starttime(),
      GetArena());
  }
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_endtime()) {
    endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_endtime(),
      GetArena());
  }
  ::memcpy(&tankid_, &from.tankid_,
    static_cast<size_t>(reinterpret_cast<char*>(&atguid_) -
    reinterpret_cast<char*>(&tankid_)) + sizeof(atguid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.TankDelivery)
}

void TankDelivery::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TankDelivery_fccboscom_2eproto.base);
  starttime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tankid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&atguid_) -
      reinterpret_cast<char*>(&tankid_)) + sizeof(atguid_));
}

TankDelivery::~TankDelivery() {
  // @@protoc_insertion_point(destructor:fccboscom.TankDelivery)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TankDelivery::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  starttime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  endtime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TankDelivery::ArenaDtor(void* object) {
  TankDelivery* _this = reinterpret_cast< TankDelivery* >(object);
  (void)_this;
}
void TankDelivery::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TankDelivery::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TankDelivery& TankDelivery::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TankDelivery_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void TankDelivery::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.TankDelivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      starttime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      endtime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000fcu) {
    ::memset(&tankid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startwatervolume_) -
        reinterpret_cast<char*>(&tankid_)) + sizeof(startwatervolume_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&startproducttcvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endwatervolume_) -
        reinterpret_cast<char*>(&startproducttcvolume_)) + sizeof(endwatervolume_));
  }
  if (cached_has_bits & 0x007f0000u) {
    ::memset(&endproducttcvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&atguid_) -
        reinterpret_cast<char*>(&endproducttcvolume_)) + sizeof(atguid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TankDelivery::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tankId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tankid(&has_bits);
          tankid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string startTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_starttime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.TankDelivery.startTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float startProductLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_startproductlevel(&has_bits);
          startproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterLevel = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_startwaterlevel(&has_bits);
          startwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductVolume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_startproductvolume(&has_bits);
          startproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_startwatervolume(&has_bits);
          startwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductTcVolume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_startproducttcvolume(&has_bits);
          startproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startTemperature = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_starttemperature(&has_bits);
          starttemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductDensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_startproductdensity(&has_bits);
          startproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductTcDensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_startproducttcdensity(&has_bits);
          startproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string endTime = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_endtime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.TankDelivery.endTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float endProductLevel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_endproductlevel(&has_bits);
          endproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float endWaterLevel = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_endwaterlevel(&has_bits);
          endwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float endProductVolume = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_endproductvolume(&has_bits);
          endproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float endWaterVolume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_endwatervolume(&has_bits);
          endwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float endProductTcVolume = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_endproducttcvolume(&has_bits);
          endproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float endTemperature = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_endtemperature(&has_bits);
          endtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductDensity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_endproductdensity(&has_bits);
          endproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductTcDensity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_endproducttcdensity(&has_bits);
          endproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required uint32 deliveryId = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 168)) {
          _Internal::set_has_deliveryid(&has_bits);
          deliveryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 atgId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_atgid(&has_bits);
          atgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 atgUid = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_atguid(&has_bits);
          atguid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TankDelivery::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.TankDelivery)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tankId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tankid(), target);
  }

  // required uint32 tankUid = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tankuid(), target);
  }

  // required string startTime = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_starttime().data(), static_cast<int>(this->_internal_starttime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.TankDelivery.startTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_starttime(), target);
  }

  // required float startProductLevel = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_startproductlevel(), target);
  }

  // required float startWaterLevel = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_startwaterlevel(), target);
  }

  // required float startProductVolume = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_startproductvolume(), target);
  }

  // required float startWaterVolume = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_startwatervolume(), target);
  }

  // required float startProductTcVolume = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_startproducttcvolume(), target);
  }

  // required float startTemperature = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_starttemperature(), target);
  }

  // optional float startProductDensity = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_startproductdensity(), target);
  }

  // optional float startProductTcDensity = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_startproducttcdensity(), target);
  }

  // required string endTime = 12;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_endtime().data(), static_cast<int>(this->_internal_endtime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.TankDelivery.endTime");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_endtime(), target);
  }

  // required float endProductLevel = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_endproductlevel(), target);
  }

  // required float endWaterLevel = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_endwaterlevel(), target);
  }

  // required float endProductVolume = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_endproductvolume(), target);
  }

  // required float endWaterVolume = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_endwatervolume(), target);
  }

  // required float endProductTcVolume = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_endproducttcvolume(), target);
  }

  // required float endTemperature = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_endtemperature(), target);
  }

  // optional float endProductDensity = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_endproductdensity(), target);
  }

  // optional float endProductTcDensity = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_endproducttcdensity(), target);
  }

  // required uint32 deliveryId = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(21, this->_internal_deliveryid(), target);
  }

  // required uint32 atgId = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_atgid(), target);
  }

  // required uint32 atgUid = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_atguid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.TankDelivery)
  return target;
}

size_t TankDelivery::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.TankDelivery)
  size_t total_size = 0;

  if (_internal_has_starttime()) {
    // required string startTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starttime());
  }

  if (_internal_has_endtime()) {
    // required string endTime = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());
  }

  if (_internal_has_tankid()) {
    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_startproductlevel()) {
    // required float startProductLevel = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_startwaterlevel()) {
    // required float startWaterLevel = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_startproductvolume()) {
    // required float startProductVolume = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_startwatervolume()) {
    // required float startWaterVolume = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_startproducttcvolume()) {
    // required float startProductTcVolume = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_starttemperature()) {
    // required float startTemperature = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_endproductlevel()) {
    // required float endProductLevel = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_endwaterlevel()) {
    // required float endWaterLevel = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_endproductvolume()) {
    // required float endProductVolume = 15;
    total_size += 1 + 4;
  }

  if (_internal_has_endwatervolume()) {
    // required float endWaterVolume = 16;
    total_size += 2 + 4;
  }

  if (_internal_has_endproducttcvolume()) {
    // required float endProductTcVolume = 17;
    total_size += 2 + 4;
  }

  if (_internal_has_endtemperature()) {
    // required float endTemperature = 18;
    total_size += 2 + 4;
  }

  if (_internal_has_deliveryid()) {
    // required uint32 deliveryId = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deliveryid());
  }

  if (_internal_has_atgid()) {
    // required uint32 atgId = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atgid());
  }

  if (_internal_has_atguid()) {
    // required uint32 atgUid = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atguid());
  }

  return total_size;
}
size_t TankDelivery::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.TankDelivery)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0073f3ff) ^ 0x0073f3ff) == 0) {  // All required fields are present.
    // required string startTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_starttime());

    // required string endTime = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_endtime());

    // required uint32 tankId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankid());

    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required float startProductLevel = 4;
    total_size += 1 + 4;

    // required float startWaterLevel = 5;
    total_size += 1 + 4;

    // required float startProductVolume = 6;
    total_size += 1 + 4;

    // required float startWaterVolume = 7;
    total_size += 1 + 4;

    // required float startProductTcVolume = 8;
    total_size += 1 + 4;

    // required float startTemperature = 9;
    total_size += 1 + 4;

    // required float endProductLevel = 13;
    total_size += 1 + 4;

    // required float endWaterLevel = 14;
    total_size += 1 + 4;

    // required float endProductVolume = 15;
    total_size += 1 + 4;

    // required float endWaterVolume = 16;
    total_size += 2 + 4;

    // required float endProductTcVolume = 17;
    total_size += 2 + 4;

    // required float endTemperature = 18;
    total_size += 2 + 4;

    // required uint32 deliveryId = 21;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deliveryid());

    // required uint32 atgId = 22;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atgid());

    // required uint32 atgUid = 23;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_atguid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000c00u) {
    // optional float startProductDensity = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float startProductTcDensity = 11;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x000c0000u) {
    // optional float endProductDensity = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float endProductTcDensity = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TankDelivery::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.TankDelivery)
  GOOGLE_DCHECK_NE(&from, this);
  const TankDelivery* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TankDelivery>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.TankDelivery)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.TankDelivery)
    MergeFrom(*source);
  }
}

void TankDelivery::MergeFrom(const TankDelivery& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.TankDelivery)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_starttime(from._internal_starttime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_endtime(from._internal_endtime());
    }
    if (cached_has_bits & 0x00000004u) {
      tankid_ = from.tankid_;
    }
    if (cached_has_bits & 0x00000008u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000010u) {
      startproductlevel_ = from.startproductlevel_;
    }
    if (cached_has_bits & 0x00000020u) {
      startwaterlevel_ = from.startwaterlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      startproductvolume_ = from.startproductvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      startwatervolume_ = from.startwatervolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      startproducttcvolume_ = from.startproducttcvolume_;
    }
    if (cached_has_bits & 0x00000200u) {
      starttemperature_ = from.starttemperature_;
    }
    if (cached_has_bits & 0x00000400u) {
      startproductdensity_ = from.startproductdensity_;
    }
    if (cached_has_bits & 0x00000800u) {
      startproducttcdensity_ = from.startproducttcdensity_;
    }
    if (cached_has_bits & 0x00001000u) {
      endproductlevel_ = from.endproductlevel_;
    }
    if (cached_has_bits & 0x00002000u) {
      endwaterlevel_ = from.endwaterlevel_;
    }
    if (cached_has_bits & 0x00004000u) {
      endproductvolume_ = from.endproductvolume_;
    }
    if (cached_has_bits & 0x00008000u) {
      endwatervolume_ = from.endwatervolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x007f0000u) {
    if (cached_has_bits & 0x00010000u) {
      endproducttcvolume_ = from.endproducttcvolume_;
    }
    if (cached_has_bits & 0x00020000u) {
      endtemperature_ = from.endtemperature_;
    }
    if (cached_has_bits & 0x00040000u) {
      endproductdensity_ = from.endproductdensity_;
    }
    if (cached_has_bits & 0x00080000u) {
      endproducttcdensity_ = from.endproducttcdensity_;
    }
    if (cached_has_bits & 0x00100000u) {
      deliveryid_ = from.deliveryid_;
    }
    if (cached_has_bits & 0x00200000u) {
      atgid_ = from.atgid_;
    }
    if (cached_has_bits & 0x00400000u) {
      atguid_ = from.atguid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TankDelivery::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.TankDelivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TankDelivery::CopyFrom(const TankDelivery& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.TankDelivery)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TankDelivery::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TankDelivery::InternalSwap(TankDelivery* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  starttime_.Swap(&other->starttime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  endtime_.Swap(&other->endtime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TankDelivery, atguid_)
      + sizeof(TankDelivery::atguid_)
      - PROTOBUF_FIELD_OFFSET(TankDelivery, tankid_)>(
          reinterpret_cast<char*>(&tankid_),
          reinterpret_cast<char*>(&other->tankid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TankDelivery::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeliveryReceipt::InitAsDefaultInstance() {
}
class DeliveryReceipt::_Internal {
 public:
  using HasBits = decltype(std::declval<DeliveryReceipt>()._has_bits_);
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_productuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_supplypoint(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invoiceno(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_invoicedatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_invoicequantity(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_invoiceamount(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_truckno(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_compartmentno(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_observeddensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_invoicedensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_observedtemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_dataentrytime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_deliveryid(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00003fff) ^ 0x00003fff) != 0;
  }
};

DeliveryReceipt::DeliveryReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DeliveryReceipt)
}
DeliveryReceipt::DeliveryReceipt(const DeliveryReceipt& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  supplypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_supplypoint()) {
    supplypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_supplypoint(),
      GetArena());
  }
  invoiceno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invoiceno()) {
    invoiceno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_invoiceno(),
      GetArena());
  }
  invoicedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_invoicedatetime()) {
    invoicedatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_invoicedatetime(),
      GetArena());
  }
  truckno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_truckno()) {
    truckno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_truckno(),
      GetArena());
  }
  dataentrytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_dataentrytime()) {
    dataentrytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_dataentrytime(),
      GetArena());
  }
  ::memcpy(&tankuid_, &from.tankuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&deliveryid_) -
    reinterpret_cast<char*>(&tankuid_)) + sizeof(deliveryid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DeliveryReceipt)
}

void DeliveryReceipt::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeliveryReceipt_fccboscom_2eproto.base);
  supplypoint_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoiceno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoicedatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truckno_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataentrytime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&tankuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deliveryid_) -
      reinterpret_cast<char*>(&tankuid_)) + sizeof(deliveryid_));
}

DeliveryReceipt::~DeliveryReceipt() {
  // @@protoc_insertion_point(destructor:fccboscom.DeliveryReceipt)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeliveryReceipt::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  supplypoint_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoiceno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  invoicedatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  truckno_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  dataentrytime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeliveryReceipt::ArenaDtor(void* object) {
  DeliveryReceipt* _this = reinterpret_cast< DeliveryReceipt* >(object);
  (void)_this;
}
void DeliveryReceipt::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeliveryReceipt::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeliveryReceipt& DeliveryReceipt::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeliveryReceipt_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DeliveryReceipt::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DeliveryReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      supplypoint_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      invoiceno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      invoicedatetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      truckno_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      dataentrytime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&tankuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&invoicequantity_) -
        reinterpret_cast<char*>(&tankuid_)) + sizeof(invoicequantity_));
  }
  if (cached_has_bits & 0x00003f00u) {
    ::memset(&invoiceamount_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deliveryid_) -
        reinterpret_cast<char*>(&invoiceamount_)) + sizeof(deliveryid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeliveryReceipt::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tankUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 productUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_productuid(&has_bits);
          productuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string supplyPoint = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_supplypoint();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeliveryReceipt.supplyPoint");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string invoiceNo = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_invoiceno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeliveryReceipt.invoiceNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string invoiceDateTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_invoicedatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeliveryReceipt.invoiceDateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float invoiceQuantity = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_invoicequantity(&has_bits);
          invoicequantity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float invoiceAmount = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_invoiceamount(&has_bits);
          invoiceamount_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string truckNo = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_truckno();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeliveryReceipt.truckNo");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 compartmentNo = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 72)) {
          _Internal::set_has_compartmentno(&has_bits);
          compartmentno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float observedDensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_observeddensity(&has_bits);
          observeddensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float invoiceDensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_invoicedensity(&has_bits);
          invoicedensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float observedTemperature = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_observedtemperature(&has_bits);
          observedtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string dataEntryTime = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_dataentrytime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeliveryReceipt.dataEntryTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deliveryId = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 112)) {
          _Internal::set_has_deliveryid(&has_bits);
          deliveryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeliveryReceipt::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DeliveryReceipt)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tankUid = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tankuid(), target);
  }

  // required uint32 productUid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_productuid(), target);
  }

  // required string supplyPoint = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_supplypoint().data(), static_cast<int>(this->_internal_supplypoint().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeliveryReceipt.supplyPoint");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_supplypoint(), target);
  }

  // required string invoiceNo = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invoiceno().data(), static_cast<int>(this->_internal_invoiceno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeliveryReceipt.invoiceNo");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_invoiceno(), target);
  }

  // required string invoiceDateTime = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_invoicedatetime().data(), static_cast<int>(this->_internal_invoicedatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeliveryReceipt.invoiceDateTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_invoicedatetime(), target);
  }

  // required float invoiceQuantity = 6;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_invoicequantity(), target);
  }

  // required float invoiceAmount = 7;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_invoiceamount(), target);
  }

  // required string truckNo = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_truckno().data(), static_cast<int>(this->_internal_truckno().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeliveryReceipt.truckNo");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_truckno(), target);
  }

  // required uint32 compartmentNo = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(9, this->_internal_compartmentno(), target);
  }

  // required float observedDensity = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_observeddensity(), target);
  }

  // required float invoiceDensity = 11;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_invoicedensity(), target);
  }

  // required float observedTemperature = 12;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_observedtemperature(), target);
  }

  // required string dataEntryTime = 13;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_dataentrytime().data(), static_cast<int>(this->_internal_dataentrytime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeliveryReceipt.dataEntryTime");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_dataentrytime(), target);
  }

  // required uint32 deliveryId = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(14, this->_internal_deliveryid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DeliveryReceipt)
  return target;
}

size_t DeliveryReceipt::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DeliveryReceipt)
  size_t total_size = 0;

  if (_internal_has_supplypoint()) {
    // required string supplyPoint = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supplypoint());
  }

  if (_internal_has_invoiceno()) {
    // required string invoiceNo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoiceno());
  }

  if (_internal_has_invoicedatetime()) {
    // required string invoiceDateTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoicedatetime());
  }

  if (_internal_has_truckno()) {
    // required string truckNo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_truckno());
  }

  if (_internal_has_dataentrytime()) {
    // required string dataEntryTime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataentrytime());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_productuid()) {
    // required uint32 productUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_productuid());
  }

  if (_internal_has_invoicequantity()) {
    // required float invoiceQuantity = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_invoiceamount()) {
    // required float invoiceAmount = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_compartmentno()) {
    // required uint32 compartmentNo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compartmentno());
  }

  if (_internal_has_observeddensity()) {
    // required float observedDensity = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_invoicedensity()) {
    // required float invoiceDensity = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_observedtemperature()) {
    // required float observedTemperature = 12;
    total_size += 1 + 4;
  }

  if (_internal_has_deliveryid()) {
    // required uint32 deliveryId = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deliveryid());
  }

  return total_size;
}
size_t DeliveryReceipt::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DeliveryReceipt)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00003fff) ^ 0x00003fff) == 0) {  // All required fields are present.
    // required string supplyPoint = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_supplypoint());

    // required string invoiceNo = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoiceno());

    // required string invoiceDateTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_invoicedatetime());

    // required string truckNo = 8;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_truckno());

    // required string dataEntryTime = 13;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_dataentrytime());

    // required uint32 tankUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required uint32 productUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_productuid());

    // required float invoiceQuantity = 6;
    total_size += 1 + 4;

    // required float invoiceAmount = 7;
    total_size += 1 + 4;

    // required uint32 compartmentNo = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_compartmentno());

    // required float observedDensity = 10;
    total_size += 1 + 4;

    // required float invoiceDensity = 11;
    total_size += 1 + 4;

    // required float observedTemperature = 12;
    total_size += 1 + 4;

    // required uint32 deliveryId = 14;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deliveryid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeliveryReceipt::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DeliveryReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  const DeliveryReceipt* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeliveryReceipt>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DeliveryReceipt)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DeliveryReceipt)
    MergeFrom(*source);
  }
}

void DeliveryReceipt::MergeFrom(const DeliveryReceipt& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DeliveryReceipt)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_supplypoint(from._internal_supplypoint());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_invoiceno(from._internal_invoiceno());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_invoicedatetime(from._internal_invoicedatetime());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_truckno(from._internal_truckno());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_dataentrytime(from._internal_dataentrytime());
    }
    if (cached_has_bits & 0x00000020u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      productuid_ = from.productuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      invoicequantity_ = from.invoicequantity_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      invoiceamount_ = from.invoiceamount_;
    }
    if (cached_has_bits & 0x00000200u) {
      compartmentno_ = from.compartmentno_;
    }
    if (cached_has_bits & 0x00000400u) {
      observeddensity_ = from.observeddensity_;
    }
    if (cached_has_bits & 0x00000800u) {
      invoicedensity_ = from.invoicedensity_;
    }
    if (cached_has_bits & 0x00001000u) {
      observedtemperature_ = from.observedtemperature_;
    }
    if (cached_has_bits & 0x00002000u) {
      deliveryid_ = from.deliveryid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeliveryReceipt::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DeliveryReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliveryReceipt::CopyFrom(const DeliveryReceipt& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DeliveryReceipt)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliveryReceipt::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeliveryReceipt::InternalSwap(DeliveryReceipt* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  supplypoint_.Swap(&other->supplypoint_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invoiceno_.Swap(&other->invoiceno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  invoicedatetime_.Swap(&other->invoicedatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  truckno_.Swap(&other->truckno_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  dataentrytime_.Swap(&other->dataentrytime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeliveryReceipt, deliveryid_)
      + sizeof(DeliveryReceipt::deliveryid_)
      - PROTOBUF_FIELD_OFFSET(DeliveryReceipt, tankuid_)>(
          reinterpret_cast<char*>(&tankuid_),
          reinterpret_cast<char*>(&other->tankuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeliveryReceipt::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmDetails::InitAsDefaultInstance() {
}
class AlarmDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmDetails>()._has_bits_);
  static void set_has_alarmid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_alarmsequenceid(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_alarmtrxncode(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_datetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_alarmstate(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param3(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param4(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param5(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000bc1) ^ 0x00000bc1) != 0;
  }
};

AlarmDetails::AlarmDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.AlarmDetails)
}
AlarmDetails::AlarmDetails(const AlarmDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datetime()) {
    datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datetime(),
      GetArena());
  }
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param1()) {
    param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param1(),
      GetArena());
  }
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param2()) {
    param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param2(),
      GetArena());
  }
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param3()) {
    param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param3(),
      GetArena());
  }
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param4()) {
    param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param4(),
      GetArena());
  }
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param5()) {
    param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param5(),
      GetArena());
  }
  ::memcpy(&alarmid_, &from.alarmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarmstate_) -
    reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmstate_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.AlarmDetails)
}

void AlarmDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmDetails_fccboscom_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alarmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarmstate_) -
      reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmstate_));
}

AlarmDetails::~AlarmDetails() {
  // @@protoc_insertion_point(destructor:fccboscom.AlarmDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlarmDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmDetails::ArenaDtor(void* object) {
  AlarmDetails* _this = reinterpret_cast< AlarmDetails* >(object);
  (void)_this;
}
void AlarmDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmDetails& AlarmDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmDetails_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void AlarmDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.AlarmDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      datetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      param3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      param4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      param5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000c0u) {
    ::memset(&alarmid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alarmsequenceid_) -
        reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmsequenceid_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&alarmtrxncode_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alarmstate_) -
        reinterpret_cast<char*>(&alarmtrxncode_)) + sizeof(alarmstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 alarmId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_alarmid(&has_bits);
          alarmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 alarmSequenceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_alarmsequenceid(&has_bits);
          alarmsequenceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 alarmTrxnCode = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_alarmtrxncode(&has_bits);
          alarmtrxncode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deviceId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nozzleId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dateTime = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.dateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 alarmState = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_alarmstate(&has_bits);
          alarmstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param1 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_param1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.param1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_param3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.param3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param4 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_param4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.param4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param5 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_param5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmDetails.param5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.AlarmDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 alarmId = 1;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_alarmid(), target);
  }

  // required uint32 alarmSequenceId = 2;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_alarmsequenceid(), target);
  }

  // required uint32 alarmTrxnCode = 3;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_alarmtrxncode(), target);
  }

  // required uint32 deviceId = 4;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_deviceid(), target);
  }

  // optional uint32 nozzleId = 5;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nozzleid(), target);
  }

  // required string dateTime = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.dateTime");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_datetime(), target);
  }

  // required uint32 alarmState = 7;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_alarmstate(), target);
  }

  // optional string param1 = 8;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.param1");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_param1(), target);
  }

  // optional string param2 = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.param2");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_param2(), target);
  }

  // optional string param3 = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param3().data(), static_cast<int>(this->_internal_param3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.param3");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_param3(), target);
  }

  // optional string param4 = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param4().data(), static_cast<int>(this->_internal_param4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.param4");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_param4(), target);
  }

  // optional string param5 = 12;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param5().data(), static_cast<int>(this->_internal_param5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmDetails.param5");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_param5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.AlarmDetails)
  return target;
}

size_t AlarmDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.AlarmDetails)
  size_t total_size = 0;

  if (_internal_has_datetime()) {
    // required string dateTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  if (_internal_has_alarmid()) {
    // required uint32 alarmId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmid());
  }

  if (_internal_has_alarmsequenceid()) {
    // required uint32 alarmSequenceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmsequenceid());
  }

  if (_internal_has_alarmtrxncode()) {
    // required uint32 alarmTrxnCode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmtrxncode());
  }

  if (_internal_has_deviceid()) {
    // required uint32 deviceId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  if (_internal_has_alarmstate()) {
    // required uint32 alarmState = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmstate());
  }

  return total_size;
}
size_t AlarmDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.AlarmDetails)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000bc1) ^ 0x00000bc1) == 0) {  // All required fields are present.
    // required string dateTime = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());

    // required uint32 alarmId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmid());

    // required uint32 alarmSequenceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmsequenceid());

    // required uint32 alarmTrxnCode = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmtrxncode());

    // required uint32 deviceId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());

    // required uint32 alarmState = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003eu) {
    // optional string param1 = 8;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string param2 = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional string param3 = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param3());
    }

    // optional string param4 = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param4());
    }

    // optional string param5 = 12;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param5());
    }

  }
  // optional uint32 nozzleId = 5;
  if (cached_has_bits & 0x00000400u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.AlarmDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.AlarmDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.AlarmDetails)
    MergeFrom(*source);
  }
}

void AlarmDetails::MergeFrom(const AlarmDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.AlarmDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_datetime(from._internal_datetime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_param3(from._internal_param3());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_param4(from._internal_param4());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_param5(from._internal_param5());
    }
    if (cached_has_bits & 0x00000040u) {
      alarmid_ = from.alarmid_;
    }
    if (cached_has_bits & 0x00000080u) {
      alarmsequenceid_ = from.alarmsequenceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      alarmtrxncode_ = from.alarmtrxncode_;
    }
    if (cached_has_bits & 0x00000200u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000400u) {
      nozzleid_ = from.nozzleid_;
    }
    if (cached_has_bits & 0x00000800u) {
      alarmstate_ = from.alarmstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.AlarmDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmDetails::CopyFrom(const AlarmDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.AlarmDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmDetails::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AlarmDetails::InternalSwap(AlarmDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param1_.Swap(&other->param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param2_.Swap(&other->param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param3_.Swap(&other->param3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param4_.Swap(&other->param4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param5_.Swap(&other->param5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AlarmDetails, alarmstate_)
      + sizeof(AlarmDetails::alarmstate_)
      - PROTOBUF_FIELD_OFFSET(AlarmDetails, alarmid_)>(
          reinterpret_cast<char*>(&alarmid_),
          reinterpret_cast<char*>(&other->alarmid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DayEndDetails::InitAsDefaultInstance() {
}
class DayEndDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<DayEndDetails>()._has_bits_);
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_opentime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_closetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000c) ^ 0x0000000c) != 0;
  }
};

DayEndDetails::DayEndDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DayEndDetails)
}
DayEndDetails::DayEndDetails(const DayEndDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opentime()) {
    opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opentime(),
      GetArena());
  }
  closetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_closetime()) {
    closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_closetime(),
      GetArena());
  }
  ::memcpy(&dayid_, &from.dayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DayEndDetails)
}

void DayEndDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DayEndDetails_fccboscom_2eproto.base);
  opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&dayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
}

DayEndDetails::~DayEndDetails() {
  // @@protoc_insertion_point(destructor:fccboscom.DayEndDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DayEndDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opentime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DayEndDetails::ArenaDtor(void* object) {
  DayEndDetails* _this = reinterpret_cast< DayEndDetails* >(object);
  (void)_this;
}
void DayEndDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DayEndDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DayEndDetails& DayEndDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DayEndDetails_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DayEndDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DayEndDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opentime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      closetime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&dayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DayEndDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 dayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string openTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_opentime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DayEndDetails.openTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string closeTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_closetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DayEndDetails.closeTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DayEndDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DayEndDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 dayId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dayid(), target);
  }

  // optional string openTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opentime().data(), static_cast<int>(this->_internal_opentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DayEndDetails.openTime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_opentime(), target);
  }

  // optional string closeTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_closetime().data(), static_cast<int>(this->_internal_closetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DayEndDetails.closeTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_closetime(), target);
  }

  // required uint32 status = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DayEndDetails)
  return target;
}

size_t DayEndDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DayEndDetails)
  size_t total_size = 0;

  if (_internal_has_dayid()) {
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t DayEndDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DayEndDetails)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000c) ^ 0x0000000c) == 0) {  // All required fields are present.
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string openTime = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opentime());
    }

    // optional string closeTime = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_closetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DayEndDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DayEndDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const DayEndDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DayEndDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DayEndDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DayEndDetails)
    MergeFrom(*source);
  }
}

void DayEndDetails::MergeFrom(const DayEndDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DayEndDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opentime(from._internal_opentime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_closetime(from._internal_closetime());
    }
    if (cached_has_bits & 0x00000004u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DayEndDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DayEndDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayEndDetails::CopyFrom(const DayEndDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DayEndDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayEndDetails::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DayEndDetails::InternalSwap(DayEndDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opentime_.Swap(&other->opentime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  closetime_.Swap(&other->closetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DayEndDetails, status_)
      + sizeof(DayEndDetails::status_)
      - PROTOBUF_FIELD_OFFSET(DayEndDetails, dayid_)>(
          reinterpret_cast<char*>(&dayid_),
          reinterpret_cast<char*>(&other->dayid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DayEndDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DayEndTotalizer::InitAsDefaultInstance() {
}
class DayEndTotalizer::_Internal {
 public:
  using HasBits = decltype(std::declval<DayEndTotalizer>()._has_bits_);
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nozzleuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_starttotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_endtotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_totalsalevolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_recordid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000067) ^ 0x00000067) != 0;
  }
};

DayEndTotalizer::DayEndTotalizer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DayEndTotalizer)
}
DayEndTotalizer::DayEndTotalizer(const DayEndTotalizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dayid_, &from.dayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DayEndTotalizer)
}

void DayEndTotalizer::SharedCtor() {
  ::memset(&dayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
}

DayEndTotalizer::~DayEndTotalizer() {
  // @@protoc_insertion_point(destructor:fccboscom.DayEndTotalizer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DayEndTotalizer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DayEndTotalizer::ArenaDtor(void* object) {
  DayEndTotalizer* _this = reinterpret_cast< DayEndTotalizer* >(object);
  (void)_this;
}
void DayEndTotalizer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DayEndTotalizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DayEndTotalizer& DayEndTotalizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DayEndTotalizer_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DayEndTotalizer::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DayEndTotalizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    ::memset(&dayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DayEndTotalizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 dayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nozzleuid(&has_bits);
          nozzleuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double startTotalizer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          _Internal::set_has_starttotalizer(&has_bits);
          starttotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endTotalizer = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          _Internal::set_has_endtotalizer(&has_bits);
          endtotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double totalSaleVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 41)) {
          _Internal::set_has_totalsalevolume(&has_bits);
          totalsalevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // required uint32 recordId = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_recordid(&has_bits);
          recordid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DayEndTotalizer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DayEndTotalizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 dayId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dayid(), target);
  }

  // required uint32 nozzleUid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nozzleuid(), target);
  }

  // required double startTotalizer = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_starttotalizer(), target);
  }

  // optional double endTotalizer = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_endtotalizer(), target);
  }

  // optional double totalSaleVolume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(5, this->_internal_totalsalevolume(), target);
  }

  // required uint32 recordId = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_recordid(), target);
  }

  // required uint32 status = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DayEndTotalizer)
  return target;
}

size_t DayEndTotalizer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DayEndTotalizer)
  size_t total_size = 0;

  if (_internal_has_dayid()) {
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_nozzleuid()) {
    // required uint32 nozzleUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());
  }

  if (_internal_has_starttotalizer()) {
    // required double startTotalizer = 3;
    total_size += 1 + 8;
  }

  if (_internal_has_recordid()) {
    // required uint32 recordId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recordid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t DayEndTotalizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DayEndTotalizer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000067) ^ 0x00000067) == 0) {  // All required fields are present.
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 nozzleUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());

    // required double startTotalizer = 3;
    total_size += 1 + 8;

    // required uint32 recordId = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recordid());

    // required uint32 status = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000018u) {
    // optional double endTotalizer = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 8;
    }

    // optional double totalSaleVolume = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 8;
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DayEndTotalizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DayEndTotalizer)
  GOOGLE_DCHECK_NE(&from, this);
  const DayEndTotalizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DayEndTotalizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DayEndTotalizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DayEndTotalizer)
    MergeFrom(*source);
  }
}

void DayEndTotalizer::MergeFrom(const DayEndTotalizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DayEndTotalizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000002u) {
      nozzleuid_ = from.nozzleuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      starttotalizer_ = from.starttotalizer_;
    }
    if (cached_has_bits & 0x00000008u) {
      endtotalizer_ = from.endtotalizer_;
    }
    if (cached_has_bits & 0x00000010u) {
      totalsalevolume_ = from.totalsalevolume_;
    }
    if (cached_has_bits & 0x00000020u) {
      recordid_ = from.recordid_;
    }
    if (cached_has_bits & 0x00000040u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DayEndTotalizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DayEndTotalizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayEndTotalizer::CopyFrom(const DayEndTotalizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DayEndTotalizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayEndTotalizer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DayEndTotalizer::InternalSwap(DayEndTotalizer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DayEndTotalizer, status_)
      + sizeof(DayEndTotalizer::status_)
      - PROTOBUF_FIELD_OFFSET(DayEndTotalizer, dayid_)>(
          reinterpret_cast<char*>(&dayid_),
          reinterpret_cast<char*>(&other->dayid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DayEndTotalizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DayEndInventory::InitAsDefaultInstance() {
}
class DayEndInventory::_Internal {
 public:
  using HasBits = decltype(std::declval<DayEndInventory>()._has_bits_);
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_startproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_startwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_startproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_startproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_starttemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_startullage(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_endproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_endwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_endproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_endwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_endproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_endtemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_endproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_endproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_endullage(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_totalsalevolume(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_inventoryid(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_tankstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_recorduid(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x018004ff) ^ 0x018004ff) != 0;
  }
};

DayEndInventory::DayEndInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DayEndInventory)
}
DayEndInventory::DayEndInventory(const DayEndInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dayid_, &from.dayid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DayEndInventory)
}

void DayEndInventory::SharedCtor() {
  ::memset(&dayid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&dayid_)) + sizeof(status_));
}

DayEndInventory::~DayEndInventory() {
  // @@protoc_insertion_point(destructor:fccboscom.DayEndInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DayEndInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DayEndInventory::ArenaDtor(void* object) {
  DayEndInventory* _this = reinterpret_cast< DayEndInventory* >(object);
  (void)_this;
}
void DayEndInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DayEndInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DayEndInventory& DayEndInventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DayEndInventory_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DayEndInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DayEndInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&dayid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starttemperature_) -
        reinterpret_cast<char*>(&dayid_)) + sizeof(starttemperature_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&startproductdensity_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endproducttcvolume_) -
        reinterpret_cast<char*>(&startproductdensity_)) + sizeof(endproducttcvolume_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&endtemperature_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recorduid_) -
        reinterpret_cast<char*>(&endtemperature_)) + sizeof(recorduid_));
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DayEndInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 dayId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float startProductLevel = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_startproductlevel(&has_bits);
          startproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterLevel = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_startwaterlevel(&has_bits);
          startwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductVolume = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_startproductvolume(&has_bits);
          startproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterVolume = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_startwatervolume(&has_bits);
          startwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductTcVolume = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_startproducttcvolume(&has_bits);
          startproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startTemperature = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_starttemperature(&has_bits);
          starttemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductDensity = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_startproductdensity(&has_bits);
          startproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductTcDensity = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_startproducttcdensity(&has_bits);
          startproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startUllage = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_startullage(&has_bits);
          startullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductLevel = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_endproductlevel(&has_bits);
          endproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endWaterLevel = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_endwaterlevel(&has_bits);
          endwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductVolume = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_endproductvolume(&has_bits);
          endproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endWaterVolume = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_endwatervolume(&has_bits);
          endwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductTcVolume = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_endproducttcvolume(&has_bits);
          endproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endTemperature = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_endtemperature(&has_bits);
          endtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductDensity = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_endproductdensity(&has_bits);
          endproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductTcDensity = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_endproducttcdensity(&has_bits);
          endproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endUllage = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_endullage(&has_bits);
          endullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double totalSaleVolume = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 169)) {
          _Internal::set_has_totalsalevolume(&has_bits);
          totalsalevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventoryId = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 176)) {
          _Internal::set_has_inventoryid(&has_bits);
          inventoryid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tankStatus = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 184)) {
          _Internal::set_has_tankstatus(&has_bits);
          tankstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recordUid = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 192)) {
          _Internal::set_has_recorduid(&has_bits);
          recorduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DayEndInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DayEndInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 dayId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_dayid(), target);
  }

  // required uint32 tankUid = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_tankuid(), target);
  }

  // required float startProductLevel = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_startproductlevel(), target);
  }

  // required float startWaterLevel = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_startwaterlevel(), target);
  }

  // required float startProductVolume = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_startproductvolume(), target);
  }

  // required float startWaterVolume = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_startwatervolume(), target);
  }

  // required float startProductTcVolume = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_startproducttcvolume(), target);
  }

  // required float startTemperature = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_starttemperature(), target);
  }

  // optional float startProductDensity = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_startproductdensity(), target);
  }

  // optional float startProductTcDensity = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_startproducttcdensity(), target);
  }

  // required float startUllage = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_startullage(), target);
  }

  // optional float endProductLevel = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_endproductlevel(), target);
  }

  // optional float endWaterLevel = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_endwaterlevel(), target);
  }

  // optional float endProductVolume = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_endproductvolume(), target);
  }

  // optional float endWaterVolume = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_endwatervolume(), target);
  }

  // optional float endProductTcVolume = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_endproducttcvolume(), target);
  }

  // optional float endTemperature = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_endtemperature(), target);
  }

  // optional float endProductDensity = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_endproductdensity(), target);
  }

  // optional float endProductTcDensity = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_endproducttcdensity(), target);
  }

  // optional float endUllage = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_endullage(), target);
  }

  // optional double totalSaleVolume = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(21, this->_internal_totalsalevolume(), target);
  }

  // optional uint32 inventoryId = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(22, this->_internal_inventoryid(), target);
  }

  // optional uint32 tankStatus = 23;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(23, this->_internal_tankstatus(), target);
  }

  // required uint32 recordUid = 24;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(24, this->_internal_recorduid(), target);
  }

  // required uint32 status = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DayEndInventory)
  return target;
}

size_t DayEndInventory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DayEndInventory)
  size_t total_size = 0;

  if (_internal_has_dayid()) {
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_startproductlevel()) {
    // required float startProductLevel = 3;
    total_size += 1 + 4;
  }

  if (_internal_has_startwaterlevel()) {
    // required float startWaterLevel = 4;
    total_size += 1 + 4;
  }

  if (_internal_has_startproductvolume()) {
    // required float startProductVolume = 5;
    total_size += 1 + 4;
  }

  if (_internal_has_startwatervolume()) {
    // required float startWaterVolume = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_startproducttcvolume()) {
    // required float startProductTcVolume = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_starttemperature()) {
    // required float startTemperature = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_startullage()) {
    // required float startUllage = 11;
    total_size += 1 + 4;
  }

  if (_internal_has_recorduid()) {
    // required uint32 recordUid = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t DayEndInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DayEndInventory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x018004ff) ^ 0x018004ff) == 0) {  // All required fields are present.
    // required uint32 dayId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 tankUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required float startProductLevel = 3;
    total_size += 1 + 4;

    // required float startWaterLevel = 4;
    total_size += 1 + 4;

    // required float startProductVolume = 5;
    total_size += 1 + 4;

    // required float startWaterVolume = 6;
    total_size += 1 + 4;

    // required float startProductTcVolume = 7;
    total_size += 1 + 4;

    // required float startTemperature = 8;
    total_size += 1 + 4;

    // required float startUllage = 11;
    total_size += 1 + 4;

    // required uint32 recordUid = 24;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());

    // required uint32 status = 25;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000300u) {
    // optional float startProductDensity = 9;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 4;
    }

    // optional float startProductTcDensity = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000f800u) {
    // optional float endProductLevel = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

    // optional float endWaterLevel = 13;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional float endProductVolume = 14;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 + 4;
    }

    // optional float endWaterVolume = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float endProductTcVolume = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x007f0000u) {
    // optional float endTemperature = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float endProductDensity = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float endProductTcDensity = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float endUllage = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional double totalSaleVolume = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 8;
    }

    // optional uint32 inventoryId = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventoryid());
    }

    // optional uint32 tankStatus = 23;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tankstatus());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DayEndInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DayEndInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const DayEndInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DayEndInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DayEndInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DayEndInventory)
    MergeFrom(*source);
  }
}

void DayEndInventory::MergeFrom(const DayEndInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DayEndInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000002u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      startproductlevel_ = from.startproductlevel_;
    }
    if (cached_has_bits & 0x00000008u) {
      startwaterlevel_ = from.startwaterlevel_;
    }
    if (cached_has_bits & 0x00000010u) {
      startproductvolume_ = from.startproductvolume_;
    }
    if (cached_has_bits & 0x00000020u) {
      startwatervolume_ = from.startwatervolume_;
    }
    if (cached_has_bits & 0x00000040u) {
      startproducttcvolume_ = from.startproducttcvolume_;
    }
    if (cached_has_bits & 0x00000080u) {
      starttemperature_ = from.starttemperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      startproductdensity_ = from.startproductdensity_;
    }
    if (cached_has_bits & 0x00000200u) {
      startproducttcdensity_ = from.startproducttcdensity_;
    }
    if (cached_has_bits & 0x00000400u) {
      startullage_ = from.startullage_;
    }
    if (cached_has_bits & 0x00000800u) {
      endproductlevel_ = from.endproductlevel_;
    }
    if (cached_has_bits & 0x00001000u) {
      endwaterlevel_ = from.endwaterlevel_;
    }
    if (cached_has_bits & 0x00002000u) {
      endproductvolume_ = from.endproductvolume_;
    }
    if (cached_has_bits & 0x00004000u) {
      endwatervolume_ = from.endwatervolume_;
    }
    if (cached_has_bits & 0x00008000u) {
      endproducttcvolume_ = from.endproducttcvolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      endtemperature_ = from.endtemperature_;
    }
    if (cached_has_bits & 0x00020000u) {
      endproductdensity_ = from.endproductdensity_;
    }
    if (cached_has_bits & 0x00040000u) {
      endproducttcdensity_ = from.endproducttcdensity_;
    }
    if (cached_has_bits & 0x00080000u) {
      endullage_ = from.endullage_;
    }
    if (cached_has_bits & 0x00100000u) {
      totalsalevolume_ = from.totalsalevolume_;
    }
    if (cached_has_bits & 0x00200000u) {
      inventoryid_ = from.inventoryid_;
    }
    if (cached_has_bits & 0x00400000u) {
      tankstatus_ = from.tankstatus_;
    }
    if (cached_has_bits & 0x00800000u) {
      recorduid_ = from.recorduid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x01000000u) {
    _internal_set_status(from._internal_status());
  }
}

void DayEndInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DayEndInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DayEndInventory::CopyFrom(const DayEndInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DayEndInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DayEndInventory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DayEndInventory::InternalSwap(DayEndInventory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DayEndInventory, status_)
      + sizeof(DayEndInventory::status_)
      - PROTOBUF_FIELD_OFFSET(DayEndInventory, dayid_)>(
          reinterpret_cast<char*>(&dayid_),
          reinterpret_cast<char*>(&other->dayid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DayEndInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShiftEndDetails::InitAsDefaultInstance() {
}
class ShiftEndDetails::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftEndDetails>()._has_bits_);
  static void set_has_shiftid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_shifttype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_opentime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_closetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_recorduid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000007c) ^ 0x0000007c) != 0;
  }
};

ShiftEndDetails::ShiftEndDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.ShiftEndDetails)
}
ShiftEndDetails::ShiftEndDetails(const ShiftEndDetails& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_opentime()) {
    opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_opentime(),
      GetArena());
  }
  closetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_closetime()) {
    closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_closetime(),
      GetArena());
  }
  ::memcpy(&shiftid_, &from.shiftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&recorduid_) -
    reinterpret_cast<char*>(&shiftid_)) + sizeof(recorduid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.ShiftEndDetails)
}

void ShiftEndDetails::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShiftEndDetails_fccboscom_2eproto.base);
  opentime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shiftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&recorduid_) -
      reinterpret_cast<char*>(&shiftid_)) + sizeof(recorduid_));
}

ShiftEndDetails::~ShiftEndDetails() {
  // @@protoc_insertion_point(destructor:fccboscom.ShiftEndDetails)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShiftEndDetails::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  opentime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  closetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShiftEndDetails::ArenaDtor(void* object) {
  ShiftEndDetails* _this = reinterpret_cast< ShiftEndDetails* >(object);
  (void)_this;
}
void ShiftEndDetails::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftEndDetails::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShiftEndDetails& ShiftEndDetails::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShiftEndDetails_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void ShiftEndDetails::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.ShiftEndDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      opentime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      closetime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&shiftid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&recorduid_) -
        reinterpret_cast<char*>(&shiftid_)) + sizeof(recorduid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftEndDetails::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 shiftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shiftid(&has_bits);
          shiftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 shiftType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shifttype(&has_bits);
          shifttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dayId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string openTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_opentime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ShiftEndDetails.openTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string closeTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_closetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ShiftEndDetails.closeTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recordUid = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_recorduid(&has_bits);
          recorduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftEndDetails::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.ShiftEndDetails)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 shiftId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shiftid(), target);
  }

  // required uint32 shiftType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shifttype(), target);
  }

  // required uint32 dayId = 3;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dayid(), target);
  }

  // optional string openTime = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_opentime().data(), static_cast<int>(this->_internal_opentime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ShiftEndDetails.openTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_opentime(), target);
  }

  // optional string closeTime = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_closetime().data(), static_cast<int>(this->_internal_closetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ShiftEndDetails.closeTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_closetime(), target);
  }

  // required uint32 status = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_status(), target);
  }

  // required uint32 recordUid = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_recorduid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.ShiftEndDetails)
  return target;
}

size_t ShiftEndDetails::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.ShiftEndDetails)
  size_t total_size = 0;

  if (_internal_has_shiftid()) {
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());
  }

  if (_internal_has_shifttype()) {
    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());
  }

  if (_internal_has_dayid()) {
    // required uint32 dayId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (_internal_has_recorduid()) {
    // required uint32 recordUid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());
  }

  return total_size;
}
size_t ShiftEndDetails::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.ShiftEndDetails)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000007c) ^ 0x0000007c) == 0) {  // All required fields are present.
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());

    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());

    // required uint32 dayId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 status = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

    // required uint32 recordUid = 7;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    // optional string openTime = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_opentime());
    }

    // optional string closeTime = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_closetime());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShiftEndDetails::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.ShiftEndDetails)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftEndDetails* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShiftEndDetails>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.ShiftEndDetails)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.ShiftEndDetails)
    MergeFrom(*source);
  }
}

void ShiftEndDetails::MergeFrom(const ShiftEndDetails& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.ShiftEndDetails)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_opentime(from._internal_opentime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_closetime(from._internal_closetime());
    }
    if (cached_has_bits & 0x00000004u) {
      shiftid_ = from.shiftid_;
    }
    if (cached_has_bits & 0x00000008u) {
      shifttype_ = from.shifttype_;
    }
    if (cached_has_bits & 0x00000010u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000020u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000040u) {
      recorduid_ = from.recorduid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftEndDetails::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.ShiftEndDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftEndDetails::CopyFrom(const ShiftEndDetails& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.ShiftEndDetails)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftEndDetails::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShiftEndDetails::InternalSwap(ShiftEndDetails* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  opentime_.Swap(&other->opentime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  closetime_.Swap(&other->closetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShiftEndDetails, recorduid_)
      + sizeof(ShiftEndDetails::recorduid_)
      - PROTOBUF_FIELD_OFFSET(ShiftEndDetails, shiftid_)>(
          reinterpret_cast<char*>(&shiftid_),
          reinterpret_cast<char*>(&other->shiftid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftEndDetails::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShiftEndTotalizer::InitAsDefaultInstance() {
}
class ShiftEndTotalizer::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftEndTotalizer>()._has_bits_);
  static void set_has_shiftid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_shifttype(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_recorduid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_nozzleuid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_tankno(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_starttotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_endtotalizer(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_totalsalevolume(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_lasttrxnid(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_nozzlestatus(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000008fe) ^ 0x000008fe) != 0;
  }
};

ShiftEndTotalizer::ShiftEndTotalizer(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.ShiftEndTotalizer)
}
ShiftEndTotalizer::ShiftEndTotalizer(const ShiftEndTotalizer& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  nozzlestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_nozzlestatus()) {
    nozzlestatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_nozzlestatus(),
      GetArena());
  }
  ::memcpy(&shiftid_, &from.shiftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&shiftid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.ShiftEndTotalizer)
}

void ShiftEndTotalizer::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ShiftEndTotalizer_fccboscom_2eproto.base);
  nozzlestatus_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&shiftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&shiftid_)) + sizeof(status_));
}

ShiftEndTotalizer::~ShiftEndTotalizer() {
  // @@protoc_insertion_point(destructor:fccboscom.ShiftEndTotalizer)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShiftEndTotalizer::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  nozzlestatus_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ShiftEndTotalizer::ArenaDtor(void* object) {
  ShiftEndTotalizer* _this = reinterpret_cast< ShiftEndTotalizer* >(object);
  (void)_this;
}
void ShiftEndTotalizer::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftEndTotalizer::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShiftEndTotalizer& ShiftEndTotalizer::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShiftEndTotalizer_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void ShiftEndTotalizer::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.ShiftEndTotalizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    nozzlestatus_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&shiftid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&starttotalizer_) -
        reinterpret_cast<char*>(&shiftid_)) + sizeof(starttotalizer_));
  }
  if (cached_has_bits & 0x00000f00u) {
    ::memset(&endtotalizer_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&endtotalizer_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftEndTotalizer::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 shiftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shiftid(&has_bits);
          shiftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 shiftType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shifttype(&has_bits);
          shifttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dayId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recordUid = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_recorduid(&has_bits);
          recorduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nozzleuid(&has_bits);
          nozzleuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankNo = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_tankno(&has_bits);
          tankno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required double startTotalizer = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 57)) {
          _Internal::set_has_starttotalizer(&has_bits);
          starttotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double endTotalizer = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 65)) {
          _Internal::set_has_endtotalizer(&has_bits);
          endtotalizer_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional double totalSaleVolume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 73)) {
          _Internal::set_has_totalsalevolume(&has_bits);
          totalsalevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 lastTrxnId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_lasttrxnid(&has_bits);
          lasttrxnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string nozzleStatus = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_nozzlestatus();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ShiftEndTotalizer.nozzleStatus");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 96)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftEndTotalizer::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.ShiftEndTotalizer)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 shiftId = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shiftid(), target);
  }

  // required uint32 shiftType = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shifttype(), target);
  }

  // required uint32 dayId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_dayid(), target);
  }

  // required uint32 recordUid = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_recorduid(), target);
  }

  // required uint32 nozzleUid = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_nozzleuid(), target);
  }

  // required uint32 tankNo = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_tankno(), target);
  }

  // required double startTotalizer = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(7, this->_internal_starttotalizer(), target);
  }

  // optional double endTotalizer = 8;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(8, this->_internal_endtotalizer(), target);
  }

  // optional double totalSaleVolume = 9;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(9, this->_internal_totalsalevolume(), target);
  }

  // optional uint32 lastTrxnId = 10;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_lasttrxnid(), target);
  }

  // optional string nozzleStatus = 11;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_nozzlestatus().data(), static_cast<int>(this->_internal_nozzlestatus().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ShiftEndTotalizer.nozzleStatus");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_nozzlestatus(), target);
  }

  // required uint32 status = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(12, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.ShiftEndTotalizer)
  return target;
}

size_t ShiftEndTotalizer::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.ShiftEndTotalizer)
  size_t total_size = 0;

  if (_internal_has_shiftid()) {
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());
  }

  if (_internal_has_shifttype()) {
    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());
  }

  if (_internal_has_dayid()) {
    // required uint32 dayId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_recorduid()) {
    // required uint32 recordUid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());
  }

  if (_internal_has_nozzleuid()) {
    // required uint32 nozzleUid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());
  }

  if (_internal_has_tankno()) {
    // required uint32 tankNo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankno());
  }

  if (_internal_has_starttotalizer()) {
    // required double startTotalizer = 7;
    total_size += 1 + 8;
  }

  if (_internal_has_status()) {
    // required uint32 status = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t ShiftEndTotalizer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.ShiftEndTotalizer)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000008fe) ^ 0x000008fe) == 0) {  // All required fields are present.
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());

    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());

    // required uint32 dayId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 recordUid = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());

    // required uint32 nozzleUid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleuid());

    // required uint32 tankNo = 6;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankno());

    // required double startTotalizer = 7;
    total_size += 1 + 8;

    // required uint32 status = 12;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string nozzleStatus = 11;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_nozzlestatus());
  }

  if (cached_has_bits & 0x00000700u) {
    // optional double endTotalizer = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 + 8;
    }

    // optional double totalSaleVolume = 9;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 + 8;
    }

    // optional uint32 lastTrxnId = 10;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_lasttrxnid());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShiftEndTotalizer::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.ShiftEndTotalizer)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftEndTotalizer* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShiftEndTotalizer>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.ShiftEndTotalizer)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.ShiftEndTotalizer)
    MergeFrom(*source);
  }
}

void ShiftEndTotalizer::MergeFrom(const ShiftEndTotalizer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.ShiftEndTotalizer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_nozzlestatus(from._internal_nozzlestatus());
    }
    if (cached_has_bits & 0x00000002u) {
      shiftid_ = from.shiftid_;
    }
    if (cached_has_bits & 0x00000004u) {
      shifttype_ = from.shifttype_;
    }
    if (cached_has_bits & 0x00000008u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000010u) {
      recorduid_ = from.recorduid_;
    }
    if (cached_has_bits & 0x00000020u) {
      nozzleuid_ = from.nozzleuid_;
    }
    if (cached_has_bits & 0x00000040u) {
      tankno_ = from.tankno_;
    }
    if (cached_has_bits & 0x00000080u) {
      starttotalizer_ = from.starttotalizer_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      endtotalizer_ = from.endtotalizer_;
    }
    if (cached_has_bits & 0x00000200u) {
      totalsalevolume_ = from.totalsalevolume_;
    }
    if (cached_has_bits & 0x00000400u) {
      lasttrxnid_ = from.lasttrxnid_;
    }
    if (cached_has_bits & 0x00000800u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftEndTotalizer::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.ShiftEndTotalizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftEndTotalizer::CopyFrom(const ShiftEndTotalizer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.ShiftEndTotalizer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftEndTotalizer::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShiftEndTotalizer::InternalSwap(ShiftEndTotalizer* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  nozzlestatus_.Swap(&other->nozzlestatus_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShiftEndTotalizer, status_)
      + sizeof(ShiftEndTotalizer::status_)
      - PROTOBUF_FIELD_OFFSET(ShiftEndTotalizer, shiftid_)>(
          reinterpret_cast<char*>(&shiftid_),
          reinterpret_cast<char*>(&other->shiftid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftEndTotalizer::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ShiftEndInventory::InitAsDefaultInstance() {
}
class ShiftEndInventory::_Internal {
 public:
  using HasBits = decltype(std::declval<ShiftEndInventory>()._has_bits_);
  static void set_has_shiftid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_shifttype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_recorduid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_dayid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_startproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_startwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_startproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_startwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_startproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_startproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_startproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_startullage(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_starttemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_endproductlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_endwaterlevel(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_endproductvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_endwatervolume(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_endproducttcvolume(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_endproductdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_endproducttcdensity(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_endullage(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_endtemperature(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_totalsalevolume(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_inventoryuid(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_tankstatus(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x040033ff) ^ 0x040033ff) != 0;
  }
};

ShiftEndInventory::ShiftEndInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.ShiftEndInventory)
}
ShiftEndInventory::ShiftEndInventory(const ShiftEndInventory& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&shiftid_, &from.shiftid_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&shiftid_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.ShiftEndInventory)
}

void ShiftEndInventory::SharedCtor() {
  ::memset(&shiftid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&shiftid_)) + sizeof(status_));
}

ShiftEndInventory::~ShiftEndInventory() {
  // @@protoc_insertion_point(destructor:fccboscom.ShiftEndInventory)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ShiftEndInventory::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ShiftEndInventory::ArenaDtor(void* object) {
  ShiftEndInventory* _this = reinterpret_cast< ShiftEndInventory* >(object);
  (void)_this;
}
void ShiftEndInventory::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ShiftEndInventory::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ShiftEndInventory& ShiftEndInventory::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ShiftEndInventory_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void ShiftEndInventory::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.ShiftEndInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&shiftid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&startproductvolume_) -
        reinterpret_cast<char*>(&shiftid_)) + sizeof(startproductvolume_));
  }
  if (cached_has_bits & 0x0000ff00u) {
    ::memset(&startwatervolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endwaterlevel_) -
        reinterpret_cast<char*>(&startwatervolume_)) + sizeof(endwaterlevel_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&endproductvolume_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&endtemperature_) -
        reinterpret_cast<char*>(&endproductvolume_)) + sizeof(endtemperature_));
  }
  if (cached_has_bits & 0x07000000u) {
    ::memset(&inventoryuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&inventoryuid_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ShiftEndInventory::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 shiftId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_shiftid(&has_bits);
          shiftid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 shiftType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_shifttype(&has_bits);
          shifttype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recordUid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_recorduid(&has_bits);
          recorduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 dayId = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_dayid(&has_bits);
          dayid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 tankUid = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float startProductLevel = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          _Internal::set_has_startproductlevel(&has_bits);
          startproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterLevel = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          _Internal::set_has_startwaterlevel(&has_bits);
          startwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductVolume = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 69)) {
          _Internal::set_has_startproductvolume(&has_bits);
          startproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startWaterVolume = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 77)) {
          _Internal::set_has_startwatervolume(&has_bits);
          startwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startProductTcVolume = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 85)) {
          _Internal::set_has_startproducttcvolume(&has_bits);
          startproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductDensity = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 93)) {
          _Internal::set_has_startproductdensity(&has_bits);
          startproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float startProductTcDensity = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 101)) {
          _Internal::set_has_startproducttcdensity(&has_bits);
          startproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startUllage = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 109)) {
          _Internal::set_has_startullage(&has_bits);
          startullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required float startTemperature = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 117)) {
          _Internal::set_has_starttemperature(&has_bits);
          starttemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductLevel = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 125)) {
          _Internal::set_has_endproductlevel(&has_bits);
          endproductlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endWaterLevel = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 133)) {
          _Internal::set_has_endwaterlevel(&has_bits);
          endwaterlevel_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductVolume = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 141)) {
          _Internal::set_has_endproductvolume(&has_bits);
          endproductvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endWaterVolume = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 149)) {
          _Internal::set_has_endwatervolume(&has_bits);
          endwatervolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductTcVolume = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 157)) {
          _Internal::set_has_endproducttcvolume(&has_bits);
          endproducttcvolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductDensity = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 165)) {
          _Internal::set_has_endproductdensity(&has_bits);
          endproductdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endProductTcDensity = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 173)) {
          _Internal::set_has_endproducttcdensity(&has_bits);
          endproducttcdensity_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endUllage = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 181)) {
          _Internal::set_has_endullage(&has_bits);
          endullage_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional float endTemperature = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 189)) {
          _Internal::set_has_endtemperature(&has_bits);
          endtemperature_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional double totalSaleVolume = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 193)) {
          _Internal::set_has_totalsalevolume(&has_bits);
          totalsalevolume_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // optional uint32 inventoryUid = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 200)) {
          _Internal::set_has_inventoryuid(&has_bits);
          inventoryuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 tankStatus = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 208)) {
          _Internal::set_has_tankstatus(&has_bits);
          tankstatus_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 216)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ShiftEndInventory::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.ShiftEndInventory)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 shiftId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_shiftid(), target);
  }

  // required uint32 shiftType = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_shifttype(), target);
  }

  // required uint32 recordUid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_recorduid(), target);
  }

  // required uint32 dayId = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_dayid(), target);
  }

  // required uint32 tankUid = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_tankuid(), target);
  }

  // required float startProductLevel = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_startproductlevel(), target);
  }

  // required float startWaterLevel = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_startwaterlevel(), target);
  }

  // required float startProductVolume = 8;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(8, this->_internal_startproductvolume(), target);
  }

  // required float startWaterVolume = 9;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(9, this->_internal_startwatervolume(), target);
  }

  // required float startProductTcVolume = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(10, this->_internal_startproducttcvolume(), target);
  }

  // optional float startProductDensity = 11;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(11, this->_internal_startproductdensity(), target);
  }

  // optional float startProductTcDensity = 12;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(12, this->_internal_startproducttcdensity(), target);
  }

  // required float startUllage = 13;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(13, this->_internal_startullage(), target);
  }

  // required float startTemperature = 14;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(14, this->_internal_starttemperature(), target);
  }

  // optional float endProductLevel = 15;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(15, this->_internal_endproductlevel(), target);
  }

  // optional float endWaterLevel = 16;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(16, this->_internal_endwaterlevel(), target);
  }

  // optional float endProductVolume = 17;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(17, this->_internal_endproductvolume(), target);
  }

  // optional float endWaterVolume = 18;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(18, this->_internal_endwatervolume(), target);
  }

  // optional float endProductTcVolume = 19;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(19, this->_internal_endproducttcvolume(), target);
  }

  // optional float endProductDensity = 20;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(20, this->_internal_endproductdensity(), target);
  }

  // optional float endProductTcDensity = 21;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(21, this->_internal_endproducttcdensity(), target);
  }

  // optional float endUllage = 22;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(22, this->_internal_endullage(), target);
  }

  // optional float endTemperature = 23;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(23, this->_internal_endtemperature(), target);
  }

  // optional double totalSaleVolume = 24;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(24, this->_internal_totalsalevolume(), target);
  }

  // optional uint32 inventoryUid = 25;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(25, this->_internal_inventoryuid(), target);
  }

  // optional uint32 tankStatus = 26;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(26, this->_internal_tankstatus(), target);
  }

  // required uint32 status = 27;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(27, this->_internal_status(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.ShiftEndInventory)
  return target;
}

size_t ShiftEndInventory::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.ShiftEndInventory)
  size_t total_size = 0;

  if (_internal_has_shiftid()) {
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());
  }

  if (_internal_has_shifttype()) {
    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());
  }

  if (_internal_has_recorduid()) {
    // required uint32 recordUid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());
  }

  if (_internal_has_dayid()) {
    // required uint32 dayId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());
  }

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_startproductlevel()) {
    // required float startProductLevel = 6;
    total_size += 1 + 4;
  }

  if (_internal_has_startwaterlevel()) {
    // required float startWaterLevel = 7;
    total_size += 1 + 4;
  }

  if (_internal_has_startproductvolume()) {
    // required float startProductVolume = 8;
    total_size += 1 + 4;
  }

  if (_internal_has_startwatervolume()) {
    // required float startWaterVolume = 9;
    total_size += 1 + 4;
  }

  if (_internal_has_startproducttcvolume()) {
    // required float startProductTcVolume = 10;
    total_size += 1 + 4;
  }

  if (_internal_has_startullage()) {
    // required float startUllage = 13;
    total_size += 1 + 4;
  }

  if (_internal_has_starttemperature()) {
    // required float startTemperature = 14;
    total_size += 1 + 4;
  }

  if (_internal_has_status()) {
    // required uint32 status = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t ShiftEndInventory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.ShiftEndInventory)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x040033ff) ^ 0x040033ff) == 0) {  // All required fields are present.
    // required uint32 shiftId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shiftid());

    // required uint32 shiftType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_shifttype());

    // required uint32 recordUid = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());

    // required uint32 dayId = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_dayid());

    // required uint32 tankUid = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required float startProductLevel = 6;
    total_size += 1 + 4;

    // required float startWaterLevel = 7;
    total_size += 1 + 4;

    // required float startProductVolume = 8;
    total_size += 1 + 4;

    // required float startWaterVolume = 9;
    total_size += 1 + 4;

    // required float startProductTcVolume = 10;
    total_size += 1 + 4;

    // required float startUllage = 13;
    total_size += 1 + 4;

    // required float startTemperature = 14;
    total_size += 1 + 4;

    // required uint32 status = 27;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000c00u) {
    // optional float startProductDensity = 11;
    if (cached_has_bits & 0x00000400u) {
      total_size += 1 + 4;
    }

    // optional float startProductTcDensity = 12;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 4;
    }

  }
  if (cached_has_bits & 0x0000c000u) {
    // optional float endProductLevel = 15;
    if (cached_has_bits & 0x00004000u) {
      total_size += 1 + 4;
    }

    // optional float endWaterLevel = 16;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional float endProductVolume = 17;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 + 4;
    }

    // optional float endWaterVolume = 18;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 + 4;
    }

    // optional float endProductTcVolume = 19;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 + 4;
    }

    // optional float endProductDensity = 20;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 + 4;
    }

    // optional float endProductTcDensity = 21;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 + 4;
    }

    // optional float endUllage = 22;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 + 4;
    }

    // optional double totalSaleVolume = 24;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 + 8;
    }

    // optional float endTemperature = 23;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 + 4;
    }

  }
  if (cached_has_bits & 0x03000000u) {
    // optional uint32 inventoryUid = 25;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_inventoryuid());
    }

    // optional uint32 tankStatus = 26;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_tankstatus());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ShiftEndInventory::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.ShiftEndInventory)
  GOOGLE_DCHECK_NE(&from, this);
  const ShiftEndInventory* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ShiftEndInventory>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.ShiftEndInventory)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.ShiftEndInventory)
    MergeFrom(*source);
  }
}

void ShiftEndInventory::MergeFrom(const ShiftEndInventory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.ShiftEndInventory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      shiftid_ = from.shiftid_;
    }
    if (cached_has_bits & 0x00000002u) {
      shifttype_ = from.shifttype_;
    }
    if (cached_has_bits & 0x00000004u) {
      recorduid_ = from.recorduid_;
    }
    if (cached_has_bits & 0x00000008u) {
      dayid_ = from.dayid_;
    }
    if (cached_has_bits & 0x00000010u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000020u) {
      startproductlevel_ = from.startproductlevel_;
    }
    if (cached_has_bits & 0x00000040u) {
      startwaterlevel_ = from.startwaterlevel_;
    }
    if (cached_has_bits & 0x00000080u) {
      startproductvolume_ = from.startproductvolume_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      startwatervolume_ = from.startwatervolume_;
    }
    if (cached_has_bits & 0x00000200u) {
      startproducttcvolume_ = from.startproducttcvolume_;
    }
    if (cached_has_bits & 0x00000400u) {
      startproductdensity_ = from.startproductdensity_;
    }
    if (cached_has_bits & 0x00000800u) {
      startproducttcdensity_ = from.startproducttcdensity_;
    }
    if (cached_has_bits & 0x00001000u) {
      startullage_ = from.startullage_;
    }
    if (cached_has_bits & 0x00002000u) {
      starttemperature_ = from.starttemperature_;
    }
    if (cached_has_bits & 0x00004000u) {
      endproductlevel_ = from.endproductlevel_;
    }
    if (cached_has_bits & 0x00008000u) {
      endwaterlevel_ = from.endwaterlevel_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      endproductvolume_ = from.endproductvolume_;
    }
    if (cached_has_bits & 0x00020000u) {
      endwatervolume_ = from.endwatervolume_;
    }
    if (cached_has_bits & 0x00040000u) {
      endproducttcvolume_ = from.endproducttcvolume_;
    }
    if (cached_has_bits & 0x00080000u) {
      endproductdensity_ = from.endproductdensity_;
    }
    if (cached_has_bits & 0x00100000u) {
      endproducttcdensity_ = from.endproducttcdensity_;
    }
    if (cached_has_bits & 0x00200000u) {
      endullage_ = from.endullage_;
    }
    if (cached_has_bits & 0x00400000u) {
      totalsalevolume_ = from.totalsalevolume_;
    }
    if (cached_has_bits & 0x00800000u) {
      endtemperature_ = from.endtemperature_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      inventoryuid_ = from.inventoryuid_;
    }
    if (cached_has_bits & 0x02000000u) {
      tankstatus_ = from.tankstatus_;
    }
    if (cached_has_bits & 0x04000000u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ShiftEndInventory::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.ShiftEndInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShiftEndInventory::CopyFrom(const ShiftEndInventory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.ShiftEndInventory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShiftEndInventory::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ShiftEndInventory::InternalSwap(ShiftEndInventory* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ShiftEndInventory, status_)
      + sizeof(ShiftEndInventory::status_)
      - PROTOBUF_FIELD_OFFSET(ShiftEndInventory, shiftid_)>(
          reinterpret_cast<char*>(&shiftid_),
          reinterpret_cast<char*>(&other->shiftid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ShiftEndInventory::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PumpControl::InitAsDefaultInstance() {
}
class PumpControl::_Internal {
 public:
  using HasBits = decltype(std::declval<PumpControl>()._has_bits_);
  static void set_has_pumpuid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_controlid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_presettype(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_presetvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_presetmop(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_pumpmode(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_presetrefid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000e) ^ 0x0000000e) != 0;
  }
};

PumpControl::PumpControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.PumpControl)
}
PumpControl::PumpControl(const PumpControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  presetrefid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_presetrefid()) {
    presetrefid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_presetrefid(),
      GetArena());
  }
  ::memcpy(&pumpuid_, &from.pumpuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&pumpmode_) -
    reinterpret_cast<char*>(&pumpuid_)) + sizeof(pumpmode_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.PumpControl)
}

void PumpControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PumpControl_fccboscom_2eproto.base);
  presetrefid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&pumpuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&pumpmode_) -
      reinterpret_cast<char*>(&pumpuid_)) + sizeof(pumpmode_));
}

PumpControl::~PumpControl() {
  // @@protoc_insertion_point(destructor:fccboscom.PumpControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PumpControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  presetrefid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PumpControl::ArenaDtor(void* object) {
  PumpControl* _this = reinterpret_cast< PumpControl* >(object);
  (void)_this;
}
void PumpControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PumpControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PumpControl& PumpControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PumpControl_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void PumpControl::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.PumpControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    presetrefid_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x000000feu) {
    ::memset(&pumpuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&pumpmode_) -
        reinterpret_cast<char*>(&pumpuid_)) + sizeof(pumpmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PumpControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 pumpUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_pumpuid(&has_bits);
          pumpuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 nozzleId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 controlId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_controlid(&has_bits);
          controlid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 presetType = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_presettype(&has_bits);
          presettype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional float presetValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          _Internal::set_has_presetvalue(&has_bits);
          presetvalue_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // optional uint32 presetMop = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_presetmop(&has_bits);
          presetmop_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 pumpMode = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 56)) {
          _Internal::set_has_pumpmode(&has_bits);
          pumpmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string presetRefId = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_presetrefid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.PumpControl.presetRefId");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PumpControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.PumpControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 pumpUid = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_pumpuid(), target);
  }

  // required uint32 nozzleId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_nozzleid(), target);
  }

  // required uint32 controlId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_controlid(), target);
  }

  // optional uint32 presetType = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_presettype(), target);
  }

  // optional float presetValue = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_presetvalue(), target);
  }

  // optional uint32 presetMop = 6;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_presetmop(), target);
  }

  // optional uint32 pumpMode = 7;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_pumpmode(), target);
  }

  // optional string presetRefId = 8;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_presetrefid().data(), static_cast<int>(this->_internal_presetrefid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.PumpControl.presetRefId");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_presetrefid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.PumpControl)
  return target;
}

size_t PumpControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.PumpControl)
  size_t total_size = 0;

  if (_internal_has_pumpuid()) {
    // required uint32 pumpUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());
  }

  if (_internal_has_nozzleid()) {
    // required uint32 nozzleId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());
  }

  if (_internal_has_controlid()) {
    // required uint32 controlId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controlid());
  }

  return total_size;
}
size_t PumpControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.PumpControl)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000e) ^ 0x0000000e) == 0) {  // All required fields are present.
    // required uint32 pumpUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_pumpuid());

    // required uint32 nozzleId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());

    // required uint32 controlId = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controlid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string presetRefId = 8;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_presetrefid());
  }

  if (cached_has_bits & 0x000000f0u) {
    // optional uint32 presetType = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_presettype());
    }

    // optional float presetValue = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 + 4;
    }

    // optional uint32 presetMop = 6;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_presetmop());
    }

    // optional uint32 pumpMode = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_pumpmode());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PumpControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.PumpControl)
  GOOGLE_DCHECK_NE(&from, this);
  const PumpControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PumpControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.PumpControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.PumpControl)
    MergeFrom(*source);
  }
}

void PumpControl::MergeFrom(const PumpControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.PumpControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_presetrefid(from._internal_presetrefid());
    }
    if (cached_has_bits & 0x00000002u) {
      pumpuid_ = from.pumpuid_;
    }
    if (cached_has_bits & 0x00000004u) {
      nozzleid_ = from.nozzleid_;
    }
    if (cached_has_bits & 0x00000008u) {
      controlid_ = from.controlid_;
    }
    if (cached_has_bits & 0x00000010u) {
      presettype_ = from.presettype_;
    }
    if (cached_has_bits & 0x00000020u) {
      presetvalue_ = from.presetvalue_;
    }
    if (cached_has_bits & 0x00000040u) {
      presetmop_ = from.presetmop_;
    }
    if (cached_has_bits & 0x00000080u) {
      pumpmode_ = from.pumpmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PumpControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.PumpControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PumpControl::CopyFrom(const PumpControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.PumpControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PumpControl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PumpControl::InternalSwap(PumpControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  presetrefid_.Swap(&other->presetrefid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PumpControl, pumpmode_)
      + sizeof(PumpControl::pumpmode_)
      - PROTOBUF_FIELD_OFFSET(PumpControl, pumpuid_)>(
          reinterpret_cast<char*>(&pumpuid_),
          reinterpret_cast<char*>(&other->pumpuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PumpControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TankControl::InitAsDefaultInstance() {
}
class TankControl::_Internal {
 public:
  using HasBits = decltype(std::declval<TankControl>()._has_bits_);
  static void set_has_tankuid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_controlid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

TankControl::TankControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.TankControl)
}
TankControl::TankControl(const TankControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&tankuid_, &from.tankuid_,
    static_cast<size_t>(reinterpret_cast<char*>(&controlid_) -
    reinterpret_cast<char*>(&tankuid_)) + sizeof(controlid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.TankControl)
}

void TankControl::SharedCtor() {
  ::memset(&tankuid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&controlid_) -
      reinterpret_cast<char*>(&tankuid_)) + sizeof(controlid_));
}

TankControl::~TankControl() {
  // @@protoc_insertion_point(destructor:fccboscom.TankControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TankControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void TankControl::ArenaDtor(void* object) {
  TankControl* _this = reinterpret_cast< TankControl* >(object);
  (void)_this;
}
void TankControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TankControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TankControl& TankControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TankControl_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void TankControl::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.TankControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&tankuid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&controlid_) -
        reinterpret_cast<char*>(&tankuid_)) + sizeof(controlid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TankControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 tankUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_tankuid(&has_bits);
          tankuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 controlId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_controlid(&has_bits);
          controlid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TankControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.TankControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 tankUid = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_tankuid(), target);
  }

  // required uint32 controlId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_controlid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.TankControl)
  return target;
}

size_t TankControl::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.TankControl)
  size_t total_size = 0;

  if (_internal_has_tankuid()) {
    // required uint32 tankUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());
  }

  if (_internal_has_controlid()) {
    // required uint32 controlId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controlid());
  }

  return total_size;
}
size_t TankControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.TankControl)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required uint32 tankUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_tankuid());

    // required uint32 controlId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_controlid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TankControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.TankControl)
  GOOGLE_DCHECK_NE(&from, this);
  const TankControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TankControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.TankControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.TankControl)
    MergeFrom(*source);
  }
}

void TankControl::MergeFrom(const TankControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.TankControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      tankuid_ = from.tankuid_;
    }
    if (cached_has_bits & 0x00000002u) {
      controlid_ = from.controlid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TankControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.TankControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TankControl::CopyFrom(const TankControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.TankControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TankControl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TankControl::InternalSwap(TankControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TankControl, controlid_)
      + sizeof(TankControl::controlid_)
      - PROTOBUF_FIELD_OFFSET(TankControl, tankuid_)>(
          reinterpret_cast<char*>(&tankuid_),
          reinterpret_cast<char*>(&other->tankuid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TankControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ProductPriceChange::InitAsDefaultInstance() {
}
class ProductPriceChange::_Internal {
 public:
  using HasBits = decltype(std::declval<ProductPriceChange>()._has_bits_);
  static void set_has_priceidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_gradeuid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_graderate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_effectivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_updatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_updateflag(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_updateby(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_effectivetype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_enddatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000f1) ^ 0x000000f1) != 0;
  }
};

ProductPriceChange::ProductPriceChange(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.ProductPriceChange)
}
ProductPriceChange::ProductPriceChange(const ProductPriceChange& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  effectivetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effectivetime()) {
    effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effectivetime(),
      GetArena());
  }
  updatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updatetime()) {
    updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updatetime(),
      GetArena());
  }
  updateby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updateby()) {
    updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updateby(),
      GetArena());
  }
  effectivetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effectivetype()) {
    effectivetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effectivetype(),
      GetArena());
  }
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_enddatetime()) {
    enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_enddatetime(),
      GetArena());
  }
  ::memcpy(&priceidentifier_, &from.priceidentifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&priceidentifier_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.ProductPriceChange)
}

void ProductPriceChange::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_ProductPriceChange_fccboscom_2eproto.base);
  effectivetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectivetype_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&priceidentifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&priceidentifier_)) + sizeof(flag_));
}

ProductPriceChange::~ProductPriceChange() {
  // @@protoc_insertion_point(destructor:fccboscom.ProductPriceChange)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ProductPriceChange::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  effectivetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateby_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  effectivetype_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  enddatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ProductPriceChange::ArenaDtor(void* object) {
  ProductPriceChange* _this = reinterpret_cast< ProductPriceChange* >(object);
  (void)_this;
}
void ProductPriceChange::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ProductPriceChange::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ProductPriceChange& ProductPriceChange::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ProductPriceChange_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void ProductPriceChange::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.ProductPriceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      effectivetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      updatetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      updateby_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      effectivetype_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      enddatetime_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&priceidentifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&graderate_) -
        reinterpret_cast<char*>(&priceidentifier_)) + sizeof(graderate_));
  }
  if (cached_has_bits & 0x00000300u) {
    ::memset(&updateflag_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&updateflag_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ProductPriceChange::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 priceIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priceidentifier(&has_bits);
          priceidentifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 gradeUid = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_gradeuid(&has_bits);
          gradeuid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float gradeRate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          _Internal::set_has_graderate(&has_bits);
          graderate_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string effectiveTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_effectivetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ProductPriceChange.effectiveTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string updateTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_updatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ProductPriceChange.updateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 updateFlag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_updateflag(&has_bits);
          updateflag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string updateBy = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_updateby();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ProductPriceChange.updateBy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string effectiveType = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_effectivetype();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ProductPriceChange.effectiveType");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string endDatetime = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_enddatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.ProductPriceChange.endDatetime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flag = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 80)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ProductPriceChange::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.ProductPriceChange)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 priceIdentifier = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priceidentifier(), target);
  }

  // required uint32 gradeUid = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_gradeuid(), target);
  }

  // required float gradeRate = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_graderate(), target);
  }

  // required string effectiveTime = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effectivetime().data(), static_cast<int>(this->_internal_effectivetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ProductPriceChange.effectiveTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_effectivetime(), target);
  }

  // optional string updateTime = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updatetime().data(), static_cast<int>(this->_internal_updatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ProductPriceChange.updateTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_updatetime(), target);
  }

  // optional uint32 updateFlag = 6;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_updateflag(), target);
  }

  // optional string updateBy = 7;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updateby().data(), static_cast<int>(this->_internal_updateby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ProductPriceChange.updateBy");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_updateby(), target);
  }

  // optional string effectiveType = 8;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effectivetype().data(), static_cast<int>(this->_internal_effectivetype().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ProductPriceChange.effectiveType");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_effectivetype(), target);
  }

  // required string endDatetime = 9;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_enddatetime().data(), static_cast<int>(this->_internal_enddatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.ProductPriceChange.endDatetime");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_enddatetime(), target);
  }

  // optional uint32 flag = 10;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(10, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.ProductPriceChange)
  return target;
}

size_t ProductPriceChange::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.ProductPriceChange)
  size_t total_size = 0;

  if (_internal_has_effectivetime()) {
    // required string effectiveTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivetime());
  }

  if (_internal_has_enddatetime()) {
    // required string endDatetime = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enddatetime());
  }

  if (_internal_has_priceidentifier()) {
    // required uint32 priceIdentifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priceidentifier());
  }

  if (_internal_has_gradeuid()) {
    // required uint32 gradeUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gradeuid());
  }

  if (_internal_has_graderate()) {
    // required float gradeRate = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t ProductPriceChange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.ProductPriceChange)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000f1) ^ 0x000000f1) == 0) {  // All required fields are present.
    // required string effectiveTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivetime());

    // required string endDatetime = 9;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_enddatetime());

    // required uint32 priceIdentifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priceidentifier());

    // required uint32 gradeUid = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_gradeuid());

    // required float gradeRate = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000000eu) {
    // optional string updateTime = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_updatetime());
    }

    // optional string updateBy = 7;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_updateby());
    }

    // optional string effectiveType = 8;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_effectivetype());
    }

  }
  if (cached_has_bits & 0x00000300u) {
    // optional uint32 updateFlag = 6;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_updateflag());
    }

    // optional uint32 flag = 10;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_flag());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ProductPriceChange::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.ProductPriceChange)
  GOOGLE_DCHECK_NE(&from, this);
  const ProductPriceChange* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ProductPriceChange>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.ProductPriceChange)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.ProductPriceChange)
    MergeFrom(*source);
  }
}

void ProductPriceChange::MergeFrom(const ProductPriceChange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.ProductPriceChange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_effectivetime(from._internal_effectivetime());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_updatetime(from._internal_updatetime());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_updateby(from._internal_updateby());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_effectivetype(from._internal_effectivetype());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_enddatetime(from._internal_enddatetime());
    }
    if (cached_has_bits & 0x00000020u) {
      priceidentifier_ = from.priceidentifier_;
    }
    if (cached_has_bits & 0x00000040u) {
      gradeuid_ = from.gradeuid_;
    }
    if (cached_has_bits & 0x00000080u) {
      graderate_ = from.graderate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000300u) {
    if (cached_has_bits & 0x00000100u) {
      updateflag_ = from.updateflag_;
    }
    if (cached_has_bits & 0x00000200u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void ProductPriceChange::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.ProductPriceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProductPriceChange::CopyFrom(const ProductPriceChange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.ProductPriceChange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProductPriceChange::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void ProductPriceChange::InternalSwap(ProductPriceChange* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effectivetime_.Swap(&other->effectivetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updatetime_.Swap(&other->updatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updateby_.Swap(&other->updateby_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  effectivetype_.Swap(&other->effectivetype_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  enddatetime_.Swap(&other->enddatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ProductPriceChange, flag_)
      + sizeof(ProductPriceChange::flag_)
      - PROTOBUF_FIELD_OFFSET(ProductPriceChange, priceidentifier_)>(
          reinterpret_cast<char*>(&priceidentifier_),
          reinterpret_cast<char*>(&other->priceidentifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ProductPriceChange::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PriceChangeStatus::InitAsDefaultInstance() {
}
class PriceChangeStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<PriceChangeStatus>()._has_bits_);
  static void set_has_priceidentifier(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_productid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_productnewprice(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_effectivetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_flag(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000001f) ^ 0x0000001f) != 0;
  }
};

PriceChangeStatus::PriceChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.PriceChangeStatus)
}
PriceChangeStatus::PriceChangeStatus(const PriceChangeStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  effectivetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_effectivetime()) {
    effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_effectivetime(),
      GetArena());
  }
  ::memcpy(&priceidentifier_, &from.priceidentifier_,
    static_cast<size_t>(reinterpret_cast<char*>(&flag_) -
    reinterpret_cast<char*>(&priceidentifier_)) + sizeof(flag_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.PriceChangeStatus)
}

void PriceChangeStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PriceChangeStatus_fccboscom_2eproto.base);
  effectivetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&priceidentifier_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&flag_) -
      reinterpret_cast<char*>(&priceidentifier_)) + sizeof(flag_));
}

PriceChangeStatus::~PriceChangeStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.PriceChangeStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PriceChangeStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  effectivetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PriceChangeStatus::ArenaDtor(void* object) {
  PriceChangeStatus* _this = reinterpret_cast< PriceChangeStatus* >(object);
  (void)_this;
}
void PriceChangeStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PriceChangeStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PriceChangeStatus& PriceChangeStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PriceChangeStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void PriceChangeStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.PriceChangeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    effectivetime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000003eu) {
    ::memset(&priceidentifier_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&flag_) -
        reinterpret_cast<char*>(&priceidentifier_)) + sizeof(flag_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PriceChangeStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 priceIdentifier = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_priceidentifier(&has_bits);
          priceidentifier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 productId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_productid(&has_bits);
          productid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required float productNewPrice = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          _Internal::set_has_productnewprice(&has_bits);
          productnewprice_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // required string effectiveTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_effectivetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.PriceChangeStatus.effectiveTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 flag = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_flag(&has_bits);
          flag_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PriceChangeStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.PriceChangeStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 priceIdentifier = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_priceidentifier(), target);
  }

  // required uint32 productId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_productid(), target);
  }

  // required uint32 status = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // required float productNewPrice = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_productnewprice(), target);
  }

  // required string effectiveTime = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_effectivetime().data(), static_cast<int>(this->_internal_effectivetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.PriceChangeStatus.effectiveTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_effectivetime(), target);
  }

  // optional uint32 flag = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_flag(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.PriceChangeStatus)
  return target;
}

size_t PriceChangeStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.PriceChangeStatus)
  size_t total_size = 0;

  if (_internal_has_effectivetime()) {
    // required string effectiveTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivetime());
  }

  if (_internal_has_priceidentifier()) {
    // required uint32 priceIdentifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priceidentifier());
  }

  if (_internal_has_productid()) {
    // required uint32 productId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_productid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  if (_internal_has_productnewprice()) {
    // required float productNewPrice = 4;
    total_size += 1 + 4;
  }

  return total_size;
}
size_t PriceChangeStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.PriceChangeStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000001f) ^ 0x0000001f) == 0) {  // All required fields are present.
    // required string effectiveTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_effectivetime());

    // required uint32 priceIdentifier = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_priceidentifier());

    // required uint32 productId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_productid());

    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

    // required float productNewPrice = 4;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 flag = 6;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000020u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_flag());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PriceChangeStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.PriceChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const PriceChangeStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PriceChangeStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.PriceChangeStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.PriceChangeStatus)
    MergeFrom(*source);
  }
}

void PriceChangeStatus::MergeFrom(const PriceChangeStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.PriceChangeStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_effectivetime(from._internal_effectivetime());
    }
    if (cached_has_bits & 0x00000002u) {
      priceidentifier_ = from.priceidentifier_;
    }
    if (cached_has_bits & 0x00000004u) {
      productid_ = from.productid_;
    }
    if (cached_has_bits & 0x00000008u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000010u) {
      productnewprice_ = from.productnewprice_;
    }
    if (cached_has_bits & 0x00000020u) {
      flag_ = from.flag_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void PriceChangeStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.PriceChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PriceChangeStatus::CopyFrom(const PriceChangeStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.PriceChangeStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PriceChangeStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PriceChangeStatus::InternalSwap(PriceChangeStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  effectivetime_.Swap(&other->effectivetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PriceChangeStatus, flag_)
      + sizeof(PriceChangeStatus::flag_)
      - PROTOBUF_FIELD_OFFSET(PriceChangeStatus, priceidentifier_)>(
          reinterpret_cast<char*>(&priceidentifier_),
          reinterpret_cast<char*>(&other->priceidentifier_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PriceChangeStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OperationControl::InitAsDefaultInstance() {
}
class OperationControl::_Internal {
 public:
  using HasBits = decltype(std::declval<OperationControl>()._has_bits_);
  static void set_has_operationcontrolid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_operationmode(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_time(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_configkey(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_configvalue(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000008) ^ 0x00000008) != 0;
  }
};

OperationControl::OperationControl(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.OperationControl)
}
OperationControl::OperationControl(const OperationControl& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_time()) {
    time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_time(),
      GetArena());
  }
  configkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_configkey()) {
    configkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_configkey(),
      GetArena());
  }
  configvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_configvalue()) {
    configvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_configvalue(),
      GetArena());
  }
  ::memcpy(&operationcontrolid_, &from.operationcontrolid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operationmode_) -
    reinterpret_cast<char*>(&operationcontrolid_)) + sizeof(operationmode_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.OperationControl)
}

void OperationControl::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_OperationControl_fccboscom_2eproto.base);
  time_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configkey_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configvalue_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&operationcontrolid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operationmode_) -
      reinterpret_cast<char*>(&operationcontrolid_)) + sizeof(operationmode_));
}

OperationControl::~OperationControl() {
  // @@protoc_insertion_point(destructor:fccboscom.OperationControl)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OperationControl::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  time_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configkey_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  configvalue_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void OperationControl::ArenaDtor(void* object) {
  OperationControl* _this = reinterpret_cast< OperationControl* >(object);
  (void)_this;
}
void OperationControl::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OperationControl::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OperationControl& OperationControl::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OperationControl_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void OperationControl::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.OperationControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      time_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      configkey_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      configvalue_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00000018u) {
    ::memset(&operationcontrolid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operationmode_) -
        reinterpret_cast<char*>(&operationcontrolid_)) + sizeof(operationmode_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OperationControl::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 operationControlId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_operationcontrolid(&has_bits);
          operationcontrolid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 operationMode = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_operationmode(&has_bits);
          operationmode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string time = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_time();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.OperationControl.time");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string configKey = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_configkey();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.OperationControl.configKey");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string configValue = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_configvalue();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.OperationControl.configValue");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OperationControl::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.OperationControl)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 operationControlId = 1;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_operationcontrolid(), target);
  }

  // optional uint32 operationMode = 2;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_operationmode(), target);
  }

  // optional string time = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_time().data(), static_cast<int>(this->_internal_time().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.OperationControl.time");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_time(), target);
  }

  // optional string configKey = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_configkey().data(), static_cast<int>(this->_internal_configkey().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.OperationControl.configKey");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_configkey(), target);
  }

  // optional string configValue = 5;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_configvalue().data(), static_cast<int>(this->_internal_configvalue().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.OperationControl.configValue");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_configvalue(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.OperationControl)
  return target;
}

size_t OperationControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.OperationControl)
  size_t total_size = 0;

  // required uint32 operationControlId = 1;
  if (_internal_has_operationcontrolid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operationcontrolid());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string time = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_time());
    }

    // optional string configKey = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_configkey());
    }

    // optional string configValue = 5;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_configvalue());
    }

  }
  // optional uint32 operationMode = 2;
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operationmode());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OperationControl::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.OperationControl)
  GOOGLE_DCHECK_NE(&from, this);
  const OperationControl* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OperationControl>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.OperationControl)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.OperationControl)
    MergeFrom(*source);
  }
}

void OperationControl::MergeFrom(const OperationControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.OperationControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_time(from._internal_time());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_configkey(from._internal_configkey());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_configvalue(from._internal_configvalue());
    }
    if (cached_has_bits & 0x00000008u) {
      operationcontrolid_ = from.operationcontrolid_;
    }
    if (cached_has_bits & 0x00000010u) {
      operationmode_ = from.operationmode_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OperationControl::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.OperationControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperationControl::CopyFrom(const OperationControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.OperationControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperationControl::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OperationControl::InternalSwap(OperationControl* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  time_.Swap(&other->time_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  configkey_.Swap(&other->configkey_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  configvalue_.Swap(&other->configvalue_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OperationControl, operationmode_)
      + sizeof(OperationControl::operationmode_)
      - PROTOBUF_FIELD_OFFSET(OperationControl, operationcontrolid_)>(
          reinterpret_cast<char*>(&operationcontrolid_),
          reinterpret_cast<char*>(&other->operationcontrolid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OperationControl::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void TrxnMopUpdate::InitAsDefaultInstance() {
}
class TrxnMopUpdate::_Internal {
 public:
  using HasBits = decltype(std::declval<TrxnMopUpdate>()._has_bits_);
  static void set_has_trxnid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_moptype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_updatedate(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_updateby(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

TrxnMopUpdate::TrxnMopUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.TrxnMopUpdate)
}
TrxnMopUpdate::TrxnMopUpdate(const TrxnMopUpdate& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  updatedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updatedate()) {
    updatedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updatedate(),
      GetArena());
  }
  updateby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_updateby()) {
    updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_updateby(),
      GetArena());
  }
  ::memcpy(&trxnid_, &from.trxnid_,
    static_cast<size_t>(reinterpret_cast<char*>(&moptype_) -
    reinterpret_cast<char*>(&trxnid_)) + sizeof(moptype_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.TrxnMopUpdate)
}

void TrxnMopUpdate::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_TrxnMopUpdate_fccboscom_2eproto.base);
  updatedate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&trxnid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&moptype_) -
      reinterpret_cast<char*>(&trxnid_)) + sizeof(moptype_));
}

TrxnMopUpdate::~TrxnMopUpdate() {
  // @@protoc_insertion_point(destructor:fccboscom.TrxnMopUpdate)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void TrxnMopUpdate::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  updatedate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  updateby_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void TrxnMopUpdate::ArenaDtor(void* object) {
  TrxnMopUpdate* _this = reinterpret_cast< TrxnMopUpdate* >(object);
  (void)_this;
}
void TrxnMopUpdate::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void TrxnMopUpdate::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const TrxnMopUpdate& TrxnMopUpdate::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_TrxnMopUpdate_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void TrxnMopUpdate::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.TrxnMopUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      updatedate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      updateby_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    ::memset(&trxnid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&moptype_) -
        reinterpret_cast<char*>(&trxnid_)) + sizeof(moptype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TrxnMopUpdate::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 trxnId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_trxnid(&has_bits);
          trxnid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 mopType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_moptype(&has_bits);
          moptype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string updateDate = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_updatedate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.TrxnMopUpdate.updateDate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string updateBy = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_updateby();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.TrxnMopUpdate.updateBy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* TrxnMopUpdate::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.TrxnMopUpdate)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 trxnId = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_trxnid(), target);
  }

  // required uint32 mopType = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_moptype(), target);
  }

  // required string updateDate = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updatedate().data(), static_cast<int>(this->_internal_updatedate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.TrxnMopUpdate.updateDate");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_updatedate(), target);
  }

  // required string updateBy = 4;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_updateby().data(), static_cast<int>(this->_internal_updateby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.TrxnMopUpdate.updateBy");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_updateby(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.TrxnMopUpdate)
  return target;
}

size_t TrxnMopUpdate::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.TrxnMopUpdate)
  size_t total_size = 0;

  if (_internal_has_updatedate()) {
    // required string updateDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedate());
  }

  if (_internal_has_updateby()) {
    // required string updateBy = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updateby());
  }

  if (_internal_has_trxnid()) {
    // required uint32 trxnId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trxnid());
  }

  if (_internal_has_moptype()) {
    // required uint32 mopType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moptype());
  }

  return total_size;
}
size_t TrxnMopUpdate::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.TrxnMopUpdate)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string updateDate = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updatedate());

    // required string updateBy = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_updateby());

    // required uint32 trxnId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_trxnid());

    // required uint32 mopType = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_moptype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void TrxnMopUpdate::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.TrxnMopUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  const TrxnMopUpdate* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<TrxnMopUpdate>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.TrxnMopUpdate)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.TrxnMopUpdate)
    MergeFrom(*source);
  }
}

void TrxnMopUpdate::MergeFrom(const TrxnMopUpdate& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.TrxnMopUpdate)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_updatedate(from._internal_updatedate());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_updateby(from._internal_updateby());
    }
    if (cached_has_bits & 0x00000004u) {
      trxnid_ = from.trxnid_;
    }
    if (cached_has_bits & 0x00000008u) {
      moptype_ = from.moptype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void TrxnMopUpdate::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.TrxnMopUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TrxnMopUpdate::CopyFrom(const TrxnMopUpdate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.TrxnMopUpdate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TrxnMopUpdate::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void TrxnMopUpdate::InternalSwap(TrxnMopUpdate* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  updatedate_.Swap(&other->updatedate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  updateby_.Swap(&other->updateby_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TrxnMopUpdate, moptype_)
      + sizeof(TrxnMopUpdate::moptype_)
      - PROTOBUF_FIELD_OFFSET(TrxnMopUpdate, trxnid_)>(
          reinterpret_cast<char*>(&trxnid_),
          reinterpret_cast<char*>(&other->trxnid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TrxnMopUpdate::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void AlarmAck::InitAsDefaultInstance() {
}
class AlarmAck::_Internal {
 public:
  using HasBits = decltype(std::declval<AlarmAck>()._has_bits_);
  static void set_has_recorduid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_ackby(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_acktime(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

AlarmAck::AlarmAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.AlarmAck)
}
AlarmAck::AlarmAck(const AlarmAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ackby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_ackby()) {
    ackby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_ackby(),
      GetArena());
  }
  acktime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_acktime()) {
    acktime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_acktime(),
      GetArena());
  }
  recorduid_ = from.recorduid_;
  // @@protoc_insertion_point(copy_constructor:fccboscom.AlarmAck)
}

void AlarmAck::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_AlarmAck_fccboscom_2eproto.base);
  ackby_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acktime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  recorduid_ = 0u;
}

AlarmAck::~AlarmAck() {
  // @@protoc_insertion_point(destructor:fccboscom.AlarmAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void AlarmAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  ackby_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  acktime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void AlarmAck::ArenaDtor(void* object) {
  AlarmAck* _this = reinterpret_cast< AlarmAck* >(object);
  (void)_this;
}
void AlarmAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AlarmAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AlarmAck& AlarmAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_AlarmAck_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void AlarmAck::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.AlarmAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ackby_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      acktime_.ClearNonDefaultToEmpty();
    }
  }
  recorduid_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AlarmAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 recordUid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_recorduid(&has_bits);
          recorduid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ackBy = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_ackby();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmAck.ackBy");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string ackTime = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_acktime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.AlarmAck.ackTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* AlarmAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.AlarmAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 recordUid = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_recorduid(), target);
  }

  // required string ackBy = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_ackby().data(), static_cast<int>(this->_internal_ackby().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmAck.ackBy");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_ackby(), target);
  }

  // required string ackTime = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_acktime().data(), static_cast<int>(this->_internal_acktime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.AlarmAck.ackTime");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_acktime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.AlarmAck)
  return target;
}

size_t AlarmAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.AlarmAck)
  size_t total_size = 0;

  if (_internal_has_ackby()) {
    // required string ackBy = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ackby());
  }

  if (_internal_has_acktime()) {
    // required string ackTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acktime());
  }

  if (_internal_has_recorduid()) {
    // required uint32 recordUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());
  }

  return total_size;
}
size_t AlarmAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.AlarmAck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required string ackBy = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_ackby());

    // required string ackTime = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_acktime());

    // required uint32 recordUid = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recorduid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AlarmAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.AlarmAck)
  GOOGLE_DCHECK_NE(&from, this);
  const AlarmAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<AlarmAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.AlarmAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.AlarmAck)
    MergeFrom(*source);
  }
}

void AlarmAck::MergeFrom(const AlarmAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.AlarmAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_ackby(from._internal_ackby());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_acktime(from._internal_acktime());
    }
    if (cached_has_bits & 0x00000004u) {
      recorduid_ = from.recorduid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void AlarmAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.AlarmAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmAck::CopyFrom(const AlarmAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.AlarmAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void AlarmAck::InternalSwap(AlarmAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ackby_.Swap(&other->ackby_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  acktime_.Swap(&other->acktime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(recorduid_, other->recorduid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AlarmAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FccOperation::InitAsDefaultInstance() {
}
class FccOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<FccOperation>()._has_bits_);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

FccOperation::FccOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.FccOperation)
}
FccOperation::FccOperation(const FccOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_value()) {
    value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_value(),
      GetArena());
  }
  key_ = from.key_;
  // @@protoc_insertion_point(copy_constructor:fccboscom.FccOperation)
}

void FccOperation::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FccOperation_fccboscom_2eproto.base);
  value_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  key_ = 0u;
}

FccOperation::~FccOperation() {
  // @@protoc_insertion_point(destructor:fccboscom.FccOperation)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FccOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  value_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FccOperation::ArenaDtor(void* object) {
  FccOperation* _this = reinterpret_cast< FccOperation* >(object);
  (void)_this;
}
void FccOperation::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FccOperation::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FccOperation& FccOperation::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FccOperation_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void FccOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.FccOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    value_.ClearNonDefaultToEmpty();
  }
  key_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FccOperation::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_key(&has_bits);
          key_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string value = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_value();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.FccOperation.value");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FccOperation::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.FccOperation)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 key = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_key(), target);
  }

  // optional string value = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_value().data(), static_cast<int>(this->_internal_value().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.FccOperation.value");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.FccOperation)
  return target;
}

size_t FccOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.FccOperation)
  size_t total_size = 0;

  // required uint32 key = 1;
  if (_internal_has_key()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_key());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string value = 2;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_value());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FccOperation::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.FccOperation)
  GOOGLE_DCHECK_NE(&from, this);
  const FccOperation* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FccOperation>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.FccOperation)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.FccOperation)
    MergeFrom(*source);
  }
}

void FccOperation::MergeFrom(const FccOperation& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.FccOperation)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_value(from._internal_value());
    }
    if (cached_has_bits & 0x00000002u) {
      key_ = from.key_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FccOperation::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.FccOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FccOperation::CopyFrom(const FccOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.FccOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FccOperation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FccOperation::InternalSwap(FccOperation* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  value_.Swap(&other->value_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(key_, other->key_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FccOperation::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BosAck::InitAsDefaultInstance() {
}
class BosAck::_Internal {
 public:
  using HasBits = decltype(std::declval<BosAck>()._has_bits_);
  static void set_has_msgid(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_recid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

BosAck::BosAck(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.BosAck)
}
BosAck::BosAck(const BosAck& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&msgid_, &from.msgid_,
    static_cast<size_t>(reinterpret_cast<char*>(&operation_) -
    reinterpret_cast<char*>(&msgid_)) + sizeof(operation_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.BosAck)
}

void BosAck::SharedCtor() {
  ::memset(&msgid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&operation_) -
      reinterpret_cast<char*>(&msgid_)) + sizeof(operation_));
}

BosAck::~BosAck() {
  // @@protoc_insertion_point(destructor:fccboscom.BosAck)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BosAck::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void BosAck::ArenaDtor(void* object) {
  BosAck* _this = reinterpret_cast< BosAck* >(object);
  (void)_this;
}
void BosAck::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BosAck::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BosAck& BosAck::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BosAck_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void BosAck::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.BosAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&msgid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&operation_) -
        reinterpret_cast<char*>(&msgid_)) + sizeof(operation_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BosAck::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 msgId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_msgid(&has_bits);
          msgid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 recId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_recid(&has_bits);
          recid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 operation = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_operation(&has_bits);
          operation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BosAck::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.BosAck)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 msgId = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_msgid(), target);
  }

  // required uint32 recId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_recid(), target);
  }

  // required uint32 operation = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_operation(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.BosAck)
  return target;
}

size_t BosAck::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.BosAck)
  size_t total_size = 0;

  if (_internal_has_msgid()) {
    // required uint32 msgId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msgid());
  }

  if (_internal_has_recid()) {
    // required uint32 recId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recid());
  }

  if (_internal_has_operation()) {
    // required uint32 operation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());
  }

  return total_size;
}
size_t BosAck::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.BosAck)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 msgId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_msgid());

    // required uint32 recId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_recid());

    // required uint32 operation = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_operation());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BosAck::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.BosAck)
  GOOGLE_DCHECK_NE(&from, this);
  const BosAck* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BosAck>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.BosAck)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.BosAck)
    MergeFrom(*source);
  }
}

void BosAck::MergeFrom(const BosAck& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.BosAck)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      msgid_ = from.msgid_;
    }
    if (cached_has_bits & 0x00000002u) {
      recid_ = from.recid_;
    }
    if (cached_has_bits & 0x00000004u) {
      operation_ = from.operation_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BosAck::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.BosAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BosAck::CopyFrom(const BosAck& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.BosAck)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BosAck::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BosAck::InternalSwap(BosAck* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BosAck, operation_)
      + sizeof(BosAck::operation_)
      - PROTOBUF_FIELD_OFFSET(BosAck, msgid_)>(
          reinterpret_cast<char*>(&msgid_),
          reinterpret_cast<char*>(&other->msgid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BosAck::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void HeartBeat::InitAsDefaultInstance() {
}
class HeartBeat::_Internal {
 public:
  using HasBits = decltype(std::declval<HeartBeat>()._has_bits_);
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_timestamp(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000006) ^ 0x00000006) != 0;
  }
};

HeartBeat::HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.HeartBeat)
}
HeartBeat::HeartBeat(const HeartBeat& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_timestamp()) {
    timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_timestamp(),
      GetArena());
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&deviceid_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(deviceid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.HeartBeat)
}

void HeartBeat::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_HeartBeat_fccboscom_2eproto.base);
  timestamp_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&deviceid_) -
      reinterpret_cast<char*>(&devicetype_)) + sizeof(deviceid_));
}

HeartBeat::~HeartBeat() {
  // @@protoc_insertion_point(destructor:fccboscom.HeartBeat)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void HeartBeat::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  timestamp_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void HeartBeat::ArenaDtor(void* object) {
  HeartBeat* _this = reinterpret_cast< HeartBeat* >(object);
  (void)_this;
}
void HeartBeat::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void HeartBeat::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const HeartBeat& HeartBeat::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_HeartBeat_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void HeartBeat::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    timestamp_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&devicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&deviceid_) -
        reinterpret_cast<char*>(&devicetype_)) + sizeof(deviceid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* HeartBeat::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 deviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_devicetype(&has_bits);
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string timestamp = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_timestamp();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.HeartBeat.timestamp");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* HeartBeat::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.HeartBeat)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 deviceType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_devicetype(), target);
  }

  // required uint32 deviceId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // optional string timestamp = 3;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_timestamp().data(), static_cast<int>(this->_internal_timestamp().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.HeartBeat.timestamp");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_timestamp(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.HeartBeat)
  return target;
}

size_t HeartBeat::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.HeartBeat)
  size_t total_size = 0;

  if (_internal_has_devicetype()) {
    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());
  }

  if (_internal_has_deviceid()) {
    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  return total_size;
}
size_t HeartBeat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.HeartBeat)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000006) ^ 0x00000006) == 0) {  // All required fields are present.
    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());

    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional string timestamp = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_timestamp());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void HeartBeat::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  const HeartBeat* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<HeartBeat>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.HeartBeat)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.HeartBeat)
    MergeFrom(*source);
  }
}

void HeartBeat::MergeFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.HeartBeat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_timestamp(from._internal_timestamp());
    }
    if (cached_has_bits & 0x00000002u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      deviceid_ = from.deviceid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void HeartBeat::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeartBeat::CopyFrom(const HeartBeat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.HeartBeat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeartBeat::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void HeartBeat::InternalSwap(HeartBeat* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  timestamp_.Swap(&other->timestamp_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(HeartBeat, deviceid_)
      + sizeof(HeartBeat::deviceid_)
      - PROTOBUF_FIELD_OFFSET(HeartBeat, devicetype_)>(
          reinterpret_cast<char*>(&devicetype_),
          reinterpret_cast<char*>(&other->devicetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata HeartBeat::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void OtherDevice::InitAsDefaultInstance() {
}
class OtherDevice::_Internal {
 public:
  using HasBits = decltype(std::declval<OtherDevice>()._has_bits_);
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_swversion(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_hwversion(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_trxncount(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000007) ^ 0x00000007) != 0;
  }
};

OtherDevice::OtherDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.OtherDevice)
}
OtherDevice::OtherDevice(const OtherDevice& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&trxncount_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(trxncount_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.OtherDevice)
}

void OtherDevice::SharedCtor() {
  ::memset(&devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&trxncount_) -
      reinterpret_cast<char*>(&devicetype_)) + sizeof(trxncount_));
}

OtherDevice::~OtherDevice() {
  // @@protoc_insertion_point(destructor:fccboscom.OtherDevice)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void OtherDevice::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void OtherDevice::ArenaDtor(void* object) {
  OtherDevice* _this = reinterpret_cast< OtherDevice* >(object);
  (void)_this;
}
void OtherDevice::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void OtherDevice::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const OtherDevice& OtherDevice::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_OtherDevice_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void OtherDevice::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.OtherDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    ::memset(&devicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&trxncount_) -
        reinterpret_cast<char*>(&devicetype_)) + sizeof(trxncount_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* OtherDevice::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 deviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_devicetype(&has_bits);
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 swVersion = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_swversion(&has_bits);
          swversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 hwVersion = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_hwversion(&has_bits);
          hwversion_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 trxnCount = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 48)) {
          _Internal::set_has_trxncount(&has_bits);
          trxncount_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* OtherDevice::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.OtherDevice)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 deviceType = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_devicetype(), target);
  }

  // required uint32 deviceId = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // required uint32 status = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_status(), target);
  }

  // optional uint32 swVersion = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_swversion(), target);
  }

  // optional uint32 hwVersion = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(5, this->_internal_hwversion(), target);
  }

  // optional uint32 trxnCount = 6;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(6, this->_internal_trxncount(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.OtherDevice)
  return target;
}

size_t OtherDevice::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.OtherDevice)
  size_t total_size = 0;

  if (_internal_has_devicetype()) {
    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());
  }

  if (_internal_has_deviceid()) {
    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t OtherDevice::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.OtherDevice)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());

    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());

    // required uint32 status = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000038u) {
    // optional uint32 swVersion = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_swversion());
    }

    // optional uint32 hwVersion = 5;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_hwversion());
    }

    // optional uint32 trxnCount = 6;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
          this->_internal_trxncount());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void OtherDevice::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.OtherDevice)
  GOOGLE_DCHECK_NE(&from, this);
  const OtherDevice* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<OtherDevice>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.OtherDevice)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.OtherDevice)
    MergeFrom(*source);
  }
}

void OtherDevice::MergeFrom(const OtherDevice& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.OtherDevice)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000002u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000004u) {
      status_ = from.status_;
    }
    if (cached_has_bits & 0x00000008u) {
      swversion_ = from.swversion_;
    }
    if (cached_has_bits & 0x00000010u) {
      hwversion_ = from.hwversion_;
    }
    if (cached_has_bits & 0x00000020u) {
      trxncount_ = from.trxncount_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void OtherDevice::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.OtherDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherDevice::CopyFrom(const OtherDevice& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.OtherDevice)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherDevice::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void OtherDevice::InternalSwap(OtherDevice* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(OtherDevice, trxncount_)
      + sizeof(OtherDevice::trxncount_)
      - PROTOBUF_FIELD_OFFSET(OtherDevice, devicetype_)>(
          reinterpret_cast<char*>(&devicetype_),
          reinterpret_cast<char*>(&other->devicetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata OtherDevice::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DULogs::InitAsDefaultInstance() {
}
class DULogs::_Internal {
 public:
  using HasBits = decltype(std::declval<DULogs>()._has_bits_);
  static void set_has_logid(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_pumpno(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_nozzleno(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_productcode(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_logtrantype(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_paramdesc1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_paramdesc2(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_paramdesc3(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_param3(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_paramdesc4(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_param4(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_paramdesc5(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_param5(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_paramdesc6(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
  static void set_has_param6(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_paramdesc7(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static void set_has_param7(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static void set_has_paramdesc8(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_param8(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_paramdesc9(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_param9(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_paramdesc10(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_param10(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_paramdesc11(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_param11(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_paramdesc12(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_param12(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_createdate(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_logdatetime(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_logtypedesc(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0xf9000000) ^ 0xf9000000) != 0;
  }
};

DULogs::DULogs(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DULogs)
}
DULogs::DULogs(const DULogs& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  paramdesc1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc1()) {
    paramdesc1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc1(),
      GetArena());
  }
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param1()) {
    param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param1(),
      GetArena());
  }
  paramdesc2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc2()) {
    paramdesc2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc2(),
      GetArena());
  }
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param2()) {
    param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param2(),
      GetArena());
  }
  paramdesc3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc3()) {
    paramdesc3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc3(),
      GetArena());
  }
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param3()) {
    param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param3(),
      GetArena());
  }
  paramdesc4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc4()) {
    paramdesc4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc4(),
      GetArena());
  }
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param4()) {
    param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param4(),
      GetArena());
  }
  paramdesc5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc5()) {
    paramdesc5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc5(),
      GetArena());
  }
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param5()) {
    param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param5(),
      GetArena());
  }
  paramdesc6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc6()) {
    paramdesc6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc6(),
      GetArena());
  }
  param6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param6()) {
    param6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param6(),
      GetArena());
  }
  paramdesc7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc7()) {
    paramdesc7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc7(),
      GetArena());
  }
  param7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param7()) {
    param7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param7(),
      GetArena());
  }
  paramdesc8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc8()) {
    paramdesc8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc8(),
      GetArena());
  }
  param8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param8()) {
    param8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param8(),
      GetArena());
  }
  paramdesc9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc9()) {
    paramdesc9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc9(),
      GetArena());
  }
  param9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param9()) {
    param9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param9(),
      GetArena());
  }
  paramdesc10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc10()) {
    paramdesc10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc10(),
      GetArena());
  }
  param10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param10()) {
    param10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param10(),
      GetArena());
  }
  paramdesc11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc11()) {
    paramdesc11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc11(),
      GetArena());
  }
  param11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param11()) {
    param11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param11(),
      GetArena());
  }
  paramdesc12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_paramdesc12()) {
    paramdesc12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_paramdesc12(),
      GetArena());
  }
  param12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param12()) {
    param12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param12(),
      GetArena());
  }
  createdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_createdate()) {
    createdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_createdate(),
      GetArena());
  }
  logdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_logdatetime()) {
    logdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logdatetime(),
      GetArena());
  }
  logtypedesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_logtypedesc()) {
    logtypedesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_logtypedesc(),
      GetArena());
  }
  ::memcpy(&logid_, &from.logid_,
    static_cast<size_t>(reinterpret_cast<char*>(&logtrantype_) -
    reinterpret_cast<char*>(&logid_)) + sizeof(logtrantype_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DULogs)
}

void DULogs::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DULogs_fccboscom_2eproto.base);
  paramdesc1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param6_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param7_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param8_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param9_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param10_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param11_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param12_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdate_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdatetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logtypedesc_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&logid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&logtrantype_) -
      reinterpret_cast<char*>(&logid_)) + sizeof(logtrantype_));
}

DULogs::~DULogs() {
  // @@protoc_insertion_point(destructor:fccboscom.DULogs)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DULogs::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  paramdesc1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param6_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param7_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param8_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param9_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param10_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param11_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  paramdesc12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param12_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  createdate_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logdatetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  logtypedesc_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DULogs::ArenaDtor(void* object) {
  DULogs* _this = reinterpret_cast< DULogs* >(object);
  (void)_this;
}
void DULogs::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DULogs::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DULogs& DULogs::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DULogs_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DULogs::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DULogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      paramdesc1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      paramdesc2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      paramdesc3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      param3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      paramdesc4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000080u) {
      param4_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      paramdesc5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000200u) {
      param5_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000400u) {
      paramdesc6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000800u) {
      param6_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00001000u) {
      paramdesc7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00002000u) {
      param7_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00004000u) {
      paramdesc8_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00008000u) {
      param8_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      paramdesc9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00020000u) {
      param9_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00040000u) {
      paramdesc10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00080000u) {
      param10_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00100000u) {
      paramdesc11_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00200000u) {
      param11_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00400000u) {
      paramdesc12_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00800000u) {
      param12_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x07000000u) {
    if (cached_has_bits & 0x01000000u) {
      createdate_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x02000000u) {
      logdatetime_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x04000000u) {
      logtypedesc_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0xf8000000u) {
    ::memset(&logid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&logtrantype_) -
        reinterpret_cast<char*>(&logid_)) + sizeof(logtrantype_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DULogs::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 logId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_logid(&has_bits);
          logid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 pumpno = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_pumpno(&has_bits);
          pumpno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 nozzleno = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nozzleno(&has_bits);
          nozzleno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 productCode = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_productcode(&has_bits);
          productcode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 logTranType = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_logtrantype(&has_bits);
          logtrantype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc1 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_paramdesc1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param1 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_param1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc2 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_paramdesc2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param2 = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 74)) {
          auto str = _internal_mutable_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc3 = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 82)) {
          auto str = _internal_mutable_paramdesc3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param3 = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 90)) {
          auto str = _internal_mutable_param3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc4 = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 98)) {
          auto str = _internal_mutable_paramdesc4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param4 = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 106)) {
          auto str = _internal_mutable_param4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc5 = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 114)) {
          auto str = _internal_mutable_paramdesc5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param5 = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 122)) {
          auto str = _internal_mutable_param5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc6 = 16;
      case 16:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 130)) {
          auto str = _internal_mutable_paramdesc6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param6 = 17;
      case 17:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 138)) {
          auto str = _internal_mutable_param6();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param6");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc7 = 18;
      case 18:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 146)) {
          auto str = _internal_mutable_paramdesc7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param7 = 19;
      case 19:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 154)) {
          auto str = _internal_mutable_param7();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param7");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc8 = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 162)) {
          auto str = _internal_mutable_paramdesc8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param8 = 21;
      case 21:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 170)) {
          auto str = _internal_mutable_param8();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param8");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc9 = 22;
      case 22:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 178)) {
          auto str = _internal_mutable_paramdesc9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc9");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param9 = 23;
      case 23:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 186)) {
          auto str = _internal_mutable_param9();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param9");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc10 = 24;
      case 24:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 194)) {
          auto str = _internal_mutable_paramdesc10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc10");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param10 = 25;
      case 25:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 202)) {
          auto str = _internal_mutable_param10();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param10");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc11 = 26;
      case 26:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 210)) {
          auto str = _internal_mutable_paramdesc11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc11");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param11 = 27;
      case 27:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 218)) {
          auto str = _internal_mutable_param11();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param11");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string paramDesc12 = 28;
      case 28:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 226)) {
          auto str = _internal_mutable_paramdesc12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.paramDesc12");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param12 = 29;
      case 29:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 234)) {
          auto str = _internal_mutable_param12();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.param12");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string createDate = 30;
      case 30:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 242)) {
          auto str = _internal_mutable_createdate();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.createDate");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string logDatetime = 31;
      case 31:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 250)) {
          auto str = _internal_mutable_logdatetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.logDatetime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string logTypeDesc = 32;
      case 32:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 2)) {
          auto str = _internal_mutable_logtypedesc();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DULogs.logTypeDesc");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DULogs::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DULogs)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 logId = 1;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_logid(), target);
  }

  // required int32 pumpno = 2;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_pumpno(), target);
  }

  // required int32 nozzleno = 3;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_nozzleno(), target);
  }

  // required int32 productCode = 4;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_productcode(), target);
  }

  // required int32 logTranType = 5;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_logtrantype(), target);
  }

  // optional string paramDesc1 = 6;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc1().data(), static_cast<int>(this->_internal_paramdesc1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc1");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_paramdesc1(), target);
  }

  // optional string param1 = 7;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param1");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_param1(), target);
  }

  // optional string paramDesc2 = 8;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc2().data(), static_cast<int>(this->_internal_paramdesc2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc2");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_paramdesc2(), target);
  }

  // optional string param2 = 9;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param2");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_param2(), target);
  }

  // optional string paramDesc3 = 10;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc3().data(), static_cast<int>(this->_internal_paramdesc3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc3");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_paramdesc3(), target);
  }

  // optional string param3 = 11;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param3().data(), static_cast<int>(this->_internal_param3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param3");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_param3(), target);
  }

  // optional string paramDesc4 = 12;
  if (cached_has_bits & 0x00000040u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc4().data(), static_cast<int>(this->_internal_paramdesc4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc4");
    target = stream->WriteStringMaybeAliased(
        12, this->_internal_paramdesc4(), target);
  }

  // optional string param4 = 13;
  if (cached_has_bits & 0x00000080u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param4().data(), static_cast<int>(this->_internal_param4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param4");
    target = stream->WriteStringMaybeAliased(
        13, this->_internal_param4(), target);
  }

  // optional string paramDesc5 = 14;
  if (cached_has_bits & 0x00000100u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc5().data(), static_cast<int>(this->_internal_paramdesc5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc5");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_paramdesc5(), target);
  }

  // optional string param5 = 15;
  if (cached_has_bits & 0x00000200u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param5().data(), static_cast<int>(this->_internal_param5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param5");
    target = stream->WriteStringMaybeAliased(
        15, this->_internal_param5(), target);
  }

  // optional string paramDesc6 = 16;
  if (cached_has_bits & 0x00000400u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc6().data(), static_cast<int>(this->_internal_paramdesc6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc6");
    target = stream->WriteStringMaybeAliased(
        16, this->_internal_paramdesc6(), target);
  }

  // optional string param6 = 17;
  if (cached_has_bits & 0x00000800u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param6().data(), static_cast<int>(this->_internal_param6().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param6");
    target = stream->WriteStringMaybeAliased(
        17, this->_internal_param6(), target);
  }

  // optional string paramDesc7 = 18;
  if (cached_has_bits & 0x00001000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc7().data(), static_cast<int>(this->_internal_paramdesc7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc7");
    target = stream->WriteStringMaybeAliased(
        18, this->_internal_paramdesc7(), target);
  }

  // optional string param7 = 19;
  if (cached_has_bits & 0x00002000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param7().data(), static_cast<int>(this->_internal_param7().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param7");
    target = stream->WriteStringMaybeAliased(
        19, this->_internal_param7(), target);
  }

  // optional string paramDesc8 = 20;
  if (cached_has_bits & 0x00004000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc8().data(), static_cast<int>(this->_internal_paramdesc8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc8");
    target = stream->WriteStringMaybeAliased(
        20, this->_internal_paramdesc8(), target);
  }

  // optional string param8 = 21;
  if (cached_has_bits & 0x00008000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param8().data(), static_cast<int>(this->_internal_param8().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param8");
    target = stream->WriteStringMaybeAliased(
        21, this->_internal_param8(), target);
  }

  // optional string paramDesc9 = 22;
  if (cached_has_bits & 0x00010000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc9().data(), static_cast<int>(this->_internal_paramdesc9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc9");
    target = stream->WriteStringMaybeAliased(
        22, this->_internal_paramdesc9(), target);
  }

  // optional string param9 = 23;
  if (cached_has_bits & 0x00020000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param9().data(), static_cast<int>(this->_internal_param9().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param9");
    target = stream->WriteStringMaybeAliased(
        23, this->_internal_param9(), target);
  }

  // optional string paramDesc10 = 24;
  if (cached_has_bits & 0x00040000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc10().data(), static_cast<int>(this->_internal_paramdesc10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc10");
    target = stream->WriteStringMaybeAliased(
        24, this->_internal_paramdesc10(), target);
  }

  // optional string param10 = 25;
  if (cached_has_bits & 0x00080000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param10().data(), static_cast<int>(this->_internal_param10().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param10");
    target = stream->WriteStringMaybeAliased(
        25, this->_internal_param10(), target);
  }

  // optional string paramDesc11 = 26;
  if (cached_has_bits & 0x00100000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc11().data(), static_cast<int>(this->_internal_paramdesc11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc11");
    target = stream->WriteStringMaybeAliased(
        26, this->_internal_paramdesc11(), target);
  }

  // optional string param11 = 27;
  if (cached_has_bits & 0x00200000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param11().data(), static_cast<int>(this->_internal_param11().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param11");
    target = stream->WriteStringMaybeAliased(
        27, this->_internal_param11(), target);
  }

  // optional string paramDesc12 = 28;
  if (cached_has_bits & 0x00400000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_paramdesc12().data(), static_cast<int>(this->_internal_paramdesc12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.paramDesc12");
    target = stream->WriteStringMaybeAliased(
        28, this->_internal_paramdesc12(), target);
  }

  // optional string param12 = 29;
  if (cached_has_bits & 0x00800000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param12().data(), static_cast<int>(this->_internal_param12().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.param12");
    target = stream->WriteStringMaybeAliased(
        29, this->_internal_param12(), target);
  }

  // required string createDate = 30;
  if (cached_has_bits & 0x01000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_createdate().data(), static_cast<int>(this->_internal_createdate().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.createDate");
    target = stream->WriteStringMaybeAliased(
        30, this->_internal_createdate(), target);
  }

  // optional string logDatetime = 31;
  if (cached_has_bits & 0x02000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logdatetime().data(), static_cast<int>(this->_internal_logdatetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.logDatetime");
    target = stream->WriteStringMaybeAliased(
        31, this->_internal_logdatetime(), target);
  }

  // optional string logTypeDesc = 32;
  if (cached_has_bits & 0x04000000u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_logtypedesc().data(), static_cast<int>(this->_internal_logtypedesc().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DULogs.logTypeDesc");
    target = stream->WriteStringMaybeAliased(
        32, this->_internal_logtypedesc(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DULogs)
  return target;
}

size_t DULogs::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DULogs)
  size_t total_size = 0;

  if (_internal_has_createdate()) {
    // required string createDate = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdate());
  }

  if (_internal_has_logid()) {
    // required int32 logId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logid());
  }

  if (_internal_has_pumpno()) {
    // required int32 pumpno = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pumpno());
  }

  if (_internal_has_nozzleno()) {
    // required int32 nozzleno = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nozzleno());
  }

  if (_internal_has_productcode()) {
    // required int32 productCode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_productcode());
  }

  if (_internal_has_logtrantype()) {
    // required int32 logTranType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logtrantype());
  }

  return total_size;
}
size_t DULogs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DULogs)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0xf9000000) ^ 0xf9000000) == 0) {  // All required fields are present.
    // required string createDate = 30;
    total_size += 2 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_createdate());

    // required int32 logId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logid());

    // required int32 pumpno = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_pumpno());

    // required int32 nozzleno = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nozzleno());

    // required int32 productCode = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_productcode());

    // required int32 logTranType = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_logtrantype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string paramDesc1 = 6;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc1());
    }

    // optional string param1 = 7;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string paramDesc2 = 8;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc2());
    }

    // optional string param2 = 9;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional string paramDesc3 = 10;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc3());
    }

    // optional string param3 = 11;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param3());
    }

    // optional string paramDesc4 = 12;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc4());
    }

    // optional string param4 = 13;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param4());
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional string paramDesc5 = 14;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc5());
    }

    // optional string param5 = 15;
    if (cached_has_bits & 0x00000200u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param5());
    }

    // optional string paramDesc6 = 16;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc6());
    }

    // optional string param6 = 17;
    if (cached_has_bits & 0x00000800u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param6());
    }

    // optional string paramDesc7 = 18;
    if (cached_has_bits & 0x00001000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc7());
    }

    // optional string param7 = 19;
    if (cached_has_bits & 0x00002000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param7());
    }

    // optional string paramDesc8 = 20;
    if (cached_has_bits & 0x00004000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc8());
    }

    // optional string param8 = 21;
    if (cached_has_bits & 0x00008000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param8());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional string paramDesc9 = 22;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc9());
    }

    // optional string param9 = 23;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param9());
    }

    // optional string paramDesc10 = 24;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc10());
    }

    // optional string param10 = 25;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param10());
    }

    // optional string paramDesc11 = 26;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc11());
    }

    // optional string param11 = 27;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param11());
    }

    // optional string paramDesc12 = 28;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_paramdesc12());
    }

    // optional string param12 = 29;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param12());
    }

  }
  if (cached_has_bits & 0x06000000u) {
    // optional string logDatetime = 31;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logdatetime());
    }

    // optional string logTypeDesc = 32;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_logtypedesc());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DULogs::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DULogs)
  GOOGLE_DCHECK_NE(&from, this);
  const DULogs* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DULogs>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DULogs)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DULogs)
    MergeFrom(*source);
  }
}

void DULogs::MergeFrom(const DULogs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DULogs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_paramdesc1(from._internal_paramdesc1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_paramdesc2(from._internal_paramdesc2());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_paramdesc3(from._internal_paramdesc3());
    }
    if (cached_has_bits & 0x00000020u) {
      _internal_set_param3(from._internal_param3());
    }
    if (cached_has_bits & 0x00000040u) {
      _internal_set_paramdesc4(from._internal_paramdesc4());
    }
    if (cached_has_bits & 0x00000080u) {
      _internal_set_param4(from._internal_param4());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _internal_set_paramdesc5(from._internal_paramdesc5());
    }
    if (cached_has_bits & 0x00000200u) {
      _internal_set_param5(from._internal_param5());
    }
    if (cached_has_bits & 0x00000400u) {
      _internal_set_paramdesc6(from._internal_paramdesc6());
    }
    if (cached_has_bits & 0x00000800u) {
      _internal_set_param6(from._internal_param6());
    }
    if (cached_has_bits & 0x00001000u) {
      _internal_set_paramdesc7(from._internal_paramdesc7());
    }
    if (cached_has_bits & 0x00002000u) {
      _internal_set_param7(from._internal_param7());
    }
    if (cached_has_bits & 0x00004000u) {
      _internal_set_paramdesc8(from._internal_paramdesc8());
    }
    if (cached_has_bits & 0x00008000u) {
      _internal_set_param8(from._internal_param8());
    }
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _internal_set_paramdesc9(from._internal_paramdesc9());
    }
    if (cached_has_bits & 0x00020000u) {
      _internal_set_param9(from._internal_param9());
    }
    if (cached_has_bits & 0x00040000u) {
      _internal_set_paramdesc10(from._internal_paramdesc10());
    }
    if (cached_has_bits & 0x00080000u) {
      _internal_set_param10(from._internal_param10());
    }
    if (cached_has_bits & 0x00100000u) {
      _internal_set_paramdesc11(from._internal_paramdesc11());
    }
    if (cached_has_bits & 0x00200000u) {
      _internal_set_param11(from._internal_param11());
    }
    if (cached_has_bits & 0x00400000u) {
      _internal_set_paramdesc12(from._internal_paramdesc12());
    }
    if (cached_has_bits & 0x00800000u) {
      _internal_set_param12(from._internal_param12());
    }
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _internal_set_createdate(from._internal_createdate());
    }
    if (cached_has_bits & 0x02000000u) {
      _internal_set_logdatetime(from._internal_logdatetime());
    }
    if (cached_has_bits & 0x04000000u) {
      _internal_set_logtypedesc(from._internal_logtypedesc());
    }
    if (cached_has_bits & 0x08000000u) {
      logid_ = from.logid_;
    }
    if (cached_has_bits & 0x10000000u) {
      pumpno_ = from.pumpno_;
    }
    if (cached_has_bits & 0x20000000u) {
      nozzleno_ = from.nozzleno_;
    }
    if (cached_has_bits & 0x40000000u) {
      productcode_ = from.productcode_;
    }
    if (cached_has_bits & 0x80000000u) {
      logtrantype_ = from.logtrantype_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DULogs::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DULogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DULogs::CopyFrom(const DULogs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DULogs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DULogs::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DULogs::InternalSwap(DULogs* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  paramdesc1_.Swap(&other->paramdesc1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param1_.Swap(&other->param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc2_.Swap(&other->paramdesc2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param2_.Swap(&other->param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc3_.Swap(&other->paramdesc3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param3_.Swap(&other->param3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc4_.Swap(&other->paramdesc4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param4_.Swap(&other->param4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc5_.Swap(&other->paramdesc5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param5_.Swap(&other->param5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc6_.Swap(&other->paramdesc6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param6_.Swap(&other->param6_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc7_.Swap(&other->paramdesc7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param7_.Swap(&other->param7_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc8_.Swap(&other->paramdesc8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param8_.Swap(&other->param8_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc9_.Swap(&other->paramdesc9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param9_.Swap(&other->param9_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc10_.Swap(&other->paramdesc10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param10_.Swap(&other->param10_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc11_.Swap(&other->paramdesc11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param11_.Swap(&other->param11_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  paramdesc12_.Swap(&other->paramdesc12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param12_.Swap(&other->param12_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  createdate_.Swap(&other->createdate_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logdatetime_.Swap(&other->logdatetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  logtypedesc_.Swap(&other->logtypedesc_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DULogs, logtrantype_)
      + sizeof(DULogs::logtrantype_)
      - PROTOBUF_FIELD_OFFSET(DULogs, logid_)>(
          reinterpret_cast<char*>(&logid_),
          reinterpret_cast<char*>(&other->logid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DULogs::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BOSAlarm::InitAsDefaultInstance() {
}
class BOSAlarm::_Internal {
 public:
  using HasBits = decltype(std::declval<BOSAlarm>()._has_bits_);
  static void set_has_alarmid(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_alarmstate(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static void set_has_param1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_param2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_param3(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_param4(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_param5(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x000000e0) ^ 0x000000e0) != 0;
  }
};

BOSAlarm::BOSAlarm(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.BOSAlarm)
}
BOSAlarm::BOSAlarm(const BOSAlarm& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param1()) {
    param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param1(),
      GetArena());
  }
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param2()) {
    param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param2(),
      GetArena());
  }
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param3()) {
    param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param3(),
      GetArena());
  }
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param4()) {
    param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param4(),
      GetArena());
  }
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_param5()) {
    param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_param5(),
      GetArena());
  }
  ::memcpy(&alarmid_, &from.alarmid_,
    static_cast<size_t>(reinterpret_cast<char*>(&alarmstate_) -
    reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmstate_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.BOSAlarm)
}

void BOSAlarm::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BOSAlarm_fccboscom_2eproto.base);
  param1_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&alarmid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&alarmstate_) -
      reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmstate_));
}

BOSAlarm::~BOSAlarm() {
  // @@protoc_insertion_point(destructor:fccboscom.BOSAlarm)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BOSAlarm::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  param1_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param2_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param3_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param4_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  param5_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void BOSAlarm::ArenaDtor(void* object) {
  BOSAlarm* _this = reinterpret_cast< BOSAlarm* >(object);
  (void)_this;
}
void BOSAlarm::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BOSAlarm::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BOSAlarm& BOSAlarm::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BOSAlarm_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void BOSAlarm::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.BOSAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      param1_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      param2_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      param3_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      param4_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      param5_.ClearNonDefaultToEmpty();
    }
  }
  if (cached_has_bits & 0x000000e0u) {
    ::memset(&alarmid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&alarmstate_) -
        reinterpret_cast<char*>(&alarmid_)) + sizeof(alarmstate_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BOSAlarm::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 alarmId = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_alarmid(&has_bits);
          alarmid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 alarmState = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_alarmstate(&has_bits);
          alarmstate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param1 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_param1();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.BOSAlarm.param1");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param2 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_param2();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.BOSAlarm.param2");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param3 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 50)) {
          auto str = _internal_mutable_param3();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.BOSAlarm.param3");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param4 = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 58)) {
          auto str = _internal_mutable_param4();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.BOSAlarm.param4");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional string param5 = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 66)) {
          auto str = _internal_mutable_param5();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.BOSAlarm.param5");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BOSAlarm::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.BOSAlarm)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 alarmId = 1;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_alarmid(), target);
  }

  // required uint32 deviceId = 2;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // required uint32 alarmState = 3;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_alarmstate(), target);
  }

  // optional string param1 = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param1().data(), static_cast<int>(this->_internal_param1().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.BOSAlarm.param1");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_param1(), target);
  }

  // optional string param2 = 5;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param2().data(), static_cast<int>(this->_internal_param2().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.BOSAlarm.param2");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_param2(), target);
  }

  // optional string param3 = 6;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param3().data(), static_cast<int>(this->_internal_param3().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.BOSAlarm.param3");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_param3(), target);
  }

  // optional string param4 = 7;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param4().data(), static_cast<int>(this->_internal_param4().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.BOSAlarm.param4");
    target = stream->WriteStringMaybeAliased(
        7, this->_internal_param4(), target);
  }

  // optional string param5 = 8;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_param5().data(), static_cast<int>(this->_internal_param5().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.BOSAlarm.param5");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_param5(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.BOSAlarm)
  return target;
}

size_t BOSAlarm::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.BOSAlarm)
  size_t total_size = 0;

  if (_internal_has_alarmid()) {
    // required uint32 alarmId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmid());
  }

  if (_internal_has_deviceid()) {
    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  if (_internal_has_alarmstate()) {
    // required uint32 alarmState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmstate());
  }

  return total_size;
}
size_t BOSAlarm::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.BOSAlarm)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x000000e0) ^ 0x000000e0) == 0) {  // All required fields are present.
    // required uint32 alarmId = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmid());

    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());

    // required uint32 alarmState = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_alarmstate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    // optional string param1 = 4;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param1());
    }

    // optional string param2 = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param2());
    }

    // optional string param3 = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param3());
    }

    // optional string param4 = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param4());
    }

    // optional string param5 = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_param5());
    }

  }
  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BOSAlarm::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.BOSAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  const BOSAlarm* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BOSAlarm>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.BOSAlarm)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.BOSAlarm)
    MergeFrom(*source);
  }
}

void BOSAlarm::MergeFrom(const BOSAlarm& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.BOSAlarm)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_param1(from._internal_param1());
    }
    if (cached_has_bits & 0x00000002u) {
      _internal_set_param2(from._internal_param2());
    }
    if (cached_has_bits & 0x00000004u) {
      _internal_set_param3(from._internal_param3());
    }
    if (cached_has_bits & 0x00000008u) {
      _internal_set_param4(from._internal_param4());
    }
    if (cached_has_bits & 0x00000010u) {
      _internal_set_param5(from._internal_param5());
    }
    if (cached_has_bits & 0x00000020u) {
      alarmid_ = from.alarmid_;
    }
    if (cached_has_bits & 0x00000040u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000080u) {
      alarmstate_ = from.alarmstate_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void BOSAlarm::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.BOSAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BOSAlarm::CopyFrom(const BOSAlarm& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.BOSAlarm)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BOSAlarm::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void BOSAlarm::InternalSwap(BOSAlarm* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  param1_.Swap(&other->param1_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param2_.Swap(&other->param2_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param3_.Swap(&other->param3_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param4_.Swap(&other->param4_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  param5_.Swap(&other->param5_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BOSAlarm, alarmstate_)
      + sizeof(BOSAlarm::alarmstate_)
      - PROTOBUF_FIELD_OFFSET(BOSAlarm, alarmid_)>(
          reinterpret_cast<char*>(&alarmid_),
          reinterpret_cast<char*>(&other->alarmid_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BOSAlarm::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void FCCDoorStatus::InitAsDefaultInstance() {
}
class FCCDoorStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<FCCDoorStatus>()._has_bits_);
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_datetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000003) ^ 0x00000003) != 0;
  }
};

FCCDoorStatus::FCCDoorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.FCCDoorStatus)
}
FCCDoorStatus::FCCDoorStatus(const FCCDoorStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datetime()) {
    datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datetime(),
      GetArena());
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:fccboscom.FCCDoorStatus)
}

void FCCDoorStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_FCCDoorStatus_fccboscom_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  status_ = 0u;
}

FCCDoorStatus::~FCCDoorStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.FCCDoorStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void FCCDoorStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void FCCDoorStatus::ArenaDtor(void* object) {
  FCCDoorStatus* _this = reinterpret_cast< FCCDoorStatus* >(object);
  (void)_this;
}
void FCCDoorStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void FCCDoorStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const FCCDoorStatus& FCCDoorStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_FCCDoorStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void FCCDoorStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.FCCDoorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    datetime_.ClearNonDefaultToEmpty();
  }
  status_ = 0u;
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* FCCDoorStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 status = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dateTime = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.FCCDoorStatus.dateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* FCCDoorStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.FCCDoorStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 status = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_status(), target);
  }

  // required string dateTime = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.FCCDoorStatus.dateTime");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_datetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.FCCDoorStatus)
  return target;
}

size_t FCCDoorStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.FCCDoorStatus)
  size_t total_size = 0;

  if (_internal_has_datetime()) {
    // required string dateTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  if (_internal_has_status()) {
    // required uint32 status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t FCCDoorStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.FCCDoorStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required string dateTime = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());

    // required uint32 status = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void FCCDoorStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.FCCDoorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const FCCDoorStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<FCCDoorStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.FCCDoorStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.FCCDoorStatus)
    MergeFrom(*source);
  }
}

void FCCDoorStatus::MergeFrom(const FCCDoorStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.FCCDoorStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_datetime(from._internal_datetime());
    }
    if (cached_has_bits & 0x00000002u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void FCCDoorStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.FCCDoorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FCCDoorStatus::CopyFrom(const FCCDoorStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.FCCDoorStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FCCDoorStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void FCCDoorStatus::InternalSwap(FCCDoorStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  swap(status_, other->status_);
}

::PROTOBUF_NAMESPACE_ID::Metadata FCCDoorStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void InterlockStatus::InitAsDefaultInstance() {
}
class InterlockStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<InterlockStatus>()._has_bits_);
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_interlocktype(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_datetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x0000000f) ^ 0x0000000f) != 0;
  }
};

InterlockStatus::InterlockStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.InterlockStatus)
}
InterlockStatus::InterlockStatus(const InterlockStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datetime()) {
    datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datetime(),
      GetArena());
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&nozzleid_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(nozzleid_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.InterlockStatus)
}

void InterlockStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_InterlockStatus_fccboscom_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&nozzleid_) -
      reinterpret_cast<char*>(&devicetype_)) + sizeof(nozzleid_));
}

InterlockStatus::~InterlockStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.InterlockStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void InterlockStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void InterlockStatus::ArenaDtor(void* object) {
  InterlockStatus* _this = reinterpret_cast< InterlockStatus* >(object);
  (void)_this;
}
void InterlockStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void InterlockStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const InterlockStatus& InterlockStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_InterlockStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void InterlockStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.InterlockStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    datetime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&devicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&nozzleid_) -
        reinterpret_cast<char*>(&devicetype_)) + sizeof(nozzleid_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InterlockStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required int32 deviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_devicetype(&has_bits);
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required int32 interlockType = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_interlocktype(&has_bits);
          interlocktype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dateTime = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.InterlockStatus.dateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional int32 nozzleId = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 40)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* InterlockStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.InterlockStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required int32 deviceType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_devicetype(), target);
  }

  // required int32 deviceId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // required int32 interlockType = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_interlocktype(), target);
  }

  // required string dateTime = 4;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.InterlockStatus.dateTime");
    target = stream->WriteStringMaybeAliased(
        4, this->_internal_datetime(), target);
  }

  // optional int32 nozzleId = 5;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(5, this->_internal_nozzleid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.InterlockStatus)
  return target;
}

size_t InterlockStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.InterlockStatus)
  size_t total_size = 0;

  if (_internal_has_datetime()) {
    // required string dateTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  if (_internal_has_devicetype()) {
    // required int32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_devicetype());
  }

  if (_internal_has_deviceid()) {
    // required int32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deviceid());
  }

  if (_internal_has_interlocktype()) {
    // required int32 interlockType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interlocktype());
  }

  return total_size;
}
size_t InterlockStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.InterlockStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string dateTime = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());

    // required int32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_devicetype());

    // required int32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_deviceid());

    // required int32 interlockType = 3;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_interlocktype());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional int32 nozzleId = 5;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000010u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_nozzleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void InterlockStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.InterlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const InterlockStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<InterlockStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.InterlockStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.InterlockStatus)
    MergeFrom(*source);
  }
}

void InterlockStatus::MergeFrom(const InterlockStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.InterlockStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_datetime(from._internal_datetime());
    }
    if (cached_has_bits & 0x00000002u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      interlocktype_ = from.interlocktype_;
    }
    if (cached_has_bits & 0x00000010u) {
      nozzleid_ = from.nozzleid_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void InterlockStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.InterlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InterlockStatus::CopyFrom(const InterlockStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.InterlockStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InterlockStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void InterlockStatus::InternalSwap(InterlockStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InterlockStatus, nozzleid_)
      + sizeof(InterlockStatus::nozzleid_)
      - PROTOBUF_FIELD_OFFSET(InterlockStatus, devicetype_)>(
          reinterpret_cast<char*>(&devicetype_),
          reinterpret_cast<char*>(&other->devicetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata InterlockStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DeviceStatus::InitAsDefaultInstance() {
}
class DeviceStatus::_Internal {
 public:
  using HasBits = decltype(std::declval<DeviceStatus>()._has_bits_);
  static void set_has_devicetype(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_deviceid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_nozzleid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_status(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_datetime(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000017) ^ 0x00000017) != 0;
  }
};

DeviceStatus::DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.DeviceStatus)
}
DeviceStatus::DeviceStatus(const DeviceStatus& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_datetime()) {
    datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_datetime(),
      GetArena());
  }
  ::memcpy(&devicetype_, &from.devicetype_,
    static_cast<size_t>(reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&devicetype_)) + sizeof(status_));
  // @@protoc_insertion_point(copy_constructor:fccboscom.DeviceStatus)
}

void DeviceStatus::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_DeviceStatus_fccboscom_2eproto.base);
  datetime_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&devicetype_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&status_) -
      reinterpret_cast<char*>(&devicetype_)) + sizeof(status_));
}

DeviceStatus::~DeviceStatus() {
  // @@protoc_insertion_point(destructor:fccboscom.DeviceStatus)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DeviceStatus::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  datetime_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void DeviceStatus::ArenaDtor(void* object) {
  DeviceStatus* _this = reinterpret_cast< DeviceStatus* >(object);
  (void)_this;
}
void DeviceStatus::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DeviceStatus::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceStatus& DeviceStatus::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DeviceStatus_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void DeviceStatus::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    datetime_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x0000001eu) {
    ::memset(&devicetype_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&status_) -
        reinterpret_cast<char*>(&devicetype_)) + sizeof(status_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DeviceStatus::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required uint32 deviceType = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          _Internal::set_has_devicetype(&has_bits);
          devicetype_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 deviceId = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          _Internal::set_has_deviceid(&has_bits);
          deviceid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // optional uint32 nozzleId = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          _Internal::set_has_nozzleid(&has_bits);
          nozzleid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required uint32 status = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          _Internal::set_has_status(&has_bits);
          status_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // required string dateTime = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 42)) {
          auto str = _internal_mutable_datetime();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.DeviceStatus.dateTime");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DeviceStatus::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.DeviceStatus)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required uint32 deviceType = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_devicetype(), target);
  }

  // required uint32 deviceId = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_deviceid(), target);
  }

  // optional uint32 nozzleId = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_nozzleid(), target);
  }

  // required uint32 status = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_status(), target);
  }

  // required string dateTime = 5;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_datetime().data(), static_cast<int>(this->_internal_datetime().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.DeviceStatus.dateTime");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_datetime(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.DeviceStatus)
  return target;
}

size_t DeviceStatus::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:fccboscom.DeviceStatus)
  size_t total_size = 0;

  if (_internal_has_datetime()) {
    // required string dateTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());
  }

  if (_internal_has_devicetype()) {
    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());
  }

  if (_internal_has_deviceid()) {
    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());
  }

  if (_internal_has_status()) {
    // required uint32 status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());
  }

  return total_size;
}
size_t DeviceStatus::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.DeviceStatus)
  size_t total_size = 0;

  if (((_has_bits_[0] & 0x00000017) ^ 0x00000017) == 0) {  // All required fields are present.
    // required string dateTime = 5;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_datetime());

    // required uint32 deviceType = 1;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_devicetype());

    // required uint32 deviceId = 2;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_deviceid());

    // required uint32 status = 4;
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_status());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional uint32 nozzleId = 3;
  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000008u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_nozzleid());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceStatus::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  const DeviceStatus* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DeviceStatus>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.DeviceStatus)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.DeviceStatus)
    MergeFrom(*source);
  }
}

void DeviceStatus::MergeFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.DeviceStatus)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      _internal_set_datetime(from._internal_datetime());
    }
    if (cached_has_bits & 0x00000002u) {
      devicetype_ = from.devicetype_;
    }
    if (cached_has_bits & 0x00000004u) {
      deviceid_ = from.deviceid_;
    }
    if (cached_has_bits & 0x00000008u) {
      nozzleid_ = from.nozzleid_;
    }
    if (cached_has_bits & 0x00000010u) {
      status_ = from.status_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void DeviceStatus::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceStatus::CopyFrom(const DeviceStatus& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.DeviceStatus)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceStatus::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void DeviceStatus::InternalSwap(DeviceStatus* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  datetime_.Swap(&other->datetime_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DeviceStatus, status_)
      + sizeof(DeviceStatus::status_)
      - PROTOBUF_FIELD_OFFSET(DeviceStatus, devicetype_)>(
          reinterpret_cast<char*>(&devicetype_),
          reinterpret_cast<char*>(&other->devicetype_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DeviceStatus::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void PromotionalMsg::InitAsDefaultInstance() {
}
class PromotionalMsg::_Internal {
 public:
  using HasBits = decltype(std::declval<PromotionalMsg>()._has_bits_);
  static void set_has_message(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

PromotionalMsg::PromotionalMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:fccboscom.PromotionalMsg)
}
PromotionalMsg::PromotionalMsg(const PromotionalMsg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (from._internal_has_message()) {
    message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_message(),
      GetArena());
  }
  // @@protoc_insertion_point(copy_constructor:fccboscom.PromotionalMsg)
}

void PromotionalMsg::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_PromotionalMsg_fccboscom_2eproto.base);
  message_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

PromotionalMsg::~PromotionalMsg() {
  // @@protoc_insertion_point(destructor:fccboscom.PromotionalMsg)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void PromotionalMsg::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  message_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PromotionalMsg::ArenaDtor(void* object) {
  PromotionalMsg* _this = reinterpret_cast< PromotionalMsg* >(object);
  (void)_this;
}
void PromotionalMsg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PromotionalMsg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const PromotionalMsg& PromotionalMsg::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_PromotionalMsg_fccboscom_2eproto.base);
  return *internal_default_instance();
}


void PromotionalMsg::Clear() {
// @@protoc_insertion_point(message_clear_start:fccboscom.PromotionalMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    message_.ClearNonDefaultToEmpty();
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PromotionalMsg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // required string message = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_message();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          #ifndef NDEBUG
          ::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "fccboscom.PromotionalMsg.message");
          #endif  // !NDEBUG
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  _has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* PromotionalMsg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:fccboscom.PromotionalMsg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required string message = 1;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_message().data(), static_cast<int>(this->_internal_message().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "fccboscom.PromotionalMsg.message");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_message(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:fccboscom.PromotionalMsg)
  return target;
}

size_t PromotionalMsg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:fccboscom.PromotionalMsg)
  size_t total_size = 0;

  // required string message = 1;
  if (_internal_has_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_message());
  }
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void PromotionalMsg::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:fccboscom.PromotionalMsg)
  GOOGLE_DCHECK_NE(&from, this);
  const PromotionalMsg* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<PromotionalMsg>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:fccboscom.PromotionalMsg)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:fccboscom.PromotionalMsg)
    MergeFrom(*source);
  }
}

void PromotionalMsg::MergeFrom(const PromotionalMsg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:fccboscom.PromotionalMsg)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_has_message()) {
    _internal_set_message(from._internal_message());
  }
}

void PromotionalMsg::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:fccboscom.PromotionalMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PromotionalMsg::CopyFrom(const PromotionalMsg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:fccboscom.PromotionalMsg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PromotionalMsg::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_has_bits_)) return false;
  return true;
}

void PromotionalMsg::InternalSwap(PromotionalMsg* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  message_.Swap(&other->message_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}

::PROTOBUF_NAMESPACE_ID::Metadata PromotionalMsg::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace fccboscom
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::fccboscom::RoData* Arena::CreateMaybeMessage< ::fccboscom::RoData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::RoData >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DbConf* Arena::CreateMaybeMessage< ::fccboscom::DbConf >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DbConf >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DataModule* Arena::CreateMaybeMessage< ::fccboscom::DataModule >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DataModule >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::TankStatus* Arena::CreateMaybeMessage< ::fccboscom::TankStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::TankStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::PumpStatus* Arena::CreateMaybeMessage< ::fccboscom::PumpStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::PumpStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::UpsStatus* Arena::CreateMaybeMessage< ::fccboscom::UpsStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::UpsStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::PumpTrxn* Arena::CreateMaybeMessage< ::fccboscom::PumpTrxn >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::PumpTrxn >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::TankInventory* Arena::CreateMaybeMessage< ::fccboscom::TankInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::TankInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::TankDelivery* Arena::CreateMaybeMessage< ::fccboscom::TankDelivery >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::TankDelivery >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DeliveryReceipt* Arena::CreateMaybeMessage< ::fccboscom::DeliveryReceipt >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DeliveryReceipt >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::AlarmDetails* Arena::CreateMaybeMessage< ::fccboscom::AlarmDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::AlarmDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DayEndDetails* Arena::CreateMaybeMessage< ::fccboscom::DayEndDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DayEndDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DayEndTotalizer* Arena::CreateMaybeMessage< ::fccboscom::DayEndTotalizer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DayEndTotalizer >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DayEndInventory* Arena::CreateMaybeMessage< ::fccboscom::DayEndInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DayEndInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::ShiftEndDetails* Arena::CreateMaybeMessage< ::fccboscom::ShiftEndDetails >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::ShiftEndDetails >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::ShiftEndTotalizer* Arena::CreateMaybeMessage< ::fccboscom::ShiftEndTotalizer >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::ShiftEndTotalizer >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::ShiftEndInventory* Arena::CreateMaybeMessage< ::fccboscom::ShiftEndInventory >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::ShiftEndInventory >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::PumpControl* Arena::CreateMaybeMessage< ::fccboscom::PumpControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::PumpControl >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::TankControl* Arena::CreateMaybeMessage< ::fccboscom::TankControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::TankControl >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::ProductPriceChange* Arena::CreateMaybeMessage< ::fccboscom::ProductPriceChange >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::ProductPriceChange >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::PriceChangeStatus* Arena::CreateMaybeMessage< ::fccboscom::PriceChangeStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::PriceChangeStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::OperationControl* Arena::CreateMaybeMessage< ::fccboscom::OperationControl >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::OperationControl >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::TrxnMopUpdate* Arena::CreateMaybeMessage< ::fccboscom::TrxnMopUpdate >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::TrxnMopUpdate >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::AlarmAck* Arena::CreateMaybeMessage< ::fccboscom::AlarmAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::AlarmAck >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::FccOperation* Arena::CreateMaybeMessage< ::fccboscom::FccOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::FccOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::BosAck* Arena::CreateMaybeMessage< ::fccboscom::BosAck >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::BosAck >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::HeartBeat* Arena::CreateMaybeMessage< ::fccboscom::HeartBeat >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::HeartBeat >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::OtherDevice* Arena::CreateMaybeMessage< ::fccboscom::OtherDevice >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::OtherDevice >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DULogs* Arena::CreateMaybeMessage< ::fccboscom::DULogs >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DULogs >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::BOSAlarm* Arena::CreateMaybeMessage< ::fccboscom::BOSAlarm >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::BOSAlarm >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::FCCDoorStatus* Arena::CreateMaybeMessage< ::fccboscom::FCCDoorStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::FCCDoorStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::InterlockStatus* Arena::CreateMaybeMessage< ::fccboscom::InterlockStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::InterlockStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::DeviceStatus* Arena::CreateMaybeMessage< ::fccboscom::DeviceStatus >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::DeviceStatus >(arena);
}
template<> PROTOBUF_NOINLINE ::fccboscom::PromotionalMsg* Arena::CreateMaybeMessage< ::fccboscom::PromotionalMsg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::fccboscom::PromotionalMsg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
