// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: fccboscom.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_fccboscom_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_fccboscom_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_fccboscom_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_fccboscom_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[34]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_fccboscom_2eproto;
namespace fccboscom {
class AlarmAck;
class AlarmAckDefaultTypeInternal;
extern AlarmAckDefaultTypeInternal _AlarmAck_default_instance_;
class AlarmDetails;
class AlarmDetailsDefaultTypeInternal;
extern AlarmDetailsDefaultTypeInternal _AlarmDetails_default_instance_;
class BOSAlarm;
class BOSAlarmDefaultTypeInternal;
extern BOSAlarmDefaultTypeInternal _BOSAlarm_default_instance_;
class BosAck;
class BosAckDefaultTypeInternal;
extern BosAckDefaultTypeInternal _BosAck_default_instance_;
class DULogs;
class DULogsDefaultTypeInternal;
extern DULogsDefaultTypeInternal _DULogs_default_instance_;
class DataModule;
class DataModuleDefaultTypeInternal;
extern DataModuleDefaultTypeInternal _DataModule_default_instance_;
class DayEndDetails;
class DayEndDetailsDefaultTypeInternal;
extern DayEndDetailsDefaultTypeInternal _DayEndDetails_default_instance_;
class DayEndInventory;
class DayEndInventoryDefaultTypeInternal;
extern DayEndInventoryDefaultTypeInternal _DayEndInventory_default_instance_;
class DayEndTotalizer;
class DayEndTotalizerDefaultTypeInternal;
extern DayEndTotalizerDefaultTypeInternal _DayEndTotalizer_default_instance_;
class DbConf;
class DbConfDefaultTypeInternal;
extern DbConfDefaultTypeInternal _DbConf_default_instance_;
class DeliveryReceipt;
class DeliveryReceiptDefaultTypeInternal;
extern DeliveryReceiptDefaultTypeInternal _DeliveryReceipt_default_instance_;
class DeviceStatus;
class DeviceStatusDefaultTypeInternal;
extern DeviceStatusDefaultTypeInternal _DeviceStatus_default_instance_;
class FCCDoorStatus;
class FCCDoorStatusDefaultTypeInternal;
extern FCCDoorStatusDefaultTypeInternal _FCCDoorStatus_default_instance_;
class FccOperation;
class FccOperationDefaultTypeInternal;
extern FccOperationDefaultTypeInternal _FccOperation_default_instance_;
class HeartBeat;
class HeartBeatDefaultTypeInternal;
extern HeartBeatDefaultTypeInternal _HeartBeat_default_instance_;
class InterlockStatus;
class InterlockStatusDefaultTypeInternal;
extern InterlockStatusDefaultTypeInternal _InterlockStatus_default_instance_;
class OperationControl;
class OperationControlDefaultTypeInternal;
extern OperationControlDefaultTypeInternal _OperationControl_default_instance_;
class OtherDevice;
class OtherDeviceDefaultTypeInternal;
extern OtherDeviceDefaultTypeInternal _OtherDevice_default_instance_;
class PriceChangeStatus;
class PriceChangeStatusDefaultTypeInternal;
extern PriceChangeStatusDefaultTypeInternal _PriceChangeStatus_default_instance_;
class ProductPriceChange;
class ProductPriceChangeDefaultTypeInternal;
extern ProductPriceChangeDefaultTypeInternal _ProductPriceChange_default_instance_;
class PromotionalMsg;
class PromotionalMsgDefaultTypeInternal;
extern PromotionalMsgDefaultTypeInternal _PromotionalMsg_default_instance_;
class PumpControl;
class PumpControlDefaultTypeInternal;
extern PumpControlDefaultTypeInternal _PumpControl_default_instance_;
class PumpStatus;
class PumpStatusDefaultTypeInternal;
extern PumpStatusDefaultTypeInternal _PumpStatus_default_instance_;
class PumpTrxn;
class PumpTrxnDefaultTypeInternal;
extern PumpTrxnDefaultTypeInternal _PumpTrxn_default_instance_;
class RoData;
class RoDataDefaultTypeInternal;
extern RoDataDefaultTypeInternal _RoData_default_instance_;
class ShiftEndDetails;
class ShiftEndDetailsDefaultTypeInternal;
extern ShiftEndDetailsDefaultTypeInternal _ShiftEndDetails_default_instance_;
class ShiftEndInventory;
class ShiftEndInventoryDefaultTypeInternal;
extern ShiftEndInventoryDefaultTypeInternal _ShiftEndInventory_default_instance_;
class ShiftEndTotalizer;
class ShiftEndTotalizerDefaultTypeInternal;
extern ShiftEndTotalizerDefaultTypeInternal _ShiftEndTotalizer_default_instance_;
class TankControl;
class TankControlDefaultTypeInternal;
extern TankControlDefaultTypeInternal _TankControl_default_instance_;
class TankDelivery;
class TankDeliveryDefaultTypeInternal;
extern TankDeliveryDefaultTypeInternal _TankDelivery_default_instance_;
class TankInventory;
class TankInventoryDefaultTypeInternal;
extern TankInventoryDefaultTypeInternal _TankInventory_default_instance_;
class TankStatus;
class TankStatusDefaultTypeInternal;
extern TankStatusDefaultTypeInternal _TankStatus_default_instance_;
class TrxnMopUpdate;
class TrxnMopUpdateDefaultTypeInternal;
extern TrxnMopUpdateDefaultTypeInternal _TrxnMopUpdate_default_instance_;
class UpsStatus;
class UpsStatusDefaultTypeInternal;
extern UpsStatusDefaultTypeInternal _UpsStatus_default_instance_;
}  // namespace fccboscom
PROTOBUF_NAMESPACE_OPEN
template<> ::fccboscom::AlarmAck* Arena::CreateMaybeMessage<::fccboscom::AlarmAck>(Arena*);
template<> ::fccboscom::AlarmDetails* Arena::CreateMaybeMessage<::fccboscom::AlarmDetails>(Arena*);
template<> ::fccboscom::BOSAlarm* Arena::CreateMaybeMessage<::fccboscom::BOSAlarm>(Arena*);
template<> ::fccboscom::BosAck* Arena::CreateMaybeMessage<::fccboscom::BosAck>(Arena*);
template<> ::fccboscom::DULogs* Arena::CreateMaybeMessage<::fccboscom::DULogs>(Arena*);
template<> ::fccboscom::DataModule* Arena::CreateMaybeMessage<::fccboscom::DataModule>(Arena*);
template<> ::fccboscom::DayEndDetails* Arena::CreateMaybeMessage<::fccboscom::DayEndDetails>(Arena*);
template<> ::fccboscom::DayEndInventory* Arena::CreateMaybeMessage<::fccboscom::DayEndInventory>(Arena*);
template<> ::fccboscom::DayEndTotalizer* Arena::CreateMaybeMessage<::fccboscom::DayEndTotalizer>(Arena*);
template<> ::fccboscom::DbConf* Arena::CreateMaybeMessage<::fccboscom::DbConf>(Arena*);
template<> ::fccboscom::DeliveryReceipt* Arena::CreateMaybeMessage<::fccboscom::DeliveryReceipt>(Arena*);
template<> ::fccboscom::DeviceStatus* Arena::CreateMaybeMessage<::fccboscom::DeviceStatus>(Arena*);
template<> ::fccboscom::FCCDoorStatus* Arena::CreateMaybeMessage<::fccboscom::FCCDoorStatus>(Arena*);
template<> ::fccboscom::FccOperation* Arena::CreateMaybeMessage<::fccboscom::FccOperation>(Arena*);
template<> ::fccboscom::HeartBeat* Arena::CreateMaybeMessage<::fccboscom::HeartBeat>(Arena*);
template<> ::fccboscom::InterlockStatus* Arena::CreateMaybeMessage<::fccboscom::InterlockStatus>(Arena*);
template<> ::fccboscom::OperationControl* Arena::CreateMaybeMessage<::fccboscom::OperationControl>(Arena*);
template<> ::fccboscom::OtherDevice* Arena::CreateMaybeMessage<::fccboscom::OtherDevice>(Arena*);
template<> ::fccboscom::PriceChangeStatus* Arena::CreateMaybeMessage<::fccboscom::PriceChangeStatus>(Arena*);
template<> ::fccboscom::ProductPriceChange* Arena::CreateMaybeMessage<::fccboscom::ProductPriceChange>(Arena*);
template<> ::fccboscom::PromotionalMsg* Arena::CreateMaybeMessage<::fccboscom::PromotionalMsg>(Arena*);
template<> ::fccboscom::PumpControl* Arena::CreateMaybeMessage<::fccboscom::PumpControl>(Arena*);
template<> ::fccboscom::PumpStatus* Arena::CreateMaybeMessage<::fccboscom::PumpStatus>(Arena*);
template<> ::fccboscom::PumpTrxn* Arena::CreateMaybeMessage<::fccboscom::PumpTrxn>(Arena*);
template<> ::fccboscom::RoData* Arena::CreateMaybeMessage<::fccboscom::RoData>(Arena*);
template<> ::fccboscom::ShiftEndDetails* Arena::CreateMaybeMessage<::fccboscom::ShiftEndDetails>(Arena*);
template<> ::fccboscom::ShiftEndInventory* Arena::CreateMaybeMessage<::fccboscom::ShiftEndInventory>(Arena*);
template<> ::fccboscom::ShiftEndTotalizer* Arena::CreateMaybeMessage<::fccboscom::ShiftEndTotalizer>(Arena*);
template<> ::fccboscom::TankControl* Arena::CreateMaybeMessage<::fccboscom::TankControl>(Arena*);
template<> ::fccboscom::TankDelivery* Arena::CreateMaybeMessage<::fccboscom::TankDelivery>(Arena*);
template<> ::fccboscom::TankInventory* Arena::CreateMaybeMessage<::fccboscom::TankInventory>(Arena*);
template<> ::fccboscom::TankStatus* Arena::CreateMaybeMessage<::fccboscom::TankStatus>(Arena*);
template<> ::fccboscom::TrxnMopUpdate* Arena::CreateMaybeMessage<::fccboscom::TrxnMopUpdate>(Arena*);
template<> ::fccboscom::UpsStatus* Arena::CreateMaybeMessage<::fccboscom::UpsStatus>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace fccboscom {

// ===================================================================

class RoData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.RoData) */ {
 public:
  inline RoData() : RoData(nullptr) {};
  virtual ~RoData();

  RoData(const RoData& from);
  RoData(RoData&& from) noexcept
    : RoData() {
    *this = ::std::move(from);
  }

  inline RoData& operator=(const RoData& from) {
    CopyFrom(from);
    return *this;
  }
  inline RoData& operator=(RoData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const RoData& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RoData* internal_default_instance() {
    return reinterpret_cast<const RoData*>(
               &_RoData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(RoData& a, RoData& b) {
    a.Swap(&b);
  }
  inline void Swap(RoData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(RoData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline RoData* New() const final {
    return CreateMaybeMessage<RoData>(nullptr);
  }

  RoData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<RoData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const RoData& from);
  void MergeFrom(const RoData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RoData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.RoData";
  }
  protected:
  explicit RoData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDbConfFieldNumber = 4,
    kTankStatusFieldNumber = 5,
    kPumpStatusFieldNumber = 6,
    kUpsStatusFieldNumber = 7,
    kPumpTrxnFieldNumber = 8,
    kTankInventoryFieldNumber = 9,
    kTankDeliveryFieldNumber = 10,
    kDeliveryReceiptFieldNumber = 11,
    kAlarmDetailsFieldNumber = 12,
    kDayEndDetailsFieldNumber = 13,
    kDayEndTotalizerFieldNumber = 14,
    kDayEndInventoryFieldNumber = 15,
    kShiftEndDetailsFieldNumber = 16,
    kShiftEndTotalizerFieldNumber = 17,
    kShiftEndInventoryFieldNumber = 18,
    kPumpControlFieldNumber = 19,
    kTankControlFieldNumber = 20,
    kProductPriceChangeFieldNumber = 21,
    kPriceChangeStatusFieldNumber = 22,
    kOperationControlFieldNumber = 23,
    kTrxnMopUpdateFieldNumber = 24,
    kAlarmAckFieldNumber = 25,
    kFccOperationFieldNumber = 26,
    kBosAckFieldNumber = 27,
    kHeartBeatFieldNumber = 28,
    kOtherDeviceFieldNumber = 29,
    kDuLogsFieldNumber = 30,
    kBosAlarmFieldNumber = 31,
    kFccDoorStatusFieldNumber = 32,
    kInterlockStatusFieldNumber = 33,
    kDeviceStatusFieldNumber = 34,
    kPromotionalMsgFieldNumber = 35,
    kMsgidFieldNumber = 1,
    kAckFieldNumber = 2,
    kMsgRecordIdFieldNumber = 3,
  };
  // repeated .fccboscom.DbConf dbConf = 4;
  int dbconf_size() const;
  private:
  int _internal_dbconf_size() const;
  public:
  void clear_dbconf();
  ::fccboscom::DbConf* mutable_dbconf(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DbConf >*
      mutable_dbconf();
  private:
  const ::fccboscom::DbConf& _internal_dbconf(int index) const;
  ::fccboscom::DbConf* _internal_add_dbconf();
  public:
  const ::fccboscom::DbConf& dbconf(int index) const;
  ::fccboscom::DbConf* add_dbconf();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DbConf >&
      dbconf() const;

  // repeated .fccboscom.TankStatus tankStatus = 5;
  int tankstatus_size() const;
  private:
  int _internal_tankstatus_size() const;
  public:
  void clear_tankstatus();
  ::fccboscom::TankStatus* mutable_tankstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankStatus >*
      mutable_tankstatus();
  private:
  const ::fccboscom::TankStatus& _internal_tankstatus(int index) const;
  ::fccboscom::TankStatus* _internal_add_tankstatus();
  public:
  const ::fccboscom::TankStatus& tankstatus(int index) const;
  ::fccboscom::TankStatus* add_tankstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankStatus >&
      tankstatus() const;

  // repeated .fccboscom.PumpStatus pumpStatus = 6;
  int pumpstatus_size() const;
  private:
  int _internal_pumpstatus_size() const;
  public:
  void clear_pumpstatus();
  ::fccboscom::PumpStatus* mutable_pumpstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpStatus >*
      mutable_pumpstatus();
  private:
  const ::fccboscom::PumpStatus& _internal_pumpstatus(int index) const;
  ::fccboscom::PumpStatus* _internal_add_pumpstatus();
  public:
  const ::fccboscom::PumpStatus& pumpstatus(int index) const;
  ::fccboscom::PumpStatus* add_pumpstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpStatus >&
      pumpstatus() const;

  // repeated .fccboscom.UpsStatus upsStatus = 7;
  int upsstatus_size() const;
  private:
  int _internal_upsstatus_size() const;
  public:
  void clear_upsstatus();
  ::fccboscom::UpsStatus* mutable_upsstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::UpsStatus >*
      mutable_upsstatus();
  private:
  const ::fccboscom::UpsStatus& _internal_upsstatus(int index) const;
  ::fccboscom::UpsStatus* _internal_add_upsstatus();
  public:
  const ::fccboscom::UpsStatus& upsstatus(int index) const;
  ::fccboscom::UpsStatus* add_upsstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::UpsStatus >&
      upsstatus() const;

  // repeated .fccboscom.PumpTrxn pumpTrxn = 8;
  int pumptrxn_size() const;
  private:
  int _internal_pumptrxn_size() const;
  public:
  void clear_pumptrxn();
  ::fccboscom::PumpTrxn* mutable_pumptrxn(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpTrxn >*
      mutable_pumptrxn();
  private:
  const ::fccboscom::PumpTrxn& _internal_pumptrxn(int index) const;
  ::fccboscom::PumpTrxn* _internal_add_pumptrxn();
  public:
  const ::fccboscom::PumpTrxn& pumptrxn(int index) const;
  ::fccboscom::PumpTrxn* add_pumptrxn();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpTrxn >&
      pumptrxn() const;

  // repeated .fccboscom.TankInventory tankInventory = 9;
  int tankinventory_size() const;
  private:
  int _internal_tankinventory_size() const;
  public:
  void clear_tankinventory();
  ::fccboscom::TankInventory* mutable_tankinventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankInventory >*
      mutable_tankinventory();
  private:
  const ::fccboscom::TankInventory& _internal_tankinventory(int index) const;
  ::fccboscom::TankInventory* _internal_add_tankinventory();
  public:
  const ::fccboscom::TankInventory& tankinventory(int index) const;
  ::fccboscom::TankInventory* add_tankinventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankInventory >&
      tankinventory() const;

  // repeated .fccboscom.TankDelivery tankDelivery = 10;
  int tankdelivery_size() const;
  private:
  int _internal_tankdelivery_size() const;
  public:
  void clear_tankdelivery();
  ::fccboscom::TankDelivery* mutable_tankdelivery(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankDelivery >*
      mutable_tankdelivery();
  private:
  const ::fccboscom::TankDelivery& _internal_tankdelivery(int index) const;
  ::fccboscom::TankDelivery* _internal_add_tankdelivery();
  public:
  const ::fccboscom::TankDelivery& tankdelivery(int index) const;
  ::fccboscom::TankDelivery* add_tankdelivery();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankDelivery >&
      tankdelivery() const;

  // repeated .fccboscom.DeliveryReceipt deliveryReceipt = 11;
  int deliveryreceipt_size() const;
  private:
  int _internal_deliveryreceipt_size() const;
  public:
  void clear_deliveryreceipt();
  ::fccboscom::DeliveryReceipt* mutable_deliveryreceipt(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeliveryReceipt >*
      mutable_deliveryreceipt();
  private:
  const ::fccboscom::DeliveryReceipt& _internal_deliveryreceipt(int index) const;
  ::fccboscom::DeliveryReceipt* _internal_add_deliveryreceipt();
  public:
  const ::fccboscom::DeliveryReceipt& deliveryreceipt(int index) const;
  ::fccboscom::DeliveryReceipt* add_deliveryreceipt();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeliveryReceipt >&
      deliveryreceipt() const;

  // repeated .fccboscom.AlarmDetails alarmDetails = 12;
  int alarmdetails_size() const;
  private:
  int _internal_alarmdetails_size() const;
  public:
  void clear_alarmdetails();
  ::fccboscom::AlarmDetails* mutable_alarmdetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmDetails >*
      mutable_alarmdetails();
  private:
  const ::fccboscom::AlarmDetails& _internal_alarmdetails(int index) const;
  ::fccboscom::AlarmDetails* _internal_add_alarmdetails();
  public:
  const ::fccboscom::AlarmDetails& alarmdetails(int index) const;
  ::fccboscom::AlarmDetails* add_alarmdetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmDetails >&
      alarmdetails() const;

  // repeated .fccboscom.DayEndDetails dayEndDetails = 13;
  int dayenddetails_size() const;
  private:
  int _internal_dayenddetails_size() const;
  public:
  void clear_dayenddetails();
  ::fccboscom::DayEndDetails* mutable_dayenddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndDetails >*
      mutable_dayenddetails();
  private:
  const ::fccboscom::DayEndDetails& _internal_dayenddetails(int index) const;
  ::fccboscom::DayEndDetails* _internal_add_dayenddetails();
  public:
  const ::fccboscom::DayEndDetails& dayenddetails(int index) const;
  ::fccboscom::DayEndDetails* add_dayenddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndDetails >&
      dayenddetails() const;

  // repeated .fccboscom.DayEndTotalizer dayEndTotalizer = 14;
  int dayendtotalizer_size() const;
  private:
  int _internal_dayendtotalizer_size() const;
  public:
  void clear_dayendtotalizer();
  ::fccboscom::DayEndTotalizer* mutable_dayendtotalizer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndTotalizer >*
      mutable_dayendtotalizer();
  private:
  const ::fccboscom::DayEndTotalizer& _internal_dayendtotalizer(int index) const;
  ::fccboscom::DayEndTotalizer* _internal_add_dayendtotalizer();
  public:
  const ::fccboscom::DayEndTotalizer& dayendtotalizer(int index) const;
  ::fccboscom::DayEndTotalizer* add_dayendtotalizer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndTotalizer >&
      dayendtotalizer() const;

  // repeated .fccboscom.DayEndInventory dayEndInventory = 15;
  int dayendinventory_size() const;
  private:
  int _internal_dayendinventory_size() const;
  public:
  void clear_dayendinventory();
  ::fccboscom::DayEndInventory* mutable_dayendinventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndInventory >*
      mutable_dayendinventory();
  private:
  const ::fccboscom::DayEndInventory& _internal_dayendinventory(int index) const;
  ::fccboscom::DayEndInventory* _internal_add_dayendinventory();
  public:
  const ::fccboscom::DayEndInventory& dayendinventory(int index) const;
  ::fccboscom::DayEndInventory* add_dayendinventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndInventory >&
      dayendinventory() const;

  // repeated .fccboscom.ShiftEndDetails shiftEndDetails = 16;
  int shiftenddetails_size() const;
  private:
  int _internal_shiftenddetails_size() const;
  public:
  void clear_shiftenddetails();
  ::fccboscom::ShiftEndDetails* mutable_shiftenddetails(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndDetails >*
      mutable_shiftenddetails();
  private:
  const ::fccboscom::ShiftEndDetails& _internal_shiftenddetails(int index) const;
  ::fccboscom::ShiftEndDetails* _internal_add_shiftenddetails();
  public:
  const ::fccboscom::ShiftEndDetails& shiftenddetails(int index) const;
  ::fccboscom::ShiftEndDetails* add_shiftenddetails();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndDetails >&
      shiftenddetails() const;

  // repeated .fccboscom.ShiftEndTotalizer shiftEndTotalizer = 17;
  int shiftendtotalizer_size() const;
  private:
  int _internal_shiftendtotalizer_size() const;
  public:
  void clear_shiftendtotalizer();
  ::fccboscom::ShiftEndTotalizer* mutable_shiftendtotalizer(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndTotalizer >*
      mutable_shiftendtotalizer();
  private:
  const ::fccboscom::ShiftEndTotalizer& _internal_shiftendtotalizer(int index) const;
  ::fccboscom::ShiftEndTotalizer* _internal_add_shiftendtotalizer();
  public:
  const ::fccboscom::ShiftEndTotalizer& shiftendtotalizer(int index) const;
  ::fccboscom::ShiftEndTotalizer* add_shiftendtotalizer();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndTotalizer >&
      shiftendtotalizer() const;

  // repeated .fccboscom.ShiftEndInventory shiftEndInventory = 18;
  int shiftendinventory_size() const;
  private:
  int _internal_shiftendinventory_size() const;
  public:
  void clear_shiftendinventory();
  ::fccboscom::ShiftEndInventory* mutable_shiftendinventory(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndInventory >*
      mutable_shiftendinventory();
  private:
  const ::fccboscom::ShiftEndInventory& _internal_shiftendinventory(int index) const;
  ::fccboscom::ShiftEndInventory* _internal_add_shiftendinventory();
  public:
  const ::fccboscom::ShiftEndInventory& shiftendinventory(int index) const;
  ::fccboscom::ShiftEndInventory* add_shiftendinventory();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndInventory >&
      shiftendinventory() const;

  // repeated .fccboscom.PumpControl pumpControl = 19;
  int pumpcontrol_size() const;
  private:
  int _internal_pumpcontrol_size() const;
  public:
  void clear_pumpcontrol();
  ::fccboscom::PumpControl* mutable_pumpcontrol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpControl >*
      mutable_pumpcontrol();
  private:
  const ::fccboscom::PumpControl& _internal_pumpcontrol(int index) const;
  ::fccboscom::PumpControl* _internal_add_pumpcontrol();
  public:
  const ::fccboscom::PumpControl& pumpcontrol(int index) const;
  ::fccboscom::PumpControl* add_pumpcontrol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpControl >&
      pumpcontrol() const;

  // repeated .fccboscom.TankControl tankControl = 20;
  int tankcontrol_size() const;
  private:
  int _internal_tankcontrol_size() const;
  public:
  void clear_tankcontrol();
  ::fccboscom::TankControl* mutable_tankcontrol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankControl >*
      mutable_tankcontrol();
  private:
  const ::fccboscom::TankControl& _internal_tankcontrol(int index) const;
  ::fccboscom::TankControl* _internal_add_tankcontrol();
  public:
  const ::fccboscom::TankControl& tankcontrol(int index) const;
  ::fccboscom::TankControl* add_tankcontrol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankControl >&
      tankcontrol() const;

  // repeated .fccboscom.ProductPriceChange productPriceChange = 21;
  int productpricechange_size() const;
  private:
  int _internal_productpricechange_size() const;
  public:
  void clear_productpricechange();
  ::fccboscom::ProductPriceChange* mutable_productpricechange(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ProductPriceChange >*
      mutable_productpricechange();
  private:
  const ::fccboscom::ProductPriceChange& _internal_productpricechange(int index) const;
  ::fccboscom::ProductPriceChange* _internal_add_productpricechange();
  public:
  const ::fccboscom::ProductPriceChange& productpricechange(int index) const;
  ::fccboscom::ProductPriceChange* add_productpricechange();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ProductPriceChange >&
      productpricechange() const;

  // repeated .fccboscom.PriceChangeStatus priceChangeStatus = 22;
  int pricechangestatus_size() const;
  private:
  int _internal_pricechangestatus_size() const;
  public:
  void clear_pricechangestatus();
  ::fccboscom::PriceChangeStatus* mutable_pricechangestatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PriceChangeStatus >*
      mutable_pricechangestatus();
  private:
  const ::fccboscom::PriceChangeStatus& _internal_pricechangestatus(int index) const;
  ::fccboscom::PriceChangeStatus* _internal_add_pricechangestatus();
  public:
  const ::fccboscom::PriceChangeStatus& pricechangestatus(int index) const;
  ::fccboscom::PriceChangeStatus* add_pricechangestatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PriceChangeStatus >&
      pricechangestatus() const;

  // repeated .fccboscom.OperationControl operationControl = 23;
  int operationcontrol_size() const;
  private:
  int _internal_operationcontrol_size() const;
  public:
  void clear_operationcontrol();
  ::fccboscom::OperationControl* mutable_operationcontrol(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OperationControl >*
      mutable_operationcontrol();
  private:
  const ::fccboscom::OperationControl& _internal_operationcontrol(int index) const;
  ::fccboscom::OperationControl* _internal_add_operationcontrol();
  public:
  const ::fccboscom::OperationControl& operationcontrol(int index) const;
  ::fccboscom::OperationControl* add_operationcontrol();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OperationControl >&
      operationcontrol() const;

  // repeated .fccboscom.TrxnMopUpdate trxnMopUpdate = 24;
  int trxnmopupdate_size() const;
  private:
  int _internal_trxnmopupdate_size() const;
  public:
  void clear_trxnmopupdate();
  ::fccboscom::TrxnMopUpdate* mutable_trxnmopupdate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TrxnMopUpdate >*
      mutable_trxnmopupdate();
  private:
  const ::fccboscom::TrxnMopUpdate& _internal_trxnmopupdate(int index) const;
  ::fccboscom::TrxnMopUpdate* _internal_add_trxnmopupdate();
  public:
  const ::fccboscom::TrxnMopUpdate& trxnmopupdate(int index) const;
  ::fccboscom::TrxnMopUpdate* add_trxnmopupdate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TrxnMopUpdate >&
      trxnmopupdate() const;

  // repeated .fccboscom.AlarmAck alarmAck = 25;
  int alarmack_size() const;
  private:
  int _internal_alarmack_size() const;
  public:
  void clear_alarmack();
  ::fccboscom::AlarmAck* mutable_alarmack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmAck >*
      mutable_alarmack();
  private:
  const ::fccboscom::AlarmAck& _internal_alarmack(int index) const;
  ::fccboscom::AlarmAck* _internal_add_alarmack();
  public:
  const ::fccboscom::AlarmAck& alarmack(int index) const;
  ::fccboscom::AlarmAck* add_alarmack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmAck >&
      alarmack() const;

  // repeated .fccboscom.FccOperation fccOperation = 26;
  int fccoperation_size() const;
  private:
  int _internal_fccoperation_size() const;
  public:
  void clear_fccoperation();
  ::fccboscom::FccOperation* mutable_fccoperation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FccOperation >*
      mutable_fccoperation();
  private:
  const ::fccboscom::FccOperation& _internal_fccoperation(int index) const;
  ::fccboscom::FccOperation* _internal_add_fccoperation();
  public:
  const ::fccboscom::FccOperation& fccoperation(int index) const;
  ::fccboscom::FccOperation* add_fccoperation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FccOperation >&
      fccoperation() const;

  // repeated .fccboscom.BosAck bosAck = 27;
  int bosack_size() const;
  private:
  int _internal_bosack_size() const;
  public:
  void clear_bosack();
  ::fccboscom::BosAck* mutable_bosack(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BosAck >*
      mutable_bosack();
  private:
  const ::fccboscom::BosAck& _internal_bosack(int index) const;
  ::fccboscom::BosAck* _internal_add_bosack();
  public:
  const ::fccboscom::BosAck& bosack(int index) const;
  ::fccboscom::BosAck* add_bosack();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BosAck >&
      bosack() const;

  // repeated .fccboscom.HeartBeat heartBeat = 28;
  int heartbeat_size() const;
  private:
  int _internal_heartbeat_size() const;
  public:
  void clear_heartbeat();
  ::fccboscom::HeartBeat* mutable_heartbeat(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::HeartBeat >*
      mutable_heartbeat();
  private:
  const ::fccboscom::HeartBeat& _internal_heartbeat(int index) const;
  ::fccboscom::HeartBeat* _internal_add_heartbeat();
  public:
  const ::fccboscom::HeartBeat& heartbeat(int index) const;
  ::fccboscom::HeartBeat* add_heartbeat();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::HeartBeat >&
      heartbeat() const;

  // repeated .fccboscom.OtherDevice otherDevice = 29;
  int otherdevice_size() const;
  private:
  int _internal_otherdevice_size() const;
  public:
  void clear_otherdevice();
  ::fccboscom::OtherDevice* mutable_otherdevice(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OtherDevice >*
      mutable_otherdevice();
  private:
  const ::fccboscom::OtherDevice& _internal_otherdevice(int index) const;
  ::fccboscom::OtherDevice* _internal_add_otherdevice();
  public:
  const ::fccboscom::OtherDevice& otherdevice(int index) const;
  ::fccboscom::OtherDevice* add_otherdevice();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OtherDevice >&
      otherdevice() const;

  // repeated .fccboscom.DULogs duLogs = 30;
  int dulogs_size() const;
  private:
  int _internal_dulogs_size() const;
  public:
  void clear_dulogs();
  ::fccboscom::DULogs* mutable_dulogs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DULogs >*
      mutable_dulogs();
  private:
  const ::fccboscom::DULogs& _internal_dulogs(int index) const;
  ::fccboscom::DULogs* _internal_add_dulogs();
  public:
  const ::fccboscom::DULogs& dulogs(int index) const;
  ::fccboscom::DULogs* add_dulogs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DULogs >&
      dulogs() const;

  // repeated .fccboscom.BOSAlarm bosAlarm = 31;
  int bosalarm_size() const;
  private:
  int _internal_bosalarm_size() const;
  public:
  void clear_bosalarm();
  ::fccboscom::BOSAlarm* mutable_bosalarm(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BOSAlarm >*
      mutable_bosalarm();
  private:
  const ::fccboscom::BOSAlarm& _internal_bosalarm(int index) const;
  ::fccboscom::BOSAlarm* _internal_add_bosalarm();
  public:
  const ::fccboscom::BOSAlarm& bosalarm(int index) const;
  ::fccboscom::BOSAlarm* add_bosalarm();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BOSAlarm >&
      bosalarm() const;

  // repeated .fccboscom.FCCDoorStatus fccDoorStatus = 32;
  int fccdoorstatus_size() const;
  private:
  int _internal_fccdoorstatus_size() const;
  public:
  void clear_fccdoorstatus();
  ::fccboscom::FCCDoorStatus* mutable_fccdoorstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FCCDoorStatus >*
      mutable_fccdoorstatus();
  private:
  const ::fccboscom::FCCDoorStatus& _internal_fccdoorstatus(int index) const;
  ::fccboscom::FCCDoorStatus* _internal_add_fccdoorstatus();
  public:
  const ::fccboscom::FCCDoorStatus& fccdoorstatus(int index) const;
  ::fccboscom::FCCDoorStatus* add_fccdoorstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FCCDoorStatus >&
      fccdoorstatus() const;

  // repeated .fccboscom.InterlockStatus interlockStatus = 33;
  int interlockstatus_size() const;
  private:
  int _internal_interlockstatus_size() const;
  public:
  void clear_interlockstatus();
  ::fccboscom::InterlockStatus* mutable_interlockstatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::InterlockStatus >*
      mutable_interlockstatus();
  private:
  const ::fccboscom::InterlockStatus& _internal_interlockstatus(int index) const;
  ::fccboscom::InterlockStatus* _internal_add_interlockstatus();
  public:
  const ::fccboscom::InterlockStatus& interlockstatus(int index) const;
  ::fccboscom::InterlockStatus* add_interlockstatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::InterlockStatus >&
      interlockstatus() const;

  // repeated .fccboscom.DeviceStatus deviceStatus = 34;
  int devicestatus_size() const;
  private:
  int _internal_devicestatus_size() const;
  public:
  void clear_devicestatus();
  ::fccboscom::DeviceStatus* mutable_devicestatus(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeviceStatus >*
      mutable_devicestatus();
  private:
  const ::fccboscom::DeviceStatus& _internal_devicestatus(int index) const;
  ::fccboscom::DeviceStatus* _internal_add_devicestatus();
  public:
  const ::fccboscom::DeviceStatus& devicestatus(int index) const;
  ::fccboscom::DeviceStatus* add_devicestatus();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeviceStatus >&
      devicestatus() const;

  // repeated .fccboscom.PromotionalMsg promotionalMsg = 35;
  int promotionalmsg_size() const;
  private:
  int _internal_promotionalmsg_size() const;
  public:
  void clear_promotionalmsg();
  ::fccboscom::PromotionalMsg* mutable_promotionalmsg(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PromotionalMsg >*
      mutable_promotionalmsg();
  private:
  const ::fccboscom::PromotionalMsg& _internal_promotionalmsg(int index) const;
  ::fccboscom::PromotionalMsg* _internal_add_promotionalmsg();
  public:
  const ::fccboscom::PromotionalMsg& promotionalmsg(int index) const;
  ::fccboscom::PromotionalMsg* add_promotionalmsg();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PromotionalMsg >&
      promotionalmsg() const;

  // required uint32 msgid = 1;
  bool has_msgid() const;
  private:
  bool _internal_has_msgid() const;
  public:
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 ack = 2;
  bool has_ack() const;
  private:
  bool _internal_has_ack() const;
  public:
  void clear_ack();
  ::PROTOBUF_NAMESPACE_ID::uint32 ack() const;
  void set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_ack() const;
  void _internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 msgRecordId = 3;
  bool has_msgrecordid() const;
  private:
  bool _internal_has_msgrecordid() const;
  public:
  void clear_msgrecordid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgrecordid() const;
  void set_msgrecordid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgrecordid() const;
  void _internal_set_msgrecordid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.RoData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DbConf > dbconf_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankStatus > tankstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpStatus > pumpstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::UpsStatus > upsstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpTrxn > pumptrxn_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankInventory > tankinventory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankDelivery > tankdelivery_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeliveryReceipt > deliveryreceipt_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmDetails > alarmdetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndDetails > dayenddetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndTotalizer > dayendtotalizer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndInventory > dayendinventory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndDetails > shiftenddetails_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndTotalizer > shiftendtotalizer_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndInventory > shiftendinventory_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpControl > pumpcontrol_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankControl > tankcontrol_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ProductPriceChange > productpricechange_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PriceChangeStatus > pricechangestatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OperationControl > operationcontrol_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TrxnMopUpdate > trxnmopupdate_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmAck > alarmack_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FccOperation > fccoperation_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BosAck > bosack_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::HeartBeat > heartbeat_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OtherDevice > otherdevice_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DULogs > dulogs_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BOSAlarm > bosalarm_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FCCDoorStatus > fccdoorstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::InterlockStatus > interlockstatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeviceStatus > devicestatus_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PromotionalMsg > promotionalmsg_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 ack_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgrecordid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DbConf PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DbConf) */ {
 public:
  inline DbConf() : DbConf(nullptr) {};
  virtual ~DbConf();

  DbConf(const DbConf& from);
  DbConf(DbConf&& from) noexcept
    : DbConf() {
    *this = ::std::move(from);
  }

  inline DbConf& operator=(const DbConf& from) {
    CopyFrom(from);
    return *this;
  }
  inline DbConf& operator=(DbConf&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DbConf& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DbConf* internal_default_instance() {
    return reinterpret_cast<const DbConf*>(
               &_DbConf_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(DbConf& a, DbConf& b) {
    a.Swap(&b);
  }
  inline void Swap(DbConf* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DbConf* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DbConf* New() const final {
    return CreateMaybeMessage<DbConf>(nullptr);
  }

  DbConf* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DbConf>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DbConf& from);
  void MergeFrom(const DbConf& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DbConf* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DbConf";
  }
  protected:
  explicit DbConf(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataModuleFieldNumber = 2,
    kTableNameFieldNumber = 1,
    kOperationFieldNumber = 3,
  };
  // repeated .fccboscom.DataModule dataModule = 2;
  int datamodule_size() const;
  private:
  int _internal_datamodule_size() const;
  public:
  void clear_datamodule();
  ::fccboscom::DataModule* mutable_datamodule(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DataModule >*
      mutable_datamodule();
  private:
  const ::fccboscom::DataModule& _internal_datamodule(int index) const;
  ::fccboscom::DataModule* _internal_add_datamodule();
  public:
  const ::fccboscom::DataModule& datamodule(int index) const;
  ::fccboscom::DataModule* add_datamodule();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DataModule >&
      datamodule() const;

  // required string tableName = 1;
  bool has_tablename() const;
  private:
  bool _internal_has_tablename() const;
  public:
  void clear_tablename();
  const std::string& tablename() const;
  void set_tablename(const std::string& value);
  void set_tablename(std::string&& value);
  void set_tablename(const char* value);
  void set_tablename(const char* value, size_t size);
  std::string* mutable_tablename();
  std::string* release_tablename();
  void set_allocated_tablename(std::string* tablename);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_tablename();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_tablename(
      std::string* tablename);
  private:
  const std::string& _internal_tablename() const;
  void _internal_set_tablename(const std::string& value);
  std::string* _internal_mutable_tablename();
  public:

  // required uint32 operation = 3;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::uint32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DbConf)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DataModule > datamodule_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr tablename_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DataModule PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DataModule) */ {
 public:
  inline DataModule() : DataModule(nullptr) {};
  virtual ~DataModule();

  DataModule(const DataModule& from);
  DataModule(DataModule&& from) noexcept
    : DataModule() {
    *this = ::std::move(from);
  }

  inline DataModule& operator=(const DataModule& from) {
    CopyFrom(from);
    return *this;
  }
  inline DataModule& operator=(DataModule&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DataModule& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DataModule* internal_default_instance() {
    return reinterpret_cast<const DataModule*>(
               &_DataModule_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(DataModule& a, DataModule& b) {
    a.Swap(&b);
  }
  inline void Swap(DataModule* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DataModule* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DataModule* New() const final {
    return CreateMaybeMessage<DataModule>(nullptr);
  }

  DataModule* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DataModule>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DataModule& from);
  void MergeFrom(const DataModule& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DataModule* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DataModule";
  }
  protected:
  explicit DataModule(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
    kDataTypeFieldNumber = 3,
  };
  // required string key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const std::string& key() const;
  void set_key(const std::string& value);
  void set_key(std::string&& value);
  void set_key(const char* value);
  void set_key(const char* value, size_t size);
  std::string* mutable_key();
  std::string* release_key();
  void set_allocated_key(std::string* key);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_key();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_key(
      std::string* key);
  private:
  const std::string& _internal_key() const;
  void _internal_set_key(const std::string& value);
  std::string* _internal_mutable_key();
  public:

  // required string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 dataType = 3;
  bool has_datatype() const;
  private:
  bool _internal_has_datatype() const;
  public:
  void clear_datatype();
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype() const;
  void set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_datatype() const;
  void _internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DataModule)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr key_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 datatype_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class TankStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.TankStatus) */ {
 public:
  inline TankStatus() : TankStatus(nullptr) {};
  virtual ~TankStatus();

  TankStatus(const TankStatus& from);
  TankStatus(TankStatus&& from) noexcept
    : TankStatus() {
    *this = ::std::move(from);
  }

  inline TankStatus& operator=(const TankStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TankStatus& operator=(TankStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TankStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TankStatus* internal_default_instance() {
    return reinterpret_cast<const TankStatus*>(
               &_TankStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TankStatus& a, TankStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(TankStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TankStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TankStatus* New() const final {
    return CreateMaybeMessage<TankStatus>(nullptr);
  }

  TankStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TankStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TankStatus& from);
  void MergeFrom(const TankStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TankStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.TankStatus";
  }
  protected:
  explicit TankStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTankIdFieldNumber = 1,
    kTankUidFieldNumber = 2,
    kTankStatusFieldNumber = 3,
    kProductLevelFieldNumber = 4,
    kProductVolumeFieldNumber = 5,
    kWaterLevelFieldNumber = 6,
    kWaterVolumeFieldNumber = 7,
    kTemperatureFieldNumber = 8,
    kTcVolumeFieldNumber = 9,
    kUllageFieldNumber = 10,
    kDensityFieldNumber = 11,
    kTcDensityFieldNumber = 12,
    kLockValFieldNumber = 13,
  };
  // required uint32 tankId = 1;
  bool has_tankid() const;
  private:
  bool _internal_has_tankid() const;
  public:
  void clear_tankid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid() const;
  void set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankid() const;
  void _internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankUid = 2;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankStatus = 3;
  bool has_tankstatus() const;
  private:
  bool _internal_has_tankstatus() const;
  public:
  void clear_tankstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus() const;
  void set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankstatus() const;
  void _internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float productLevel = 4;
  bool has_productlevel() const;
  private:
  bool _internal_has_productlevel() const;
  public:
  void clear_productlevel();
  float productlevel() const;
  void set_productlevel(float value);
  private:
  float _internal_productlevel() const;
  void _internal_set_productlevel(float value);
  public:

  // required float productVolume = 5;
  bool has_productvolume() const;
  private:
  bool _internal_has_productvolume() const;
  public:
  void clear_productvolume();
  float productvolume() const;
  void set_productvolume(float value);
  private:
  float _internal_productvolume() const;
  void _internal_set_productvolume(float value);
  public:

  // required float waterLevel = 6;
  bool has_waterlevel() const;
  private:
  bool _internal_has_waterlevel() const;
  public:
  void clear_waterlevel();
  float waterlevel() const;
  void set_waterlevel(float value);
  private:
  float _internal_waterlevel() const;
  void _internal_set_waterlevel(float value);
  public:

  // required float waterVolume = 7;
  bool has_watervolume() const;
  private:
  bool _internal_has_watervolume() const;
  public:
  void clear_watervolume();
  float watervolume() const;
  void set_watervolume(float value);
  private:
  float _internal_watervolume() const;
  void _internal_set_watervolume(float value);
  public:

  // required float temperature = 8;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // required double tcVolume = 9;
  bool has_tcvolume() const;
  private:
  bool _internal_has_tcvolume() const;
  public:
  void clear_tcvolume();
  double tcvolume() const;
  void set_tcvolume(double value);
  private:
  double _internal_tcvolume() const;
  void _internal_set_tcvolume(double value);
  public:

  // required float ullage = 10;
  bool has_ullage() const;
  private:
  bool _internal_has_ullage() const;
  public:
  void clear_ullage();
  float ullage() const;
  void set_ullage(float value);
  private:
  float _internal_ullage() const;
  void _internal_set_ullage(float value);
  public:

  // optional float density = 11;
  bool has_density() const;
  private:
  bool _internal_has_density() const;
  public:
  void clear_density();
  float density() const;
  void set_density(float value);
  private:
  float _internal_density() const;
  void _internal_set_density(float value);
  public:

  // optional float tcDensity = 12;
  bool has_tcdensity() const;
  private:
  bool _internal_has_tcdensity() const;
  public:
  void clear_tcdensity();
  float tcdensity() const;
  void set_tcdensity(float value);
  private:
  float _internal_tcdensity() const;
  void _internal_set_tcdensity(float value);
  public:

  // optional uint32 lockVal = 13;
  bool has_lockval() const;
  private:
  bool _internal_has_lockval() const;
  public:
  void clear_lockval();
  ::PROTOBUF_NAMESPACE_ID::uint32 lockval() const;
  void set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lockval() const;
  void _internal_set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.TankStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus_;
  float productlevel_;
  float productvolume_;
  float waterlevel_;
  float watervolume_;
  float temperature_;
  double tcvolume_;
  float ullage_;
  float density_;
  float tcdensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lockval_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class PumpStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.PumpStatus) */ {
 public:
  inline PumpStatus() : PumpStatus(nullptr) {};
  virtual ~PumpStatus();

  PumpStatus(const PumpStatus& from);
  PumpStatus(PumpStatus&& from) noexcept
    : PumpStatus() {
    *this = ::std::move(from);
  }

  inline PumpStatus& operator=(const PumpStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PumpStatus& operator=(PumpStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PumpStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PumpStatus* internal_default_instance() {
    return reinterpret_cast<const PumpStatus*>(
               &_PumpStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(PumpStatus& a, PumpStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PumpStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PumpStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PumpStatus* New() const final {
    return CreateMaybeMessage<PumpStatus>(nullptr);
  }

  PumpStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PumpStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PumpStatus& from);
  void MergeFrom(const PumpStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PumpStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.PumpStatus";
  }
  protected:
  explicit PumpStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPumpIdFieldNumber = 1,
    kPumpUidFieldNumber = 2,
    kStatusFieldNumber = 3,
    kNozzleIdFieldNumber = 4,
    kTrxnVolumeFieldNumber = 5,
    kTrxnAmountFieldNumber = 6,
    kLockValFieldNumber = 7,
    kNpndStatusFieldNumber = 8,
    kMotorTimeoutFieldNumber = 9,
    kPumpTypeFieldNumber = 10,
  };
  // required uint32 pumpId = 1;
  bool has_pumpid() const;
  private:
  bool _internal_has_pumpid() const;
  public:
  void clear_pumpid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpid() const;
  void set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpid() const;
  void _internal_set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pumpUid = 2;
  bool has_pumpuid() const;
  private:
  bool _internal_has_pumpuid() const;
  public:
  void clear_pumpuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid() const;
  void set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpuid() const;
  void _internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleId = 4;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float trxnVolume = 5;
  bool has_trxnvolume() const;
  private:
  bool _internal_has_trxnvolume() const;
  public:
  void clear_trxnvolume();
  float trxnvolume() const;
  void set_trxnvolume(float value);
  private:
  float _internal_trxnvolume() const;
  void _internal_set_trxnvolume(float value);
  public:

  // required float trxnAmount = 6;
  bool has_trxnamount() const;
  private:
  bool _internal_has_trxnamount() const;
  public:
  void clear_trxnamount();
  float trxnamount() const;
  void set_trxnamount(float value);
  private:
  float _internal_trxnamount() const;
  void _internal_set_trxnamount(float value);
  public:

  // required uint32 lockVal = 7;
  bool has_lockval() const;
  private:
  bool _internal_has_lockval() const;
  public:
  void clear_lockval();
  ::PROTOBUF_NAMESPACE_ID::uint32 lockval() const;
  void set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lockval() const;
  void _internal_set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 npndStatus = 8;
  bool has_npndstatus() const;
  private:
  bool _internal_has_npndstatus() const;
  public:
  void clear_npndstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 npndstatus() const;
  void set_npndstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_npndstatus() const;
  void _internal_set_npndstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 motorTimeout = 9;
  bool has_motortimeout() const;
  private:
  bool _internal_has_motortimeout() const;
  public:
  void clear_motortimeout();
  ::PROTOBUF_NAMESPACE_ID::uint32 motortimeout() const;
  void set_motortimeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_motortimeout() const;
  void _internal_set_motortimeout(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pumpType = 10;
  bool has_pumptype() const;
  private:
  bool _internal_has_pumptype() const;
  public:
  void clear_pumptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumptype() const;
  void set_pumptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumptype() const;
  void _internal_set_pumptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.PumpStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid_;
  float trxnvolume_;
  float trxnamount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lockval_;
  ::PROTOBUF_NAMESPACE_ID::uint32 npndstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 motortimeout_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumptype_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class UpsStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.UpsStatus) */ {
 public:
  inline UpsStatus() : UpsStatus(nullptr) {};
  virtual ~UpsStatus();

  UpsStatus(const UpsStatus& from);
  UpsStatus(UpsStatus&& from) noexcept
    : UpsStatus() {
    *this = ::std::move(from);
  }

  inline UpsStatus& operator=(const UpsStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline UpsStatus& operator=(UpsStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const UpsStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const UpsStatus* internal_default_instance() {
    return reinterpret_cast<const UpsStatus*>(
               &_UpsStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(UpsStatus& a, UpsStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(UpsStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(UpsStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline UpsStatus* New() const final {
    return CreateMaybeMessage<UpsStatus>(nullptr);
  }

  UpsStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<UpsStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const UpsStatus& from);
  void MergeFrom(const UpsStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(UpsStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.UpsStatus";
  }
  protected:
  explicit UpsStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpsStatusFieldNumber = 8,
    kInventoryTimeFieldNumber = 12,
    kUpsIdFieldNumber = 1,
    kUpsUidFieldNumber = 2,
    kInputVtgFieldNumber = 3,
    kOutputVtgFieldNumber = 4,
    kBatteryVtgFieldNumber = 5,
    kInputFreqFieldNumber = 6,
    kTemperatureFieldNumber = 7,
    kLoadPercentFieldNumber = 9,
    kBatteryPercentFieldNumber = 10,
    kInventoryIdFieldNumber = 11,
  };
  // required string upsStatus = 8;
  bool has_upsstatus() const;
  private:
  bool _internal_has_upsstatus() const;
  public:
  void clear_upsstatus();
  const std::string& upsstatus() const;
  void set_upsstatus(const std::string& value);
  void set_upsstatus(std::string&& value);
  void set_upsstatus(const char* value);
  void set_upsstatus(const char* value, size_t size);
  std::string* mutable_upsstatus();
  std::string* release_upsstatus();
  void set_allocated_upsstatus(std::string* upsstatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_upsstatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_upsstatus(
      std::string* upsstatus);
  private:
  const std::string& _internal_upsstatus() const;
  void _internal_set_upsstatus(const std::string& value);
  std::string* _internal_mutable_upsstatus();
  public:

  // optional string inventoryTime = 12;
  bool has_inventorytime() const;
  private:
  bool _internal_has_inventorytime() const;
  public:
  void clear_inventorytime();
  const std::string& inventorytime() const;
  void set_inventorytime(const std::string& value);
  void set_inventorytime(std::string&& value);
  void set_inventorytime(const char* value);
  void set_inventorytime(const char* value, size_t size);
  std::string* mutable_inventorytime();
  std::string* release_inventorytime();
  void set_allocated_inventorytime(std::string* inventorytime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inventorytime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inventorytime(
      std::string* inventorytime);
  private:
  const std::string& _internal_inventorytime() const;
  void _internal_set_inventorytime(const std::string& value);
  std::string* _internal_mutable_inventorytime();
  public:

  // required uint32 upsId = 1;
  bool has_upsid() const;
  private:
  bool _internal_has_upsid() const;
  public:
  void clear_upsid();
  ::PROTOBUF_NAMESPACE_ID::uint32 upsid() const;
  void set_upsid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upsid() const;
  void _internal_set_upsid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 upsUid = 2;
  bool has_upsuid() const;
  private:
  bool _internal_has_upsuid() const;
  public:
  void clear_upsuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 upsuid() const;
  void set_upsuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_upsuid() const;
  void _internal_set_upsuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float inputVtg = 3;
  bool has_inputvtg() const;
  private:
  bool _internal_has_inputvtg() const;
  public:
  void clear_inputvtg();
  float inputvtg() const;
  void set_inputvtg(float value);
  private:
  float _internal_inputvtg() const;
  void _internal_set_inputvtg(float value);
  public:

  // required float outputVtg = 4;
  bool has_outputvtg() const;
  private:
  bool _internal_has_outputvtg() const;
  public:
  void clear_outputvtg();
  float outputvtg() const;
  void set_outputvtg(float value);
  private:
  float _internal_outputvtg() const;
  void _internal_set_outputvtg(float value);
  public:

  // required float batteryVtg = 5;
  bool has_batteryvtg() const;
  private:
  bool _internal_has_batteryvtg() const;
  public:
  void clear_batteryvtg();
  float batteryvtg() const;
  void set_batteryvtg(float value);
  private:
  float _internal_batteryvtg() const;
  void _internal_set_batteryvtg(float value);
  public:

  // required float inputFreq = 6;
  bool has_inputfreq() const;
  private:
  bool _internal_has_inputfreq() const;
  public:
  void clear_inputfreq();
  float inputfreq() const;
  void set_inputfreq(float value);
  private:
  float _internal_inputfreq() const;
  void _internal_set_inputfreq(float value);
  public:

  // required float temperature = 7;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // optional float loadPercent = 9;
  bool has_loadpercent() const;
  private:
  bool _internal_has_loadpercent() const;
  public:
  void clear_loadpercent();
  float loadpercent() const;
  void set_loadpercent(float value);
  private:
  float _internal_loadpercent() const;
  void _internal_set_loadpercent(float value);
  public:

  // optional float batteryPercent = 10;
  bool has_batterypercent() const;
  private:
  bool _internal_has_batterypercent() const;
  public:
  void clear_batterypercent();
  float batterypercent() const;
  void set_batterypercent(float value);
  private:
  float _internal_batterypercent() const;
  void _internal_set_batterypercent(float value);
  public:

  // optional uint32 inventoryId = 11;
  bool has_inventoryid() const;
  private:
  bool _internal_has_inventoryid() const;
  public:
  void clear_inventoryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid() const;
  void set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventoryid() const;
  void _internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.UpsStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr upsstatus_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventorytime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upsid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 upsuid_;
  float inputvtg_;
  float outputvtg_;
  float batteryvtg_;
  float inputfreq_;
  float temperature_;
  float loadpercent_;
  float batterypercent_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class PumpTrxn PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.PumpTrxn) */ {
 public:
  inline PumpTrxn() : PumpTrxn(nullptr) {};
  virtual ~PumpTrxn();

  PumpTrxn(const PumpTrxn& from);
  PumpTrxn(PumpTrxn&& from) noexcept
    : PumpTrxn() {
    *this = ::std::move(from);
  }

  inline PumpTrxn& operator=(const PumpTrxn& from) {
    CopyFrom(from);
    return *this;
  }
  inline PumpTrxn& operator=(PumpTrxn&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PumpTrxn& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PumpTrxn* internal_default_instance() {
    return reinterpret_cast<const PumpTrxn*>(
               &_PumpTrxn_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(PumpTrxn& a, PumpTrxn& b) {
    a.Swap(&b);
  }
  inline void Swap(PumpTrxn* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PumpTrxn* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PumpTrxn* New() const final {
    return CreateMaybeMessage<PumpTrxn>(nullptr);
  }

  PumpTrxn* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PumpTrxn>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PumpTrxn& from);
  void MergeFrom(const PumpTrxn& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PumpTrxn* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.PumpTrxn";
  }
  protected:
  explicit PumpTrxn(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTrxnStartTimeFieldNumber = 14,
    kTrxnEndTimeFieldNumber = 15,
    kPumpIdFieldNumber = 1,
    kPumpUidFieldNumber = 2,
    kNozzleIdFieldNumber = 3,
    kNozzleUidFieldNumber = 4,
    kTrxnVolumeFieldNumber = 5,
    kTrxnAmountFieldNumber = 6,
    kStartVolumeTotalizerFieldNumber = 8,
    kUnitRateFieldNumber = 7,
    kPresetTypeFieldNumber = 10,
    kEndVolumeTotalizerFieldNumber = 9,
    kPresetModeFieldNumber = 11,
    kPresetValueFieldNumber = 12,
    kTrxnIdFieldNumber = 13,
    kDayIdFieldNumber = 16,
    kGradeUidFieldNumber = 17,
    kPumpModeFieldNumber = 18,
    kShiftIdFieldNumber = 19,
    kDealerShiftIdFieldNumber = 20,
    kLastTrxnEndVolTotalizerFieldNumber = 22,
    kMopTypeFieldNumber = 21,
    kDiscountRateFieldNumber = 23,
    kPresetIdFieldNumber = 25,
    kTotalDiscountFieldNumber = 24,
  };
  // required string trxnStartTime = 14;
  bool has_trxnstarttime() const;
  private:
  bool _internal_has_trxnstarttime() const;
  public:
  void clear_trxnstarttime();
  const std::string& trxnstarttime() const;
  void set_trxnstarttime(const std::string& value);
  void set_trxnstarttime(std::string&& value);
  void set_trxnstarttime(const char* value);
  void set_trxnstarttime(const char* value, size_t size);
  std::string* mutable_trxnstarttime();
  std::string* release_trxnstarttime();
  void set_allocated_trxnstarttime(std::string* trxnstarttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trxnstarttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trxnstarttime(
      std::string* trxnstarttime);
  private:
  const std::string& _internal_trxnstarttime() const;
  void _internal_set_trxnstarttime(const std::string& value);
  std::string* _internal_mutable_trxnstarttime();
  public:

  // required string trxnEndTime = 15;
  bool has_trxnendtime() const;
  private:
  bool _internal_has_trxnendtime() const;
  public:
  void clear_trxnendtime();
  const std::string& trxnendtime() const;
  void set_trxnendtime(const std::string& value);
  void set_trxnendtime(std::string&& value);
  void set_trxnendtime(const char* value);
  void set_trxnendtime(const char* value, size_t size);
  std::string* mutable_trxnendtime();
  std::string* release_trxnendtime();
  void set_allocated_trxnendtime(std::string* trxnendtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_trxnendtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_trxnendtime(
      std::string* trxnendtime);
  private:
  const std::string& _internal_trxnendtime() const;
  void _internal_set_trxnendtime(const std::string& value);
  std::string* _internal_mutable_trxnendtime();
  public:

  // required uint32 pumpId = 1;
  bool has_pumpid() const;
  private:
  bool _internal_has_pumpid() const;
  public:
  void clear_pumpid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpid() const;
  void set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpid() const;
  void _internal_set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pumpUid = 2;
  bool has_pumpuid() const;
  private:
  bool _internal_has_pumpuid() const;
  public:
  void clear_pumpuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid() const;
  void set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpuid() const;
  void _internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleId = 3;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleUid = 4;
  bool has_nozzleuid() const;
  private:
  bool _internal_has_nozzleuid() const;
  public:
  void clear_nozzleuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid() const;
  void set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleuid() const;
  void _internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float trxnVolume = 5;
  bool has_trxnvolume() const;
  private:
  bool _internal_has_trxnvolume() const;
  public:
  void clear_trxnvolume();
  float trxnvolume() const;
  void set_trxnvolume(float value);
  private:
  float _internal_trxnvolume() const;
  void _internal_set_trxnvolume(float value);
  public:

  // required float trxnAmount = 6;
  bool has_trxnamount() const;
  private:
  bool _internal_has_trxnamount() const;
  public:
  void clear_trxnamount();
  float trxnamount() const;
  void set_trxnamount(float value);
  private:
  float _internal_trxnamount() const;
  void _internal_set_trxnamount(float value);
  public:

  // required double startVolumeTotalizer = 8;
  bool has_startvolumetotalizer() const;
  private:
  bool _internal_has_startvolumetotalizer() const;
  public:
  void clear_startvolumetotalizer();
  double startvolumetotalizer() const;
  void set_startvolumetotalizer(double value);
  private:
  double _internal_startvolumetotalizer() const;
  void _internal_set_startvolumetotalizer(double value);
  public:

  // required float unitRate = 7;
  bool has_unitrate() const;
  private:
  bool _internal_has_unitrate() const;
  public:
  void clear_unitrate();
  float unitrate() const;
  void set_unitrate(float value);
  private:
  float _internal_unitrate() const;
  void _internal_set_unitrate(float value);
  public:

  // required uint32 presetType = 10;
  bool has_presettype() const;
  private:
  bool _internal_has_presettype() const;
  public:
  void clear_presettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 presettype() const;
  void set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_presettype() const;
  void _internal_set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double endVolumeTotalizer = 9;
  bool has_endvolumetotalizer() const;
  private:
  bool _internal_has_endvolumetotalizer() const;
  public:
  void clear_endvolumetotalizer();
  double endvolumetotalizer() const;
  void set_endvolumetotalizer(double value);
  private:
  double _internal_endvolumetotalizer() const;
  void _internal_set_endvolumetotalizer(double value);
  public:

  // optional uint32 presetMode = 11;
  bool has_presetmode() const;
  private:
  bool _internal_has_presetmode() const;
  public:
  void clear_presetmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 presetmode() const;
  void set_presetmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_presetmode() const;
  void _internal_set_presetmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float presetValue = 12;
  bool has_presetvalue() const;
  private:
  bool _internal_has_presetvalue() const;
  public:
  void clear_presetvalue();
  float presetvalue() const;
  void set_presetvalue(float value);
  private:
  float _internal_presetvalue() const;
  void _internal_set_presetvalue(float value);
  public:

  // required uint32 trxnId = 13;
  bool has_trxnid() const;
  private:
  bool _internal_has_trxnid() const;
  public:
  void clear_trxnid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trxnid() const;
  void set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trxnid() const;
  void _internal_set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dayId = 16;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 gradeUid = 17;
  bool has_gradeuid() const;
  private:
  bool _internal_has_gradeuid() const;
  public:
  void clear_gradeuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gradeuid() const;
  void set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gradeuid() const;
  void _internal_set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 pumpMode = 18;
  bool has_pumpmode() const;
  private:
  bool _internal_has_pumpmode() const;
  public:
  void clear_pumpmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpmode() const;
  void set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpmode() const;
  void _internal_set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shiftId = 19;
  bool has_shiftid() const;
  private:
  bool _internal_has_shiftid() const;
  public:
  void clear_shiftid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid() const;
  void set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shiftid() const;
  void _internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dealerShiftId = 20;
  bool has_dealershiftid() const;
  private:
  bool _internal_has_dealershiftid() const;
  public:
  void clear_dealershiftid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dealershiftid() const;
  void set_dealershiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dealershiftid() const;
  void _internal_set_dealershiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double lastTrxnEndVolTotalizer = 22;
  bool has_lasttrxnendvoltotalizer() const;
  private:
  bool _internal_has_lasttrxnendvoltotalizer() const;
  public:
  void clear_lasttrxnendvoltotalizer();
  double lasttrxnendvoltotalizer() const;
  void set_lasttrxnendvoltotalizer(double value);
  private:
  double _internal_lasttrxnendvoltotalizer() const;
  void _internal_set_lasttrxnendvoltotalizer(double value);
  public:

  // required uint32 mopType = 21;
  bool has_moptype() const;
  private:
  bool _internal_has_moptype() const;
  public:
  void clear_moptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 moptype() const;
  void set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_moptype() const;
  void _internal_set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float discountRate = 23;
  bool has_discountrate() const;
  private:
  bool _internal_has_discountrate() const;
  public:
  void clear_discountrate();
  float discountrate() const;
  void set_discountrate(float value);
  private:
  float _internal_discountrate() const;
  void _internal_set_discountrate(float value);
  public:

  // optional double presetId = 25;
  bool has_presetid() const;
  private:
  bool _internal_has_presetid() const;
  public:
  void clear_presetid();
  double presetid() const;
  void set_presetid(double value);
  private:
  double _internal_presetid() const;
  void _internal_set_presetid(double value);
  public:

  // optional float totalDiscount = 24;
  bool has_totaldiscount() const;
  private:
  bool _internal_has_totaldiscount() const;
  public:
  void clear_totaldiscount();
  float totaldiscount() const;
  void set_totaldiscount(float value);
  private:
  float _internal_totaldiscount() const;
  void _internal_set_totaldiscount(float value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.PumpTrxn)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trxnstarttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr trxnendtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid_;
  float trxnvolume_;
  float trxnamount_;
  double startvolumetotalizer_;
  float unitrate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 presettype_;
  double endvolumetotalizer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 presetmode_;
  float presetvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trxnid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gradeuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpmode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dealershiftid_;
  double lasttrxnendvoltotalizer_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moptype_;
  float discountrate_;
  double presetid_;
  float totaldiscount_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class TankInventory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.TankInventory) */ {
 public:
  inline TankInventory() : TankInventory(nullptr) {};
  virtual ~TankInventory();

  TankInventory(const TankInventory& from);
  TankInventory(TankInventory&& from) noexcept
    : TankInventory() {
    *this = ::std::move(from);
  }

  inline TankInventory& operator=(const TankInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline TankInventory& operator=(TankInventory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TankInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TankInventory* internal_default_instance() {
    return reinterpret_cast<const TankInventory*>(
               &_TankInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TankInventory& a, TankInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(TankInventory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TankInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TankInventory* New() const final {
    return CreateMaybeMessage<TankInventory>(nullptr);
  }

  TankInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TankInventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TankInventory& from);
  void MergeFrom(const TankInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TankInventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.TankInventory";
  }
  protected:
  explicit TankInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInventoryTimeFieldNumber = 14,
    kTankIdFieldNumber = 1,
    kTankUidFieldNumber = 2,
    kProductLevelFieldNumber = 3,
    kWaterLevelFieldNumber = 4,
    kProductVolumeFieldNumber = 5,
    kWaterVolumeFieldNumber = 6,
    kTcVolumeFieldNumber = 7,
    kUllageFieldNumber = 8,
    kTemperatureFieldNumber = 9,
    kTankStatusFieldNumber = 10,
    kProductDensityFieldNumber = 11,
    kProductTcDensityFieldNumber = 12,
    kInventoryIdFieldNumber = 13,
    kInventoryModeFieldNumber = 15,
  };
  // required string inventoryTime = 14;
  bool has_inventorytime() const;
  private:
  bool _internal_has_inventorytime() const;
  public:
  void clear_inventorytime();
  const std::string& inventorytime() const;
  void set_inventorytime(const std::string& value);
  void set_inventorytime(std::string&& value);
  void set_inventorytime(const char* value);
  void set_inventorytime(const char* value, size_t size);
  std::string* mutable_inventorytime();
  std::string* release_inventorytime();
  void set_allocated_inventorytime(std::string* inventorytime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_inventorytime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_inventorytime(
      std::string* inventorytime);
  private:
  const std::string& _internal_inventorytime() const;
  void _internal_set_inventorytime(const std::string& value);
  std::string* _internal_mutable_inventorytime();
  public:

  // required uint32 tankId = 1;
  bool has_tankid() const;
  private:
  bool _internal_has_tankid() const;
  public:
  void clear_tankid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid() const;
  void set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankid() const;
  void _internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankUid = 2;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float productLevel = 3;
  bool has_productlevel() const;
  private:
  bool _internal_has_productlevel() const;
  public:
  void clear_productlevel();
  float productlevel() const;
  void set_productlevel(float value);
  private:
  float _internal_productlevel() const;
  void _internal_set_productlevel(float value);
  public:

  // required float waterLevel = 4;
  bool has_waterlevel() const;
  private:
  bool _internal_has_waterlevel() const;
  public:
  void clear_waterlevel();
  float waterlevel() const;
  void set_waterlevel(float value);
  private:
  float _internal_waterlevel() const;
  void _internal_set_waterlevel(float value);
  public:

  // required float productVolume = 5;
  bool has_productvolume() const;
  private:
  bool _internal_has_productvolume() const;
  public:
  void clear_productvolume();
  float productvolume() const;
  void set_productvolume(float value);
  private:
  float _internal_productvolume() const;
  void _internal_set_productvolume(float value);
  public:

  // required float waterVolume = 6;
  bool has_watervolume() const;
  private:
  bool _internal_has_watervolume() const;
  public:
  void clear_watervolume();
  float watervolume() const;
  void set_watervolume(float value);
  private:
  float _internal_watervolume() const;
  void _internal_set_watervolume(float value);
  public:

  // required float tcVolume = 7;
  bool has_tcvolume() const;
  private:
  bool _internal_has_tcvolume() const;
  public:
  void clear_tcvolume();
  float tcvolume() const;
  void set_tcvolume(float value);
  private:
  float _internal_tcvolume() const;
  void _internal_set_tcvolume(float value);
  public:

  // required float ullage = 8;
  bool has_ullage() const;
  private:
  bool _internal_has_ullage() const;
  public:
  void clear_ullage();
  float ullage() const;
  void set_ullage(float value);
  private:
  float _internal_ullage() const;
  void _internal_set_ullage(float value);
  public:

  // required float temperature = 9;
  bool has_temperature() const;
  private:
  bool _internal_has_temperature() const;
  public:
  void clear_temperature();
  float temperature() const;
  void set_temperature(float value);
  private:
  float _internal_temperature() const;
  void _internal_set_temperature(float value);
  public:

  // required uint32 tankStatus = 10;
  bool has_tankstatus() const;
  private:
  bool _internal_has_tankstatus() const;
  public:
  void clear_tankstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus() const;
  void set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankstatus() const;
  void _internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float productDensity = 11;
  bool has_productdensity() const;
  private:
  bool _internal_has_productdensity() const;
  public:
  void clear_productdensity();
  float productdensity() const;
  void set_productdensity(float value);
  private:
  float _internal_productdensity() const;
  void _internal_set_productdensity(float value);
  public:

  // optional float productTcDensity = 12;
  bool has_producttcdensity() const;
  private:
  bool _internal_has_producttcdensity() const;
  public:
  void clear_producttcdensity();
  float producttcdensity() const;
  void set_producttcdensity(float value);
  private:
  float _internal_producttcdensity() const;
  void _internal_set_producttcdensity(float value);
  public:

  // required uint32 inventoryId = 13;
  bool has_inventoryid() const;
  private:
  bool _internal_has_inventoryid() const;
  public:
  void clear_inventoryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid() const;
  void set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventoryid() const;
  void _internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 inventoryMode = 15;
  bool has_inventorymode() const;
  private:
  bool _internal_has_inventorymode() const;
  public:
  void clear_inventorymode();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventorymode() const;
  void set_inventorymode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventorymode() const;
  void _internal_set_inventorymode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.TankInventory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr inventorytime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  float productlevel_;
  float waterlevel_;
  float productvolume_;
  float watervolume_;
  float tcvolume_;
  float ullage_;
  float temperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus_;
  float productdensity_;
  float producttcdensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventorymode_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class TankDelivery PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.TankDelivery) */ {
 public:
  inline TankDelivery() : TankDelivery(nullptr) {};
  virtual ~TankDelivery();

  TankDelivery(const TankDelivery& from);
  TankDelivery(TankDelivery&& from) noexcept
    : TankDelivery() {
    *this = ::std::move(from);
  }

  inline TankDelivery& operator=(const TankDelivery& from) {
    CopyFrom(from);
    return *this;
  }
  inline TankDelivery& operator=(TankDelivery&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TankDelivery& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TankDelivery* internal_default_instance() {
    return reinterpret_cast<const TankDelivery*>(
               &_TankDelivery_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TankDelivery& a, TankDelivery& b) {
    a.Swap(&b);
  }
  inline void Swap(TankDelivery* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TankDelivery* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TankDelivery* New() const final {
    return CreateMaybeMessage<TankDelivery>(nullptr);
  }

  TankDelivery* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TankDelivery>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TankDelivery& from);
  void MergeFrom(const TankDelivery& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TankDelivery* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.TankDelivery";
  }
  protected:
  explicit TankDelivery(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartTimeFieldNumber = 3,
    kEndTimeFieldNumber = 12,
    kTankIdFieldNumber = 1,
    kTankUidFieldNumber = 2,
    kStartProductLevelFieldNumber = 4,
    kStartWaterLevelFieldNumber = 5,
    kStartProductVolumeFieldNumber = 6,
    kStartWaterVolumeFieldNumber = 7,
    kStartProductTcVolumeFieldNumber = 8,
    kStartTemperatureFieldNumber = 9,
    kStartProductDensityFieldNumber = 10,
    kStartProductTcDensityFieldNumber = 11,
    kEndProductLevelFieldNumber = 13,
    kEndWaterLevelFieldNumber = 14,
    kEndProductVolumeFieldNumber = 15,
    kEndWaterVolumeFieldNumber = 16,
    kEndProductTcVolumeFieldNumber = 17,
    kEndTemperatureFieldNumber = 18,
    kEndProductDensityFieldNumber = 19,
    kEndProductTcDensityFieldNumber = 20,
    kDeliveryIdFieldNumber = 21,
    kAtgIdFieldNumber = 22,
    kAtgUidFieldNumber = 23,
  };
  // required string startTime = 3;
  bool has_starttime() const;
  private:
  bool _internal_has_starttime() const;
  public:
  void clear_starttime();
  const std::string& starttime() const;
  void set_starttime(const std::string& value);
  void set_starttime(std::string&& value);
  void set_starttime(const char* value);
  void set_starttime(const char* value, size_t size);
  std::string* mutable_starttime();
  std::string* release_starttime();
  void set_allocated_starttime(std::string* starttime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_starttime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_starttime(
      std::string* starttime);
  private:
  const std::string& _internal_starttime() const;
  void _internal_set_starttime(const std::string& value);
  std::string* _internal_mutable_starttime();
  public:

  // required string endTime = 12;
  bool has_endtime() const;
  private:
  bool _internal_has_endtime() const;
  public:
  void clear_endtime();
  const std::string& endtime() const;
  void set_endtime(const std::string& value);
  void set_endtime(std::string&& value);
  void set_endtime(const char* value);
  void set_endtime(const char* value, size_t size);
  std::string* mutable_endtime();
  std::string* release_endtime();
  void set_allocated_endtime(std::string* endtime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_endtime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_endtime(
      std::string* endtime);
  private:
  const std::string& _internal_endtime() const;
  void _internal_set_endtime(const std::string& value);
  std::string* _internal_mutable_endtime();
  public:

  // required uint32 tankId = 1;
  bool has_tankid() const;
  private:
  bool _internal_has_tankid() const;
  public:
  void clear_tankid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid() const;
  void set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankid() const;
  void _internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankUid = 2;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float startProductLevel = 4;
  bool has_startproductlevel() const;
  private:
  bool _internal_has_startproductlevel() const;
  public:
  void clear_startproductlevel();
  float startproductlevel() const;
  void set_startproductlevel(float value);
  private:
  float _internal_startproductlevel() const;
  void _internal_set_startproductlevel(float value);
  public:

  // required float startWaterLevel = 5;
  bool has_startwaterlevel() const;
  private:
  bool _internal_has_startwaterlevel() const;
  public:
  void clear_startwaterlevel();
  float startwaterlevel() const;
  void set_startwaterlevel(float value);
  private:
  float _internal_startwaterlevel() const;
  void _internal_set_startwaterlevel(float value);
  public:

  // required float startProductVolume = 6;
  bool has_startproductvolume() const;
  private:
  bool _internal_has_startproductvolume() const;
  public:
  void clear_startproductvolume();
  float startproductvolume() const;
  void set_startproductvolume(float value);
  private:
  float _internal_startproductvolume() const;
  void _internal_set_startproductvolume(float value);
  public:

  // required float startWaterVolume = 7;
  bool has_startwatervolume() const;
  private:
  bool _internal_has_startwatervolume() const;
  public:
  void clear_startwatervolume();
  float startwatervolume() const;
  void set_startwatervolume(float value);
  private:
  float _internal_startwatervolume() const;
  void _internal_set_startwatervolume(float value);
  public:

  // required float startProductTcVolume = 8;
  bool has_startproducttcvolume() const;
  private:
  bool _internal_has_startproducttcvolume() const;
  public:
  void clear_startproducttcvolume();
  float startproducttcvolume() const;
  void set_startproducttcvolume(float value);
  private:
  float _internal_startproducttcvolume() const;
  void _internal_set_startproducttcvolume(float value);
  public:

  // required float startTemperature = 9;
  bool has_starttemperature() const;
  private:
  bool _internal_has_starttemperature() const;
  public:
  void clear_starttemperature();
  float starttemperature() const;
  void set_starttemperature(float value);
  private:
  float _internal_starttemperature() const;
  void _internal_set_starttemperature(float value);
  public:

  // optional float startProductDensity = 10;
  bool has_startproductdensity() const;
  private:
  bool _internal_has_startproductdensity() const;
  public:
  void clear_startproductdensity();
  float startproductdensity() const;
  void set_startproductdensity(float value);
  private:
  float _internal_startproductdensity() const;
  void _internal_set_startproductdensity(float value);
  public:

  // optional float startProductTcDensity = 11;
  bool has_startproducttcdensity() const;
  private:
  bool _internal_has_startproducttcdensity() const;
  public:
  void clear_startproducttcdensity();
  float startproducttcdensity() const;
  void set_startproducttcdensity(float value);
  private:
  float _internal_startproducttcdensity() const;
  void _internal_set_startproducttcdensity(float value);
  public:

  // required float endProductLevel = 13;
  bool has_endproductlevel() const;
  private:
  bool _internal_has_endproductlevel() const;
  public:
  void clear_endproductlevel();
  float endproductlevel() const;
  void set_endproductlevel(float value);
  private:
  float _internal_endproductlevel() const;
  void _internal_set_endproductlevel(float value);
  public:

  // required float endWaterLevel = 14;
  bool has_endwaterlevel() const;
  private:
  bool _internal_has_endwaterlevel() const;
  public:
  void clear_endwaterlevel();
  float endwaterlevel() const;
  void set_endwaterlevel(float value);
  private:
  float _internal_endwaterlevel() const;
  void _internal_set_endwaterlevel(float value);
  public:

  // required float endProductVolume = 15;
  bool has_endproductvolume() const;
  private:
  bool _internal_has_endproductvolume() const;
  public:
  void clear_endproductvolume();
  float endproductvolume() const;
  void set_endproductvolume(float value);
  private:
  float _internal_endproductvolume() const;
  void _internal_set_endproductvolume(float value);
  public:

  // required float endWaterVolume = 16;
  bool has_endwatervolume() const;
  private:
  bool _internal_has_endwatervolume() const;
  public:
  void clear_endwatervolume();
  float endwatervolume() const;
  void set_endwatervolume(float value);
  private:
  float _internal_endwatervolume() const;
  void _internal_set_endwatervolume(float value);
  public:

  // required float endProductTcVolume = 17;
  bool has_endproducttcvolume() const;
  private:
  bool _internal_has_endproducttcvolume() const;
  public:
  void clear_endproducttcvolume();
  float endproducttcvolume() const;
  void set_endproducttcvolume(float value);
  private:
  float _internal_endproducttcvolume() const;
  void _internal_set_endproducttcvolume(float value);
  public:

  // required float endTemperature = 18;
  bool has_endtemperature() const;
  private:
  bool _internal_has_endtemperature() const;
  public:
  void clear_endtemperature();
  float endtemperature() const;
  void set_endtemperature(float value);
  private:
  float _internal_endtemperature() const;
  void _internal_set_endtemperature(float value);
  public:

  // optional float endProductDensity = 19;
  bool has_endproductdensity() const;
  private:
  bool _internal_has_endproductdensity() const;
  public:
  void clear_endproductdensity();
  float endproductdensity() const;
  void set_endproductdensity(float value);
  private:
  float _internal_endproductdensity() const;
  void _internal_set_endproductdensity(float value);
  public:

  // optional float endProductTcDensity = 20;
  bool has_endproducttcdensity() const;
  private:
  bool _internal_has_endproducttcdensity() const;
  public:
  void clear_endproducttcdensity();
  float endproducttcdensity() const;
  void set_endproducttcdensity(float value);
  private:
  float _internal_endproducttcdensity() const;
  void _internal_set_endproducttcdensity(float value);
  public:

  // required uint32 deliveryId = 21;
  bool has_deliveryid() const;
  private:
  bool _internal_has_deliveryid() const;
  public:
  void clear_deliveryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deliveryid() const;
  void set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deliveryid() const;
  void _internal_set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 atgId = 22;
  bool has_atgid() const;
  private:
  bool _internal_has_atgid() const;
  public:
  void clear_atgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 atgid() const;
  void set_atgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atgid() const;
  void _internal_set_atgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 atgUid = 23;
  bool has_atguid() const;
  private:
  bool _internal_has_atguid() const;
  public:
  void clear_atguid();
  ::PROTOBUF_NAMESPACE_ID::uint32 atguid() const;
  void set_atguid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_atguid() const;
  void _internal_set_atguid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.TankDelivery)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr starttime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr endtime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  float startproductlevel_;
  float startwaterlevel_;
  float startproductvolume_;
  float startwatervolume_;
  float startproducttcvolume_;
  float starttemperature_;
  float startproductdensity_;
  float startproducttcdensity_;
  float endproductlevel_;
  float endwaterlevel_;
  float endproductvolume_;
  float endwatervolume_;
  float endproducttcvolume_;
  float endtemperature_;
  float endproductdensity_;
  float endproducttcdensity_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deliveryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atgid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 atguid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DeliveryReceipt PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DeliveryReceipt) */ {
 public:
  inline DeliveryReceipt() : DeliveryReceipt(nullptr) {};
  virtual ~DeliveryReceipt();

  DeliveryReceipt(const DeliveryReceipt& from);
  DeliveryReceipt(DeliveryReceipt&& from) noexcept
    : DeliveryReceipt() {
    *this = ::std::move(from);
  }

  inline DeliveryReceipt& operator=(const DeliveryReceipt& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeliveryReceipt& operator=(DeliveryReceipt&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeliveryReceipt& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeliveryReceipt* internal_default_instance() {
    return reinterpret_cast<const DeliveryReceipt*>(
               &_DeliveryReceipt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(DeliveryReceipt& a, DeliveryReceipt& b) {
    a.Swap(&b);
  }
  inline void Swap(DeliveryReceipt* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeliveryReceipt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeliveryReceipt* New() const final {
    return CreateMaybeMessage<DeliveryReceipt>(nullptr);
  }

  DeliveryReceipt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeliveryReceipt>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeliveryReceipt& from);
  void MergeFrom(const DeliveryReceipt& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeliveryReceipt* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DeliveryReceipt";
  }
  protected:
  explicit DeliveryReceipt(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSupplyPointFieldNumber = 3,
    kInvoiceNoFieldNumber = 4,
    kInvoiceDateTimeFieldNumber = 5,
    kTruckNoFieldNumber = 8,
    kDataEntryTimeFieldNumber = 13,
    kTankUidFieldNumber = 1,
    kProductUidFieldNumber = 2,
    kInvoiceQuantityFieldNumber = 6,
    kInvoiceAmountFieldNumber = 7,
    kCompartmentNoFieldNumber = 9,
    kObservedDensityFieldNumber = 10,
    kInvoiceDensityFieldNumber = 11,
    kObservedTemperatureFieldNumber = 12,
    kDeliveryIdFieldNumber = 14,
  };
  // required string supplyPoint = 3;
  bool has_supplypoint() const;
  private:
  bool _internal_has_supplypoint() const;
  public:
  void clear_supplypoint();
  const std::string& supplypoint() const;
  void set_supplypoint(const std::string& value);
  void set_supplypoint(std::string&& value);
  void set_supplypoint(const char* value);
  void set_supplypoint(const char* value, size_t size);
  std::string* mutable_supplypoint();
  std::string* release_supplypoint();
  void set_allocated_supplypoint(std::string* supplypoint);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_supplypoint();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_supplypoint(
      std::string* supplypoint);
  private:
  const std::string& _internal_supplypoint() const;
  void _internal_set_supplypoint(const std::string& value);
  std::string* _internal_mutable_supplypoint();
  public:

  // required string invoiceNo = 4;
  bool has_invoiceno() const;
  private:
  bool _internal_has_invoiceno() const;
  public:
  void clear_invoiceno();
  const std::string& invoiceno() const;
  void set_invoiceno(const std::string& value);
  void set_invoiceno(std::string&& value);
  void set_invoiceno(const char* value);
  void set_invoiceno(const char* value, size_t size);
  std::string* mutable_invoiceno();
  std::string* release_invoiceno();
  void set_allocated_invoiceno(std::string* invoiceno);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invoiceno();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invoiceno(
      std::string* invoiceno);
  private:
  const std::string& _internal_invoiceno() const;
  void _internal_set_invoiceno(const std::string& value);
  std::string* _internal_mutable_invoiceno();
  public:

  // required string invoiceDateTime = 5;
  bool has_invoicedatetime() const;
  private:
  bool _internal_has_invoicedatetime() const;
  public:
  void clear_invoicedatetime();
  const std::string& invoicedatetime() const;
  void set_invoicedatetime(const std::string& value);
  void set_invoicedatetime(std::string&& value);
  void set_invoicedatetime(const char* value);
  void set_invoicedatetime(const char* value, size_t size);
  std::string* mutable_invoicedatetime();
  std::string* release_invoicedatetime();
  void set_allocated_invoicedatetime(std::string* invoicedatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_invoicedatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_invoicedatetime(
      std::string* invoicedatetime);
  private:
  const std::string& _internal_invoicedatetime() const;
  void _internal_set_invoicedatetime(const std::string& value);
  std::string* _internal_mutable_invoicedatetime();
  public:

  // required string truckNo = 8;
  bool has_truckno() const;
  private:
  bool _internal_has_truckno() const;
  public:
  void clear_truckno();
  const std::string& truckno() const;
  void set_truckno(const std::string& value);
  void set_truckno(std::string&& value);
  void set_truckno(const char* value);
  void set_truckno(const char* value, size_t size);
  std::string* mutable_truckno();
  std::string* release_truckno();
  void set_allocated_truckno(std::string* truckno);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_truckno();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_truckno(
      std::string* truckno);
  private:
  const std::string& _internal_truckno() const;
  void _internal_set_truckno(const std::string& value);
  std::string* _internal_mutable_truckno();
  public:

  // required string dataEntryTime = 13;
  bool has_dataentrytime() const;
  private:
  bool _internal_has_dataentrytime() const;
  public:
  void clear_dataentrytime();
  const std::string& dataentrytime() const;
  void set_dataentrytime(const std::string& value);
  void set_dataentrytime(std::string&& value);
  void set_dataentrytime(const char* value);
  void set_dataentrytime(const char* value, size_t size);
  std::string* mutable_dataentrytime();
  std::string* release_dataentrytime();
  void set_allocated_dataentrytime(std::string* dataentrytime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_dataentrytime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_dataentrytime(
      std::string* dataentrytime);
  private:
  const std::string& _internal_dataentrytime() const;
  void _internal_set_dataentrytime(const std::string& value);
  std::string* _internal_mutable_dataentrytime();
  public:

  // required uint32 tankUid = 1;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 productUid = 2;
  bool has_productuid() const;
  private:
  bool _internal_has_productuid() const;
  public:
  void clear_productuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 productuid() const;
  void set_productuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_productuid() const;
  void _internal_set_productuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float invoiceQuantity = 6;
  bool has_invoicequantity() const;
  private:
  bool _internal_has_invoicequantity() const;
  public:
  void clear_invoicequantity();
  float invoicequantity() const;
  void set_invoicequantity(float value);
  private:
  float _internal_invoicequantity() const;
  void _internal_set_invoicequantity(float value);
  public:

  // required float invoiceAmount = 7;
  bool has_invoiceamount() const;
  private:
  bool _internal_has_invoiceamount() const;
  public:
  void clear_invoiceamount();
  float invoiceamount() const;
  void set_invoiceamount(float value);
  private:
  float _internal_invoiceamount() const;
  void _internal_set_invoiceamount(float value);
  public:

  // required uint32 compartmentNo = 9;
  bool has_compartmentno() const;
  private:
  bool _internal_has_compartmentno() const;
  public:
  void clear_compartmentno();
  ::PROTOBUF_NAMESPACE_ID::uint32 compartmentno() const;
  void set_compartmentno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_compartmentno() const;
  void _internal_set_compartmentno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float observedDensity = 10;
  bool has_observeddensity() const;
  private:
  bool _internal_has_observeddensity() const;
  public:
  void clear_observeddensity();
  float observeddensity() const;
  void set_observeddensity(float value);
  private:
  float _internal_observeddensity() const;
  void _internal_set_observeddensity(float value);
  public:

  // required float invoiceDensity = 11;
  bool has_invoicedensity() const;
  private:
  bool _internal_has_invoicedensity() const;
  public:
  void clear_invoicedensity();
  float invoicedensity() const;
  void set_invoicedensity(float value);
  private:
  float _internal_invoicedensity() const;
  void _internal_set_invoicedensity(float value);
  public:

  // required float observedTemperature = 12;
  bool has_observedtemperature() const;
  private:
  bool _internal_has_observedtemperature() const;
  public:
  void clear_observedtemperature();
  float observedtemperature() const;
  void set_observedtemperature(float value);
  private:
  float _internal_observedtemperature() const;
  void _internal_set_observedtemperature(float value);
  public:

  // required uint32 deliveryId = 14;
  bool has_deliveryid() const;
  private:
  bool _internal_has_deliveryid() const;
  public:
  void clear_deliveryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deliveryid() const;
  void set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deliveryid() const;
  void _internal_set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DeliveryReceipt)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr supplypoint_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoiceno_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr invoicedatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr truckno_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr dataentrytime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 productuid_;
  float invoicequantity_;
  float invoiceamount_;
  ::PROTOBUF_NAMESPACE_ID::uint32 compartmentno_;
  float observeddensity_;
  float invoicedensity_;
  float observedtemperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deliveryid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class AlarmDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.AlarmDetails) */ {
 public:
  inline AlarmDetails() : AlarmDetails(nullptr) {};
  virtual ~AlarmDetails();

  AlarmDetails(const AlarmDetails& from);
  AlarmDetails(AlarmDetails&& from) noexcept
    : AlarmDetails() {
    *this = ::std::move(from);
  }

  inline AlarmDetails& operator=(const AlarmDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmDetails& operator=(AlarmDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmDetails* internal_default_instance() {
    return reinterpret_cast<const AlarmDetails*>(
               &_AlarmDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(AlarmDetails& a, AlarmDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmDetails* New() const final {
    return CreateMaybeMessage<AlarmDetails>(nullptr);
  }

  AlarmDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmDetails& from);
  void MergeFrom(const AlarmDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.AlarmDetails";
  }
  protected:
  explicit AlarmDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 6,
    kParam1FieldNumber = 8,
    kParam2FieldNumber = 9,
    kParam3FieldNumber = 10,
    kParam4FieldNumber = 11,
    kParam5FieldNumber = 12,
    kAlarmIdFieldNumber = 1,
    kAlarmSequenceIdFieldNumber = 2,
    kAlarmTrxnCodeFieldNumber = 3,
    kDeviceIdFieldNumber = 4,
    kNozzleIdFieldNumber = 5,
    kAlarmStateFieldNumber = 7,
  };
  // required string dateTime = 6;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datetime(
      std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // optional string param1 = 8;
  bool has_param1() const;
  private:
  bool _internal_has_param1() const;
  public:
  void clear_param1();
  const std::string& param1() const;
  void set_param1(const std::string& value);
  void set_param1(std::string&& value);
  void set_param1(const char* value);
  void set_param1(const char* value, size_t size);
  std::string* mutable_param1();
  std::string* release_param1();
  void set_allocated_param1(std::string* param1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param1(
      std::string* param1);
  private:
  const std::string& _internal_param1() const;
  void _internal_set_param1(const std::string& value);
  std::string* _internal_mutable_param1();
  public:

  // optional string param2 = 9;
  bool has_param2() const;
  private:
  bool _internal_has_param2() const;
  public:
  void clear_param2();
  const std::string& param2() const;
  void set_param2(const std::string& value);
  void set_param2(std::string&& value);
  void set_param2(const char* value);
  void set_param2(const char* value, size_t size);
  std::string* mutable_param2();
  std::string* release_param2();
  void set_allocated_param2(std::string* param2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param2(
      std::string* param2);
  private:
  const std::string& _internal_param2() const;
  void _internal_set_param2(const std::string& value);
  std::string* _internal_mutable_param2();
  public:

  // optional string param3 = 10;
  bool has_param3() const;
  private:
  bool _internal_has_param3() const;
  public:
  void clear_param3();
  const std::string& param3() const;
  void set_param3(const std::string& value);
  void set_param3(std::string&& value);
  void set_param3(const char* value);
  void set_param3(const char* value, size_t size);
  std::string* mutable_param3();
  std::string* release_param3();
  void set_allocated_param3(std::string* param3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param3(
      std::string* param3);
  private:
  const std::string& _internal_param3() const;
  void _internal_set_param3(const std::string& value);
  std::string* _internal_mutable_param3();
  public:

  // optional string param4 = 11;
  bool has_param4() const;
  private:
  bool _internal_has_param4() const;
  public:
  void clear_param4();
  const std::string& param4() const;
  void set_param4(const std::string& value);
  void set_param4(std::string&& value);
  void set_param4(const char* value);
  void set_param4(const char* value, size_t size);
  std::string* mutable_param4();
  std::string* release_param4();
  void set_allocated_param4(std::string* param4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param4(
      std::string* param4);
  private:
  const std::string& _internal_param4() const;
  void _internal_set_param4(const std::string& value);
  std::string* _internal_mutable_param4();
  public:

  // optional string param5 = 12;
  bool has_param5() const;
  private:
  bool _internal_has_param5() const;
  public:
  void clear_param5();
  const std::string& param5() const;
  void set_param5(const std::string& value);
  void set_param5(std::string&& value);
  void set_param5(const char* value);
  void set_param5(const char* value, size_t size);
  std::string* mutable_param5();
  std::string* release_param5();
  void set_allocated_param5(std::string* param5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param5(
      std::string* param5);
  private:
  const std::string& _internal_param5() const;
  void _internal_set_param5(const std::string& value);
  std::string* _internal_mutable_param5();
  public:

  // required uint32 alarmId = 1;
  bool has_alarmid() const;
  private:
  bool _internal_has_alarmid() const;
  public:
  void clear_alarmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmid() const;
  void set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmid() const;
  void _internal_set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 alarmSequenceId = 2;
  bool has_alarmsequenceid() const;
  private:
  bool _internal_has_alarmsequenceid() const;
  public:
  void clear_alarmsequenceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmsequenceid() const;
  void set_alarmsequenceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmsequenceid() const;
  void _internal_set_alarmsequenceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 alarmTrxnCode = 3;
  bool has_alarmtrxncode() const;
  private:
  bool _internal_has_alarmtrxncode() const;
  public:
  void clear_alarmtrxncode();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmtrxncode() const;
  void set_alarmtrxncode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmtrxncode() const;
  void _internal_set_alarmtrxncode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deviceId = 4;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nozzleId = 5;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 alarmState = 7;
  bool has_alarmstate() const;
  private:
  bool _internal_has_alarmstate() const;
  public:
  void clear_alarmstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmstate() const;
  void set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmstate() const;
  void _internal_set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.AlarmDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmsequenceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmtrxncode_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmstate_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DayEndDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DayEndDetails) */ {
 public:
  inline DayEndDetails() : DayEndDetails(nullptr) {};
  virtual ~DayEndDetails();

  DayEndDetails(const DayEndDetails& from);
  DayEndDetails(DayEndDetails&& from) noexcept
    : DayEndDetails() {
    *this = ::std::move(from);
  }

  inline DayEndDetails& operator=(const DayEndDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline DayEndDetails& operator=(DayEndDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DayEndDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DayEndDetails* internal_default_instance() {
    return reinterpret_cast<const DayEndDetails*>(
               &_DayEndDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(DayEndDetails& a, DayEndDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(DayEndDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DayEndDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DayEndDetails* New() const final {
    return CreateMaybeMessage<DayEndDetails>(nullptr);
  }

  DayEndDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DayEndDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DayEndDetails& from);
  void MergeFrom(const DayEndDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DayEndDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DayEndDetails";
  }
  protected:
  explicit DayEndDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenTimeFieldNumber = 2,
    kCloseTimeFieldNumber = 3,
    kDayIdFieldNumber = 1,
    kStatusFieldNumber = 4,
  };
  // optional string openTime = 2;
  bool has_opentime() const;
  private:
  bool _internal_has_opentime() const;
  public:
  void clear_opentime();
  const std::string& opentime() const;
  void set_opentime(const std::string& value);
  void set_opentime(std::string&& value);
  void set_opentime(const char* value);
  void set_opentime(const char* value, size_t size);
  std::string* mutable_opentime();
  std::string* release_opentime();
  void set_allocated_opentime(std::string* opentime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_opentime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_opentime(
      std::string* opentime);
  private:
  const std::string& _internal_opentime() const;
  void _internal_set_opentime(const std::string& value);
  std::string* _internal_mutable_opentime();
  public:

  // optional string closeTime = 3;
  bool has_closetime() const;
  private:
  bool _internal_has_closetime() const;
  public:
  void clear_closetime();
  const std::string& closetime() const;
  void set_closetime(const std::string& value);
  void set_closetime(std::string&& value);
  void set_closetime(const char* value);
  void set_closetime(const char* value, size_t size);
  std::string* mutable_closetime();
  std::string* release_closetime();
  void set_allocated_closetime(std::string* closetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_closetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_closetime(
      std::string* closetime);
  private:
  const std::string& _internal_closetime() const;
  void _internal_set_closetime(const std::string& value);
  std::string* _internal_mutable_closetime();
  public:

  // required uint32 dayId = 1;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DayEndDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opentime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DayEndTotalizer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DayEndTotalizer) */ {
 public:
  inline DayEndTotalizer() : DayEndTotalizer(nullptr) {};
  virtual ~DayEndTotalizer();

  DayEndTotalizer(const DayEndTotalizer& from);
  DayEndTotalizer(DayEndTotalizer&& from) noexcept
    : DayEndTotalizer() {
    *this = ::std::move(from);
  }

  inline DayEndTotalizer& operator=(const DayEndTotalizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline DayEndTotalizer& operator=(DayEndTotalizer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DayEndTotalizer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DayEndTotalizer* internal_default_instance() {
    return reinterpret_cast<const DayEndTotalizer*>(
               &_DayEndTotalizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(DayEndTotalizer& a, DayEndTotalizer& b) {
    a.Swap(&b);
  }
  inline void Swap(DayEndTotalizer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DayEndTotalizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DayEndTotalizer* New() const final {
    return CreateMaybeMessage<DayEndTotalizer>(nullptr);
  }

  DayEndTotalizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DayEndTotalizer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DayEndTotalizer& from);
  void MergeFrom(const DayEndTotalizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DayEndTotalizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DayEndTotalizer";
  }
  protected:
  explicit DayEndTotalizer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayIdFieldNumber = 1,
    kNozzleUidFieldNumber = 2,
    kStartTotalizerFieldNumber = 3,
    kEndTotalizerFieldNumber = 4,
    kTotalSaleVolumeFieldNumber = 5,
    kRecordIdFieldNumber = 6,
    kStatusFieldNumber = 7,
  };
  // required uint32 dayId = 1;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleUid = 2;
  bool has_nozzleuid() const;
  private:
  bool _internal_has_nozzleuid() const;
  public:
  void clear_nozzleuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid() const;
  void set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleuid() const;
  void _internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double startTotalizer = 3;
  bool has_starttotalizer() const;
  private:
  bool _internal_has_starttotalizer() const;
  public:
  void clear_starttotalizer();
  double starttotalizer() const;
  void set_starttotalizer(double value);
  private:
  double _internal_starttotalizer() const;
  void _internal_set_starttotalizer(double value);
  public:

  // optional double endTotalizer = 4;
  bool has_endtotalizer() const;
  private:
  bool _internal_has_endtotalizer() const;
  public:
  void clear_endtotalizer();
  double endtotalizer() const;
  void set_endtotalizer(double value);
  private:
  double _internal_endtotalizer() const;
  void _internal_set_endtotalizer(double value);
  public:

  // optional double totalSaleVolume = 5;
  bool has_totalsalevolume() const;
  private:
  bool _internal_has_totalsalevolume() const;
  public:
  void clear_totalsalevolume();
  double totalsalevolume() const;
  void set_totalsalevolume(double value);
  private:
  double _internal_totalsalevolume() const;
  void _internal_set_totalsalevolume(double value);
  public:

  // required uint32 recordId = 6;
  bool has_recordid() const;
  private:
  bool _internal_has_recordid() const;
  public:
  void clear_recordid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recordid() const;
  void set_recordid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recordid() const;
  void _internal_set_recordid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 7;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DayEndTotalizer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid_;
  double starttotalizer_;
  double endtotalizer_;
  double totalsalevolume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recordid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DayEndInventory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DayEndInventory) */ {
 public:
  inline DayEndInventory() : DayEndInventory(nullptr) {};
  virtual ~DayEndInventory();

  DayEndInventory(const DayEndInventory& from);
  DayEndInventory(DayEndInventory&& from) noexcept
    : DayEndInventory() {
    *this = ::std::move(from);
  }

  inline DayEndInventory& operator=(const DayEndInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline DayEndInventory& operator=(DayEndInventory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DayEndInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DayEndInventory* internal_default_instance() {
    return reinterpret_cast<const DayEndInventory*>(
               &_DayEndInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(DayEndInventory& a, DayEndInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(DayEndInventory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DayEndInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DayEndInventory* New() const final {
    return CreateMaybeMessage<DayEndInventory>(nullptr);
  }

  DayEndInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DayEndInventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DayEndInventory& from);
  void MergeFrom(const DayEndInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DayEndInventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DayEndInventory";
  }
  protected:
  explicit DayEndInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDayIdFieldNumber = 1,
    kTankUidFieldNumber = 2,
    kStartProductLevelFieldNumber = 3,
    kStartWaterLevelFieldNumber = 4,
    kStartProductVolumeFieldNumber = 5,
    kStartWaterVolumeFieldNumber = 6,
    kStartProductTcVolumeFieldNumber = 7,
    kStartTemperatureFieldNumber = 8,
    kStartProductDensityFieldNumber = 9,
    kStartProductTcDensityFieldNumber = 10,
    kStartUllageFieldNumber = 11,
    kEndProductLevelFieldNumber = 12,
    kEndWaterLevelFieldNumber = 13,
    kEndProductVolumeFieldNumber = 14,
    kEndWaterVolumeFieldNumber = 15,
    kEndProductTcVolumeFieldNumber = 16,
    kEndTemperatureFieldNumber = 17,
    kEndProductDensityFieldNumber = 18,
    kEndProductTcDensityFieldNumber = 19,
    kEndUllageFieldNumber = 20,
    kTotalSaleVolumeFieldNumber = 21,
    kInventoryIdFieldNumber = 22,
    kTankStatusFieldNumber = 23,
    kRecordUidFieldNumber = 24,
    kStatusFieldNumber = 25,
  };
  // required uint32 dayId = 1;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankUid = 2;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float startProductLevel = 3;
  bool has_startproductlevel() const;
  private:
  bool _internal_has_startproductlevel() const;
  public:
  void clear_startproductlevel();
  float startproductlevel() const;
  void set_startproductlevel(float value);
  private:
  float _internal_startproductlevel() const;
  void _internal_set_startproductlevel(float value);
  public:

  // required float startWaterLevel = 4;
  bool has_startwaterlevel() const;
  private:
  bool _internal_has_startwaterlevel() const;
  public:
  void clear_startwaterlevel();
  float startwaterlevel() const;
  void set_startwaterlevel(float value);
  private:
  float _internal_startwaterlevel() const;
  void _internal_set_startwaterlevel(float value);
  public:

  // required float startProductVolume = 5;
  bool has_startproductvolume() const;
  private:
  bool _internal_has_startproductvolume() const;
  public:
  void clear_startproductvolume();
  float startproductvolume() const;
  void set_startproductvolume(float value);
  private:
  float _internal_startproductvolume() const;
  void _internal_set_startproductvolume(float value);
  public:

  // required float startWaterVolume = 6;
  bool has_startwatervolume() const;
  private:
  bool _internal_has_startwatervolume() const;
  public:
  void clear_startwatervolume();
  float startwatervolume() const;
  void set_startwatervolume(float value);
  private:
  float _internal_startwatervolume() const;
  void _internal_set_startwatervolume(float value);
  public:

  // required float startProductTcVolume = 7;
  bool has_startproducttcvolume() const;
  private:
  bool _internal_has_startproducttcvolume() const;
  public:
  void clear_startproducttcvolume();
  float startproducttcvolume() const;
  void set_startproducttcvolume(float value);
  private:
  float _internal_startproducttcvolume() const;
  void _internal_set_startproducttcvolume(float value);
  public:

  // required float startTemperature = 8;
  bool has_starttemperature() const;
  private:
  bool _internal_has_starttemperature() const;
  public:
  void clear_starttemperature();
  float starttemperature() const;
  void set_starttemperature(float value);
  private:
  float _internal_starttemperature() const;
  void _internal_set_starttemperature(float value);
  public:

  // optional float startProductDensity = 9;
  bool has_startproductdensity() const;
  private:
  bool _internal_has_startproductdensity() const;
  public:
  void clear_startproductdensity();
  float startproductdensity() const;
  void set_startproductdensity(float value);
  private:
  float _internal_startproductdensity() const;
  void _internal_set_startproductdensity(float value);
  public:

  // optional float startProductTcDensity = 10;
  bool has_startproducttcdensity() const;
  private:
  bool _internal_has_startproducttcdensity() const;
  public:
  void clear_startproducttcdensity();
  float startproducttcdensity() const;
  void set_startproducttcdensity(float value);
  private:
  float _internal_startproducttcdensity() const;
  void _internal_set_startproducttcdensity(float value);
  public:

  // required float startUllage = 11;
  bool has_startullage() const;
  private:
  bool _internal_has_startullage() const;
  public:
  void clear_startullage();
  float startullage() const;
  void set_startullage(float value);
  private:
  float _internal_startullage() const;
  void _internal_set_startullage(float value);
  public:

  // optional float endProductLevel = 12;
  bool has_endproductlevel() const;
  private:
  bool _internal_has_endproductlevel() const;
  public:
  void clear_endproductlevel();
  float endproductlevel() const;
  void set_endproductlevel(float value);
  private:
  float _internal_endproductlevel() const;
  void _internal_set_endproductlevel(float value);
  public:

  // optional float endWaterLevel = 13;
  bool has_endwaterlevel() const;
  private:
  bool _internal_has_endwaterlevel() const;
  public:
  void clear_endwaterlevel();
  float endwaterlevel() const;
  void set_endwaterlevel(float value);
  private:
  float _internal_endwaterlevel() const;
  void _internal_set_endwaterlevel(float value);
  public:

  // optional float endProductVolume = 14;
  bool has_endproductvolume() const;
  private:
  bool _internal_has_endproductvolume() const;
  public:
  void clear_endproductvolume();
  float endproductvolume() const;
  void set_endproductvolume(float value);
  private:
  float _internal_endproductvolume() const;
  void _internal_set_endproductvolume(float value);
  public:

  // optional float endWaterVolume = 15;
  bool has_endwatervolume() const;
  private:
  bool _internal_has_endwatervolume() const;
  public:
  void clear_endwatervolume();
  float endwatervolume() const;
  void set_endwatervolume(float value);
  private:
  float _internal_endwatervolume() const;
  void _internal_set_endwatervolume(float value);
  public:

  // optional float endProductTcVolume = 16;
  bool has_endproducttcvolume() const;
  private:
  bool _internal_has_endproducttcvolume() const;
  public:
  void clear_endproducttcvolume();
  float endproducttcvolume() const;
  void set_endproducttcvolume(float value);
  private:
  float _internal_endproducttcvolume() const;
  void _internal_set_endproducttcvolume(float value);
  public:

  // optional float endTemperature = 17;
  bool has_endtemperature() const;
  private:
  bool _internal_has_endtemperature() const;
  public:
  void clear_endtemperature();
  float endtemperature() const;
  void set_endtemperature(float value);
  private:
  float _internal_endtemperature() const;
  void _internal_set_endtemperature(float value);
  public:

  // optional float endProductDensity = 18;
  bool has_endproductdensity() const;
  private:
  bool _internal_has_endproductdensity() const;
  public:
  void clear_endproductdensity();
  float endproductdensity() const;
  void set_endproductdensity(float value);
  private:
  float _internal_endproductdensity() const;
  void _internal_set_endproductdensity(float value);
  public:

  // optional float endProductTcDensity = 19;
  bool has_endproducttcdensity() const;
  private:
  bool _internal_has_endproducttcdensity() const;
  public:
  void clear_endproducttcdensity();
  float endproducttcdensity() const;
  void set_endproducttcdensity(float value);
  private:
  float _internal_endproducttcdensity() const;
  void _internal_set_endproducttcdensity(float value);
  public:

  // optional float endUllage = 20;
  bool has_endullage() const;
  private:
  bool _internal_has_endullage() const;
  public:
  void clear_endullage();
  float endullage() const;
  void set_endullage(float value);
  private:
  float _internal_endullage() const;
  void _internal_set_endullage(float value);
  public:

  // optional double totalSaleVolume = 21;
  bool has_totalsalevolume() const;
  private:
  bool _internal_has_totalsalevolume() const;
  public:
  void clear_totalsalevolume();
  double totalsalevolume() const;
  void set_totalsalevolume(double value);
  private:
  double _internal_totalsalevolume() const;
  void _internal_set_totalsalevolume(double value);
  public:

  // optional uint32 inventoryId = 22;
  bool has_inventoryid() const;
  private:
  bool _internal_has_inventoryid() const;
  public:
  void clear_inventoryid();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid() const;
  void set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventoryid() const;
  void _internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tankStatus = 23;
  bool has_tankstatus() const;
  private:
  bool _internal_has_tankstatus() const;
  public:
  void clear_tankstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus() const;
  void set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankstatus() const;
  void _internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recordUid = 24;
  bool has_recorduid() const;
  private:
  bool _internal_has_recorduid() const;
  public:
  void clear_recorduid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid() const;
  void set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recorduid() const;
  void _internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 25;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DayEndInventory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  float startproductlevel_;
  float startwaterlevel_;
  float startproductvolume_;
  float startwatervolume_;
  float startproducttcvolume_;
  float starttemperature_;
  float startproductdensity_;
  float startproducttcdensity_;
  float startullage_;
  float endproductlevel_;
  float endwaterlevel_;
  float endproductvolume_;
  float endwatervolume_;
  float endproducttcvolume_;
  float endtemperature_;
  float endproductdensity_;
  float endproducttcdensity_;
  float endullage_;
  double totalsalevolume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class ShiftEndDetails PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.ShiftEndDetails) */ {
 public:
  inline ShiftEndDetails() : ShiftEndDetails(nullptr) {};
  virtual ~ShiftEndDetails();

  ShiftEndDetails(const ShiftEndDetails& from);
  ShiftEndDetails(ShiftEndDetails&& from) noexcept
    : ShiftEndDetails() {
    *this = ::std::move(from);
  }

  inline ShiftEndDetails& operator=(const ShiftEndDetails& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftEndDetails& operator=(ShiftEndDetails&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShiftEndDetails& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftEndDetails* internal_default_instance() {
    return reinterpret_cast<const ShiftEndDetails*>(
               &_ShiftEndDetails_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(ShiftEndDetails& a, ShiftEndDetails& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftEndDetails* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftEndDetails* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShiftEndDetails* New() const final {
    return CreateMaybeMessage<ShiftEndDetails>(nullptr);
  }

  ShiftEndDetails* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShiftEndDetails>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShiftEndDetails& from);
  void MergeFrom(const ShiftEndDetails& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftEndDetails* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.ShiftEndDetails";
  }
  protected:
  explicit ShiftEndDetails(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOpenTimeFieldNumber = 4,
    kCloseTimeFieldNumber = 5,
    kShiftIdFieldNumber = 1,
    kShiftTypeFieldNumber = 2,
    kDayIdFieldNumber = 3,
    kStatusFieldNumber = 6,
    kRecordUidFieldNumber = 7,
  };
  // optional string openTime = 4;
  bool has_opentime() const;
  private:
  bool _internal_has_opentime() const;
  public:
  void clear_opentime();
  const std::string& opentime() const;
  void set_opentime(const std::string& value);
  void set_opentime(std::string&& value);
  void set_opentime(const char* value);
  void set_opentime(const char* value, size_t size);
  std::string* mutable_opentime();
  std::string* release_opentime();
  void set_allocated_opentime(std::string* opentime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_opentime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_opentime(
      std::string* opentime);
  private:
  const std::string& _internal_opentime() const;
  void _internal_set_opentime(const std::string& value);
  std::string* _internal_mutable_opentime();
  public:

  // optional string closeTime = 5;
  bool has_closetime() const;
  private:
  bool _internal_has_closetime() const;
  public:
  void clear_closetime();
  const std::string& closetime() const;
  void set_closetime(const std::string& value);
  void set_closetime(std::string&& value);
  void set_closetime(const char* value);
  void set_closetime(const char* value, size_t size);
  std::string* mutable_closetime();
  std::string* release_closetime();
  void set_allocated_closetime(std::string* closetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_closetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_closetime(
      std::string* closetime);
  private:
  const std::string& _internal_closetime() const;
  void _internal_set_closetime(const std::string& value);
  std::string* _internal_mutable_closetime();
  public:

  // required uint32 shiftId = 1;
  bool has_shiftid() const;
  private:
  bool _internal_has_shiftid() const;
  public:
  void clear_shiftid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid() const;
  void set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shiftid() const;
  void _internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shiftType = 2;
  bool has_shifttype() const;
  private:
  bool _internal_has_shifttype() const;
  public:
  void clear_shifttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype() const;
  void set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shifttype() const;
  void _internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dayId = 3;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 6;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recordUid = 7;
  bool has_recorduid() const;
  private:
  bool _internal_has_recorduid() const;
  public:
  void clear_recorduid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid() const;
  void set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recorduid() const;
  void _internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.ShiftEndDetails)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr opentime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr closetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class ShiftEndTotalizer PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.ShiftEndTotalizer) */ {
 public:
  inline ShiftEndTotalizer() : ShiftEndTotalizer(nullptr) {};
  virtual ~ShiftEndTotalizer();

  ShiftEndTotalizer(const ShiftEndTotalizer& from);
  ShiftEndTotalizer(ShiftEndTotalizer&& from) noexcept
    : ShiftEndTotalizer() {
    *this = ::std::move(from);
  }

  inline ShiftEndTotalizer& operator=(const ShiftEndTotalizer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftEndTotalizer& operator=(ShiftEndTotalizer&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShiftEndTotalizer& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftEndTotalizer* internal_default_instance() {
    return reinterpret_cast<const ShiftEndTotalizer*>(
               &_ShiftEndTotalizer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(ShiftEndTotalizer& a, ShiftEndTotalizer& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftEndTotalizer* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftEndTotalizer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShiftEndTotalizer* New() const final {
    return CreateMaybeMessage<ShiftEndTotalizer>(nullptr);
  }

  ShiftEndTotalizer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShiftEndTotalizer>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShiftEndTotalizer& from);
  void MergeFrom(const ShiftEndTotalizer& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftEndTotalizer* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.ShiftEndTotalizer";
  }
  protected:
  explicit ShiftEndTotalizer(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNozzleStatusFieldNumber = 11,
    kShiftIdFieldNumber = 1,
    kShiftTypeFieldNumber = 2,
    kDayIdFieldNumber = 3,
    kRecordUidFieldNumber = 4,
    kNozzleUidFieldNumber = 5,
    kTankNoFieldNumber = 6,
    kStartTotalizerFieldNumber = 7,
    kEndTotalizerFieldNumber = 8,
    kTotalSaleVolumeFieldNumber = 9,
    kLastTrxnIdFieldNumber = 10,
    kStatusFieldNumber = 12,
  };
  // optional string nozzleStatus = 11;
  bool has_nozzlestatus() const;
  private:
  bool _internal_has_nozzlestatus() const;
  public:
  void clear_nozzlestatus();
  const std::string& nozzlestatus() const;
  void set_nozzlestatus(const std::string& value);
  void set_nozzlestatus(std::string&& value);
  void set_nozzlestatus(const char* value);
  void set_nozzlestatus(const char* value, size_t size);
  std::string* mutable_nozzlestatus();
  std::string* release_nozzlestatus();
  void set_allocated_nozzlestatus(std::string* nozzlestatus);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_nozzlestatus();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_nozzlestatus(
      std::string* nozzlestatus);
  private:
  const std::string& _internal_nozzlestatus() const;
  void _internal_set_nozzlestatus(const std::string& value);
  std::string* _internal_mutable_nozzlestatus();
  public:

  // required uint32 shiftId = 1;
  bool has_shiftid() const;
  private:
  bool _internal_has_shiftid() const;
  public:
  void clear_shiftid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid() const;
  void set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shiftid() const;
  void _internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shiftType = 2;
  bool has_shifttype() const;
  private:
  bool _internal_has_shifttype() const;
  public:
  void clear_shifttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype() const;
  void set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shifttype() const;
  void _internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dayId = 3;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recordUid = 4;
  bool has_recorduid() const;
  private:
  bool _internal_has_recorduid() const;
  public:
  void clear_recorduid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid() const;
  void set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recorduid() const;
  void _internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleUid = 5;
  bool has_nozzleuid() const;
  private:
  bool _internal_has_nozzleuid() const;
  public:
  void clear_nozzleuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid() const;
  void set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleuid() const;
  void _internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankNo = 6;
  bool has_tankno() const;
  private:
  bool _internal_has_tankno() const;
  public:
  void clear_tankno();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankno() const;
  void set_tankno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankno() const;
  void _internal_set_tankno(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required double startTotalizer = 7;
  bool has_starttotalizer() const;
  private:
  bool _internal_has_starttotalizer() const;
  public:
  void clear_starttotalizer();
  double starttotalizer() const;
  void set_starttotalizer(double value);
  private:
  double _internal_starttotalizer() const;
  void _internal_set_starttotalizer(double value);
  public:

  // optional double endTotalizer = 8;
  bool has_endtotalizer() const;
  private:
  bool _internal_has_endtotalizer() const;
  public:
  void clear_endtotalizer();
  double endtotalizer() const;
  void set_endtotalizer(double value);
  private:
  double _internal_endtotalizer() const;
  void _internal_set_endtotalizer(double value);
  public:

  // optional double totalSaleVolume = 9;
  bool has_totalsalevolume() const;
  private:
  bool _internal_has_totalsalevolume() const;
  public:
  void clear_totalsalevolume();
  double totalsalevolume() const;
  void set_totalsalevolume(double value);
  private:
  double _internal_totalsalevolume() const;
  void _internal_set_totalsalevolume(double value);
  public:

  // optional uint32 lastTrxnId = 10;
  bool has_lasttrxnid() const;
  private:
  bool _internal_has_lasttrxnid() const;
  public:
  void clear_lasttrxnid();
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttrxnid() const;
  void set_lasttrxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_lasttrxnid() const;
  void _internal_set_lasttrxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 12;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.ShiftEndTotalizer)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr nozzlestatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankno_;
  double starttotalizer_;
  double endtotalizer_;
  double totalsalevolume_;
  ::PROTOBUF_NAMESPACE_ID::uint32 lasttrxnid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class ShiftEndInventory PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.ShiftEndInventory) */ {
 public:
  inline ShiftEndInventory() : ShiftEndInventory(nullptr) {};
  virtual ~ShiftEndInventory();

  ShiftEndInventory(const ShiftEndInventory& from);
  ShiftEndInventory(ShiftEndInventory&& from) noexcept
    : ShiftEndInventory() {
    *this = ::std::move(from);
  }

  inline ShiftEndInventory& operator=(const ShiftEndInventory& from) {
    CopyFrom(from);
    return *this;
  }
  inline ShiftEndInventory& operator=(ShiftEndInventory&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ShiftEndInventory& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ShiftEndInventory* internal_default_instance() {
    return reinterpret_cast<const ShiftEndInventory*>(
               &_ShiftEndInventory_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(ShiftEndInventory& a, ShiftEndInventory& b) {
    a.Swap(&b);
  }
  inline void Swap(ShiftEndInventory* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ShiftEndInventory* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ShiftEndInventory* New() const final {
    return CreateMaybeMessage<ShiftEndInventory>(nullptr);
  }

  ShiftEndInventory* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ShiftEndInventory>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ShiftEndInventory& from);
  void MergeFrom(const ShiftEndInventory& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ShiftEndInventory* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.ShiftEndInventory";
  }
  protected:
  explicit ShiftEndInventory(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kShiftIdFieldNumber = 1,
    kShiftTypeFieldNumber = 2,
    kRecordUidFieldNumber = 3,
    kDayIdFieldNumber = 4,
    kTankUidFieldNumber = 5,
    kStartProductLevelFieldNumber = 6,
    kStartWaterLevelFieldNumber = 7,
    kStartProductVolumeFieldNumber = 8,
    kStartWaterVolumeFieldNumber = 9,
    kStartProductTcVolumeFieldNumber = 10,
    kStartProductDensityFieldNumber = 11,
    kStartProductTcDensityFieldNumber = 12,
    kStartUllageFieldNumber = 13,
    kStartTemperatureFieldNumber = 14,
    kEndProductLevelFieldNumber = 15,
    kEndWaterLevelFieldNumber = 16,
    kEndProductVolumeFieldNumber = 17,
    kEndWaterVolumeFieldNumber = 18,
    kEndProductTcVolumeFieldNumber = 19,
    kEndProductDensityFieldNumber = 20,
    kEndProductTcDensityFieldNumber = 21,
    kEndUllageFieldNumber = 22,
    kTotalSaleVolumeFieldNumber = 24,
    kEndTemperatureFieldNumber = 23,
    kInventoryUidFieldNumber = 25,
    kTankStatusFieldNumber = 26,
    kStatusFieldNumber = 27,
  };
  // required uint32 shiftId = 1;
  bool has_shiftid() const;
  private:
  bool _internal_has_shiftid() const;
  public:
  void clear_shiftid();
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid() const;
  void set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shiftid() const;
  void _internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 shiftType = 2;
  bool has_shifttype() const;
  private:
  bool _internal_has_shifttype() const;
  public:
  void clear_shifttype();
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype() const;
  void set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_shifttype() const;
  void _internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recordUid = 3;
  bool has_recorduid() const;
  private:
  bool _internal_has_recorduid() const;
  public:
  void clear_recorduid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid() const;
  void set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recorduid() const;
  void _internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 dayId = 4;
  bool has_dayid() const;
  private:
  bool _internal_has_dayid() const;
  public:
  void clear_dayid();
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid() const;
  void set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_dayid() const;
  void _internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 tankUid = 5;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float startProductLevel = 6;
  bool has_startproductlevel() const;
  private:
  bool _internal_has_startproductlevel() const;
  public:
  void clear_startproductlevel();
  float startproductlevel() const;
  void set_startproductlevel(float value);
  private:
  float _internal_startproductlevel() const;
  void _internal_set_startproductlevel(float value);
  public:

  // required float startWaterLevel = 7;
  bool has_startwaterlevel() const;
  private:
  bool _internal_has_startwaterlevel() const;
  public:
  void clear_startwaterlevel();
  float startwaterlevel() const;
  void set_startwaterlevel(float value);
  private:
  float _internal_startwaterlevel() const;
  void _internal_set_startwaterlevel(float value);
  public:

  // required float startProductVolume = 8;
  bool has_startproductvolume() const;
  private:
  bool _internal_has_startproductvolume() const;
  public:
  void clear_startproductvolume();
  float startproductvolume() const;
  void set_startproductvolume(float value);
  private:
  float _internal_startproductvolume() const;
  void _internal_set_startproductvolume(float value);
  public:

  // required float startWaterVolume = 9;
  bool has_startwatervolume() const;
  private:
  bool _internal_has_startwatervolume() const;
  public:
  void clear_startwatervolume();
  float startwatervolume() const;
  void set_startwatervolume(float value);
  private:
  float _internal_startwatervolume() const;
  void _internal_set_startwatervolume(float value);
  public:

  // required float startProductTcVolume = 10;
  bool has_startproducttcvolume() const;
  private:
  bool _internal_has_startproducttcvolume() const;
  public:
  void clear_startproducttcvolume();
  float startproducttcvolume() const;
  void set_startproducttcvolume(float value);
  private:
  float _internal_startproducttcvolume() const;
  void _internal_set_startproducttcvolume(float value);
  public:

  // optional float startProductDensity = 11;
  bool has_startproductdensity() const;
  private:
  bool _internal_has_startproductdensity() const;
  public:
  void clear_startproductdensity();
  float startproductdensity() const;
  void set_startproductdensity(float value);
  private:
  float _internal_startproductdensity() const;
  void _internal_set_startproductdensity(float value);
  public:

  // optional float startProductTcDensity = 12;
  bool has_startproducttcdensity() const;
  private:
  bool _internal_has_startproducttcdensity() const;
  public:
  void clear_startproducttcdensity();
  float startproducttcdensity() const;
  void set_startproducttcdensity(float value);
  private:
  float _internal_startproducttcdensity() const;
  void _internal_set_startproducttcdensity(float value);
  public:

  // required float startUllage = 13;
  bool has_startullage() const;
  private:
  bool _internal_has_startullage() const;
  public:
  void clear_startullage();
  float startullage() const;
  void set_startullage(float value);
  private:
  float _internal_startullage() const;
  void _internal_set_startullage(float value);
  public:

  // required float startTemperature = 14;
  bool has_starttemperature() const;
  private:
  bool _internal_has_starttemperature() const;
  public:
  void clear_starttemperature();
  float starttemperature() const;
  void set_starttemperature(float value);
  private:
  float _internal_starttemperature() const;
  void _internal_set_starttemperature(float value);
  public:

  // optional float endProductLevel = 15;
  bool has_endproductlevel() const;
  private:
  bool _internal_has_endproductlevel() const;
  public:
  void clear_endproductlevel();
  float endproductlevel() const;
  void set_endproductlevel(float value);
  private:
  float _internal_endproductlevel() const;
  void _internal_set_endproductlevel(float value);
  public:

  // optional float endWaterLevel = 16;
  bool has_endwaterlevel() const;
  private:
  bool _internal_has_endwaterlevel() const;
  public:
  void clear_endwaterlevel();
  float endwaterlevel() const;
  void set_endwaterlevel(float value);
  private:
  float _internal_endwaterlevel() const;
  void _internal_set_endwaterlevel(float value);
  public:

  // optional float endProductVolume = 17;
  bool has_endproductvolume() const;
  private:
  bool _internal_has_endproductvolume() const;
  public:
  void clear_endproductvolume();
  float endproductvolume() const;
  void set_endproductvolume(float value);
  private:
  float _internal_endproductvolume() const;
  void _internal_set_endproductvolume(float value);
  public:

  // optional float endWaterVolume = 18;
  bool has_endwatervolume() const;
  private:
  bool _internal_has_endwatervolume() const;
  public:
  void clear_endwatervolume();
  float endwatervolume() const;
  void set_endwatervolume(float value);
  private:
  float _internal_endwatervolume() const;
  void _internal_set_endwatervolume(float value);
  public:

  // optional float endProductTcVolume = 19;
  bool has_endproducttcvolume() const;
  private:
  bool _internal_has_endproducttcvolume() const;
  public:
  void clear_endproducttcvolume();
  float endproducttcvolume() const;
  void set_endproducttcvolume(float value);
  private:
  float _internal_endproducttcvolume() const;
  void _internal_set_endproducttcvolume(float value);
  public:

  // optional float endProductDensity = 20;
  bool has_endproductdensity() const;
  private:
  bool _internal_has_endproductdensity() const;
  public:
  void clear_endproductdensity();
  float endproductdensity() const;
  void set_endproductdensity(float value);
  private:
  float _internal_endproductdensity() const;
  void _internal_set_endproductdensity(float value);
  public:

  // optional float endProductTcDensity = 21;
  bool has_endproducttcdensity() const;
  private:
  bool _internal_has_endproducttcdensity() const;
  public:
  void clear_endproducttcdensity();
  float endproducttcdensity() const;
  void set_endproducttcdensity(float value);
  private:
  float _internal_endproducttcdensity() const;
  void _internal_set_endproducttcdensity(float value);
  public:

  // optional float endUllage = 22;
  bool has_endullage() const;
  private:
  bool _internal_has_endullage() const;
  public:
  void clear_endullage();
  float endullage() const;
  void set_endullage(float value);
  private:
  float _internal_endullage() const;
  void _internal_set_endullage(float value);
  public:

  // optional double totalSaleVolume = 24;
  bool has_totalsalevolume() const;
  private:
  bool _internal_has_totalsalevolume() const;
  public:
  void clear_totalsalevolume();
  double totalsalevolume() const;
  void set_totalsalevolume(double value);
  private:
  double _internal_totalsalevolume() const;
  void _internal_set_totalsalevolume(double value);
  public:

  // optional float endTemperature = 23;
  bool has_endtemperature() const;
  private:
  bool _internal_has_endtemperature() const;
  public:
  void clear_endtemperature();
  float endtemperature() const;
  void set_endtemperature(float value);
  private:
  float _internal_endtemperature() const;
  void _internal_set_endtemperature(float value);
  public:

  // optional uint32 inventoryUid = 25;
  bool has_inventoryuid() const;
  private:
  bool _internal_has_inventoryuid() const;
  public:
  void clear_inventoryuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryuid() const;
  void set_inventoryuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_inventoryuid() const;
  void _internal_set_inventoryuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 tankStatus = 26;
  bool has_tankstatus() const;
  private:
  bool _internal_has_tankstatus() const;
  public:
  void clear_tankstatus();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus() const;
  void set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankstatus() const;
  void _internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 27;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.ShiftEndInventory)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shiftid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 shifttype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 dayid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  float startproductlevel_;
  float startwaterlevel_;
  float startproductvolume_;
  float startwatervolume_;
  float startproducttcvolume_;
  float startproductdensity_;
  float startproducttcdensity_;
  float startullage_;
  float starttemperature_;
  float endproductlevel_;
  float endwaterlevel_;
  float endproductvolume_;
  float endwatervolume_;
  float endproducttcvolume_;
  float endproductdensity_;
  float endproducttcdensity_;
  float endullage_;
  double totalsalevolume_;
  float endtemperature_;
  ::PROTOBUF_NAMESPACE_ID::uint32 inventoryuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankstatus_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class PumpControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.PumpControl) */ {
 public:
  inline PumpControl() : PumpControl(nullptr) {};
  virtual ~PumpControl();

  PumpControl(const PumpControl& from);
  PumpControl(PumpControl&& from) noexcept
    : PumpControl() {
    *this = ::std::move(from);
  }

  inline PumpControl& operator=(const PumpControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline PumpControl& operator=(PumpControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PumpControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PumpControl* internal_default_instance() {
    return reinterpret_cast<const PumpControl*>(
               &_PumpControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(PumpControl& a, PumpControl& b) {
    a.Swap(&b);
  }
  inline void Swap(PumpControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PumpControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PumpControl* New() const final {
    return CreateMaybeMessage<PumpControl>(nullptr);
  }

  PumpControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PumpControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PumpControl& from);
  void MergeFrom(const PumpControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PumpControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.PumpControl";
  }
  protected:
  explicit PumpControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPresetRefIdFieldNumber = 8,
    kPumpUidFieldNumber = 1,
    kNozzleIdFieldNumber = 2,
    kControlIdFieldNumber = 3,
    kPresetTypeFieldNumber = 4,
    kPresetValueFieldNumber = 5,
    kPresetMopFieldNumber = 6,
    kPumpModeFieldNumber = 7,
  };
  // optional string presetRefId = 8;
  bool has_presetrefid() const;
  private:
  bool _internal_has_presetrefid() const;
  public:
  void clear_presetrefid();
  const std::string& presetrefid() const;
  void set_presetrefid(const std::string& value);
  void set_presetrefid(std::string&& value);
  void set_presetrefid(const char* value);
  void set_presetrefid(const char* value, size_t size);
  std::string* mutable_presetrefid();
  std::string* release_presetrefid();
  void set_allocated_presetrefid(std::string* presetrefid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_presetrefid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_presetrefid(
      std::string* presetrefid);
  private:
  const std::string& _internal_presetrefid() const;
  void _internal_set_presetrefid(const std::string& value);
  std::string* _internal_mutable_presetrefid();
  public:

  // required uint32 pumpUid = 1;
  bool has_pumpuid() const;
  private:
  bool _internal_has_pumpuid() const;
  public:
  void clear_pumpuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid() const;
  void set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpuid() const;
  void _internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 nozzleId = 2;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 controlId = 3;
  bool has_controlid() const;
  private:
  bool _internal_has_controlid() const;
  public:
  void clear_controlid();
  ::PROTOBUF_NAMESPACE_ID::uint32 controlid() const;
  void set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controlid() const;
  void _internal_set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 presetType = 4;
  bool has_presettype() const;
  private:
  bool _internal_has_presettype() const;
  public:
  void clear_presettype();
  ::PROTOBUF_NAMESPACE_ID::uint32 presettype() const;
  void set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_presettype() const;
  void _internal_set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional float presetValue = 5;
  bool has_presetvalue() const;
  private:
  bool _internal_has_presetvalue() const;
  public:
  void clear_presetvalue();
  float presetvalue() const;
  void set_presetvalue(float value);
  private:
  float _internal_presetvalue() const;
  void _internal_set_presetvalue(float value);
  public:

  // optional uint32 presetMop = 6;
  bool has_presetmop() const;
  private:
  bool _internal_has_presetmop() const;
  public:
  void clear_presetmop();
  ::PROTOBUF_NAMESPACE_ID::uint32 presetmop() const;
  void set_presetmop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_presetmop() const;
  void _internal_set_presetmop(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 pumpMode = 7;
  bool has_pumpmode() const;
  private:
  bool _internal_has_pumpmode() const;
  public:
  void clear_pumpmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpmode() const;
  void set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_pumpmode() const;
  void _internal_set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.PumpControl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr presetrefid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 presettype_;
  float presetvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 presetmop_;
  ::PROTOBUF_NAMESPACE_ID::uint32 pumpmode_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class TankControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.TankControl) */ {
 public:
  inline TankControl() : TankControl(nullptr) {};
  virtual ~TankControl();

  TankControl(const TankControl& from);
  TankControl(TankControl&& from) noexcept
    : TankControl() {
    *this = ::std::move(from);
  }

  inline TankControl& operator=(const TankControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline TankControl& operator=(TankControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TankControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TankControl* internal_default_instance() {
    return reinterpret_cast<const TankControl*>(
               &_TankControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TankControl& a, TankControl& b) {
    a.Swap(&b);
  }
  inline void Swap(TankControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TankControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TankControl* New() const final {
    return CreateMaybeMessage<TankControl>(nullptr);
  }

  TankControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TankControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TankControl& from);
  void MergeFrom(const TankControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TankControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.TankControl";
  }
  protected:
  explicit TankControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTankUidFieldNumber = 1,
    kControlIdFieldNumber = 2,
  };
  // required uint32 tankUid = 1;
  bool has_tankuid() const;
  private:
  bool _internal_has_tankuid() const;
  public:
  void clear_tankuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid() const;
  void set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_tankuid() const;
  void _internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 controlId = 2;
  bool has_controlid() const;
  private:
  bool _internal_has_controlid() const;
  public:
  void clear_controlid();
  ::PROTOBUF_NAMESPACE_ID::uint32 controlid() const;
  void set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_controlid() const;
  void _internal_set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.TankControl)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 tankuid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 controlid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class ProductPriceChange PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.ProductPriceChange) */ {
 public:
  inline ProductPriceChange() : ProductPriceChange(nullptr) {};
  virtual ~ProductPriceChange();

  ProductPriceChange(const ProductPriceChange& from);
  ProductPriceChange(ProductPriceChange&& from) noexcept
    : ProductPriceChange() {
    *this = ::std::move(from);
  }

  inline ProductPriceChange& operator=(const ProductPriceChange& from) {
    CopyFrom(from);
    return *this;
  }
  inline ProductPriceChange& operator=(ProductPriceChange&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ProductPriceChange& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ProductPriceChange* internal_default_instance() {
    return reinterpret_cast<const ProductPriceChange*>(
               &_ProductPriceChange_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(ProductPriceChange& a, ProductPriceChange& b) {
    a.Swap(&b);
  }
  inline void Swap(ProductPriceChange* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ProductPriceChange* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ProductPriceChange* New() const final {
    return CreateMaybeMessage<ProductPriceChange>(nullptr);
  }

  ProductPriceChange* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ProductPriceChange>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ProductPriceChange& from);
  void MergeFrom(const ProductPriceChange& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ProductPriceChange* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.ProductPriceChange";
  }
  protected:
  explicit ProductPriceChange(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveTimeFieldNumber = 4,
    kUpdateTimeFieldNumber = 5,
    kUpdateByFieldNumber = 7,
    kEffectiveTypeFieldNumber = 8,
    kEndDatetimeFieldNumber = 9,
    kPriceIdentifierFieldNumber = 1,
    kGradeUidFieldNumber = 2,
    kGradeRateFieldNumber = 3,
    kUpdateFlagFieldNumber = 6,
    kFlagFieldNumber = 10,
  };
  // required string effectiveTime = 4;
  bool has_effectivetime() const;
  private:
  bool _internal_has_effectivetime() const;
  public:
  void clear_effectivetime();
  const std::string& effectivetime() const;
  void set_effectivetime(const std::string& value);
  void set_effectivetime(std::string&& value);
  void set_effectivetime(const char* value);
  void set_effectivetime(const char* value, size_t size);
  std::string* mutable_effectivetime();
  std::string* release_effectivetime();
  void set_allocated_effectivetime(std::string* effectivetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_effectivetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effectivetime(
      std::string* effectivetime);
  private:
  const std::string& _internal_effectivetime() const;
  void _internal_set_effectivetime(const std::string& value);
  std::string* _internal_mutable_effectivetime();
  public:

  // optional string updateTime = 5;
  bool has_updatetime() const;
  private:
  bool _internal_has_updatetime() const;
  public:
  void clear_updatetime();
  const std::string& updatetime() const;
  void set_updatetime(const std::string& value);
  void set_updatetime(std::string&& value);
  void set_updatetime(const char* value);
  void set_updatetime(const char* value, size_t size);
  std::string* mutable_updatetime();
  std::string* release_updatetime();
  void set_allocated_updatetime(std::string* updatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updatetime(
      std::string* updatetime);
  private:
  const std::string& _internal_updatetime() const;
  void _internal_set_updatetime(const std::string& value);
  std::string* _internal_mutable_updatetime();
  public:

  // optional string updateBy = 7;
  bool has_updateby() const;
  private:
  bool _internal_has_updateby() const;
  public:
  void clear_updateby();
  const std::string& updateby() const;
  void set_updateby(const std::string& value);
  void set_updateby(std::string&& value);
  void set_updateby(const char* value);
  void set_updateby(const char* value, size_t size);
  std::string* mutable_updateby();
  std::string* release_updateby();
  void set_allocated_updateby(std::string* updateby);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updateby();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updateby(
      std::string* updateby);
  private:
  const std::string& _internal_updateby() const;
  void _internal_set_updateby(const std::string& value);
  std::string* _internal_mutable_updateby();
  public:

  // optional string effectiveType = 8;
  bool has_effectivetype() const;
  private:
  bool _internal_has_effectivetype() const;
  public:
  void clear_effectivetype();
  const std::string& effectivetype() const;
  void set_effectivetype(const std::string& value);
  void set_effectivetype(std::string&& value);
  void set_effectivetype(const char* value);
  void set_effectivetype(const char* value, size_t size);
  std::string* mutable_effectivetype();
  std::string* release_effectivetype();
  void set_allocated_effectivetype(std::string* effectivetype);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_effectivetype();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effectivetype(
      std::string* effectivetype);
  private:
  const std::string& _internal_effectivetype() const;
  void _internal_set_effectivetype(const std::string& value);
  std::string* _internal_mutable_effectivetype();
  public:

  // required string endDatetime = 9;
  bool has_enddatetime() const;
  private:
  bool _internal_has_enddatetime() const;
  public:
  void clear_enddatetime();
  const std::string& enddatetime() const;
  void set_enddatetime(const std::string& value);
  void set_enddatetime(std::string&& value);
  void set_enddatetime(const char* value);
  void set_enddatetime(const char* value, size_t size);
  std::string* mutable_enddatetime();
  std::string* release_enddatetime();
  void set_allocated_enddatetime(std::string* enddatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_enddatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_enddatetime(
      std::string* enddatetime);
  private:
  const std::string& _internal_enddatetime() const;
  void _internal_set_enddatetime(const std::string& value);
  std::string* _internal_mutable_enddatetime();
  public:

  // required uint32 priceIdentifier = 1;
  bool has_priceidentifier() const;
  private:
  bool _internal_has_priceidentifier() const;
  public:
  void clear_priceidentifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 priceidentifier() const;
  void set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priceidentifier() const;
  void _internal_set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 gradeUid = 2;
  bool has_gradeuid() const;
  private:
  bool _internal_has_gradeuid() const;
  public:
  void clear_gradeuid();
  ::PROTOBUF_NAMESPACE_ID::uint32 gradeuid() const;
  void set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_gradeuid() const;
  void _internal_set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float gradeRate = 3;
  bool has_graderate() const;
  private:
  bool _internal_has_graderate() const;
  public:
  void clear_graderate();
  float graderate() const;
  void set_graderate(float value);
  private:
  float _internal_graderate() const;
  void _internal_set_graderate(float value);
  public:

  // optional uint32 updateFlag = 6;
  bool has_updateflag() const;
  private:
  bool _internal_has_updateflag() const;
  public:
  void clear_updateflag();
  ::PROTOBUF_NAMESPACE_ID::uint32 updateflag() const;
  void set_updateflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_updateflag() const;
  void _internal_set_updateflag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 flag = 10;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.ProductPriceChange)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivetype_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr enddatetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priceidentifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 gradeuid_;
  float graderate_;
  ::PROTOBUF_NAMESPACE_ID::uint32 updateflag_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class PriceChangeStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.PriceChangeStatus) */ {
 public:
  inline PriceChangeStatus() : PriceChangeStatus(nullptr) {};
  virtual ~PriceChangeStatus();

  PriceChangeStatus(const PriceChangeStatus& from);
  PriceChangeStatus(PriceChangeStatus&& from) noexcept
    : PriceChangeStatus() {
    *this = ::std::move(from);
  }

  inline PriceChangeStatus& operator=(const PriceChangeStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline PriceChangeStatus& operator=(PriceChangeStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PriceChangeStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PriceChangeStatus* internal_default_instance() {
    return reinterpret_cast<const PriceChangeStatus*>(
               &_PriceChangeStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(PriceChangeStatus& a, PriceChangeStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(PriceChangeStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PriceChangeStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PriceChangeStatus* New() const final {
    return CreateMaybeMessage<PriceChangeStatus>(nullptr);
  }

  PriceChangeStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PriceChangeStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PriceChangeStatus& from);
  void MergeFrom(const PriceChangeStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PriceChangeStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.PriceChangeStatus";
  }
  protected:
  explicit PriceChangeStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEffectiveTimeFieldNumber = 5,
    kPriceIdentifierFieldNumber = 1,
    kProductIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kProductNewPriceFieldNumber = 4,
    kFlagFieldNumber = 6,
  };
  // required string effectiveTime = 5;
  bool has_effectivetime() const;
  private:
  bool _internal_has_effectivetime() const;
  public:
  void clear_effectivetime();
  const std::string& effectivetime() const;
  void set_effectivetime(const std::string& value);
  void set_effectivetime(std::string&& value);
  void set_effectivetime(const char* value);
  void set_effectivetime(const char* value, size_t size);
  std::string* mutable_effectivetime();
  std::string* release_effectivetime();
  void set_allocated_effectivetime(std::string* effectivetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_effectivetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_effectivetime(
      std::string* effectivetime);
  private:
  const std::string& _internal_effectivetime() const;
  void _internal_set_effectivetime(const std::string& value);
  std::string* _internal_mutable_effectivetime();
  public:

  // required uint32 priceIdentifier = 1;
  bool has_priceidentifier() const;
  private:
  bool _internal_has_priceidentifier() const;
  public:
  void clear_priceidentifier();
  ::PROTOBUF_NAMESPACE_ID::uint32 priceidentifier() const;
  void set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_priceidentifier() const;
  void _internal_set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 productId = 2;
  bool has_productid() const;
  private:
  bool _internal_has_productid() const;
  public:
  void clear_productid();
  ::PROTOBUF_NAMESPACE_ID::uint32 productid() const;
  void set_productid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_productid() const;
  void _internal_set_productid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required float productNewPrice = 4;
  bool has_productnewprice() const;
  private:
  bool _internal_has_productnewprice() const;
  public:
  void clear_productnewprice();
  float productnewprice() const;
  void set_productnewprice(float value);
  private:
  float _internal_productnewprice() const;
  void _internal_set_productnewprice(float value);
  public:

  // optional uint32 flag = 6;
  bool has_flag() const;
  private:
  bool _internal_has_flag() const;
  public:
  void clear_flag();
  ::PROTOBUF_NAMESPACE_ID::uint32 flag() const;
  void set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_flag() const;
  void _internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.PriceChangeStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr effectivetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 priceidentifier_;
  ::PROTOBUF_NAMESPACE_ID::uint32 productid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  float productnewprice_;
  ::PROTOBUF_NAMESPACE_ID::uint32 flag_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class OperationControl PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.OperationControl) */ {
 public:
  inline OperationControl() : OperationControl(nullptr) {};
  virtual ~OperationControl();

  OperationControl(const OperationControl& from);
  OperationControl(OperationControl&& from) noexcept
    : OperationControl() {
    *this = ::std::move(from);
  }

  inline OperationControl& operator=(const OperationControl& from) {
    CopyFrom(from);
    return *this;
  }
  inline OperationControl& operator=(OperationControl&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OperationControl& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OperationControl* internal_default_instance() {
    return reinterpret_cast<const OperationControl*>(
               &_OperationControl_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(OperationControl& a, OperationControl& b) {
    a.Swap(&b);
  }
  inline void Swap(OperationControl* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OperationControl* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OperationControl* New() const final {
    return CreateMaybeMessage<OperationControl>(nullptr);
  }

  OperationControl* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OperationControl>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OperationControl& from);
  void MergeFrom(const OperationControl& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OperationControl* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.OperationControl";
  }
  protected:
  explicit OperationControl(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 3,
    kConfigKeyFieldNumber = 4,
    kConfigValueFieldNumber = 5,
    kOperationControlIdFieldNumber = 1,
    kOperationModeFieldNumber = 2,
  };
  // optional string time = 3;
  bool has_time() const;
  private:
  bool _internal_has_time() const;
  public:
  void clear_time();
  const std::string& time() const;
  void set_time(const std::string& value);
  void set_time(std::string&& value);
  void set_time(const char* value);
  void set_time(const char* value, size_t size);
  std::string* mutable_time();
  std::string* release_time();
  void set_allocated_time(std::string* time);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_time();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_time(
      std::string* time);
  private:
  const std::string& _internal_time() const;
  void _internal_set_time(const std::string& value);
  std::string* _internal_mutable_time();
  public:

  // optional string configKey = 4;
  bool has_configkey() const;
  private:
  bool _internal_has_configkey() const;
  public:
  void clear_configkey();
  const std::string& configkey() const;
  void set_configkey(const std::string& value);
  void set_configkey(std::string&& value);
  void set_configkey(const char* value);
  void set_configkey(const char* value, size_t size);
  std::string* mutable_configkey();
  std::string* release_configkey();
  void set_allocated_configkey(std::string* configkey);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_configkey();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_configkey(
      std::string* configkey);
  private:
  const std::string& _internal_configkey() const;
  void _internal_set_configkey(const std::string& value);
  std::string* _internal_mutable_configkey();
  public:

  // optional string configValue = 5;
  bool has_configvalue() const;
  private:
  bool _internal_has_configvalue() const;
  public:
  void clear_configvalue();
  const std::string& configvalue() const;
  void set_configvalue(const std::string& value);
  void set_configvalue(std::string&& value);
  void set_configvalue(const char* value);
  void set_configvalue(const char* value, size_t size);
  std::string* mutable_configvalue();
  std::string* release_configvalue();
  void set_allocated_configvalue(std::string* configvalue);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_configvalue();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_configvalue(
      std::string* configvalue);
  private:
  const std::string& _internal_configvalue() const;
  void _internal_set_configvalue(const std::string& value);
  std::string* _internal_mutable_configvalue();
  public:

  // required uint32 operationControlId = 1;
  bool has_operationcontrolid() const;
  private:
  bool _internal_has_operationcontrolid() const;
  public:
  void clear_operationcontrolid();
  ::PROTOBUF_NAMESPACE_ID::uint32 operationcontrolid() const;
  void set_operationcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operationcontrolid() const;
  void _internal_set_operationcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 operationMode = 2;
  bool has_operationmode() const;
  private:
  bool _internal_has_operationmode() const;
  public:
  void clear_operationmode();
  ::PROTOBUF_NAMESPACE_ID::uint32 operationmode() const;
  void set_operationmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operationmode() const;
  void _internal_set_operationmode(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.OperationControl)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr time_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configkey_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr configvalue_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operationcontrolid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operationmode_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class TrxnMopUpdate PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.TrxnMopUpdate) */ {
 public:
  inline TrxnMopUpdate() : TrxnMopUpdate(nullptr) {};
  virtual ~TrxnMopUpdate();

  TrxnMopUpdate(const TrxnMopUpdate& from);
  TrxnMopUpdate(TrxnMopUpdate&& from) noexcept
    : TrxnMopUpdate() {
    *this = ::std::move(from);
  }

  inline TrxnMopUpdate& operator=(const TrxnMopUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TrxnMopUpdate& operator=(TrxnMopUpdate&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const TrxnMopUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const TrxnMopUpdate* internal_default_instance() {
    return reinterpret_cast<const TrxnMopUpdate*>(
               &_TrxnMopUpdate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TrxnMopUpdate& a, TrxnMopUpdate& b) {
    a.Swap(&b);
  }
  inline void Swap(TrxnMopUpdate* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TrxnMopUpdate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline TrxnMopUpdate* New() const final {
    return CreateMaybeMessage<TrxnMopUpdate>(nullptr);
  }

  TrxnMopUpdate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<TrxnMopUpdate>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const TrxnMopUpdate& from);
  void MergeFrom(const TrxnMopUpdate& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TrxnMopUpdate* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.TrxnMopUpdate";
  }
  protected:
  explicit TrxnMopUpdate(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUpdateDateFieldNumber = 3,
    kUpdateByFieldNumber = 4,
    kTrxnIdFieldNumber = 1,
    kMopTypeFieldNumber = 2,
  };
  // required string updateDate = 3;
  bool has_updatedate() const;
  private:
  bool _internal_has_updatedate() const;
  public:
  void clear_updatedate();
  const std::string& updatedate() const;
  void set_updatedate(const std::string& value);
  void set_updatedate(std::string&& value);
  void set_updatedate(const char* value);
  void set_updatedate(const char* value, size_t size);
  std::string* mutable_updatedate();
  std::string* release_updatedate();
  void set_allocated_updatedate(std::string* updatedate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updatedate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updatedate(
      std::string* updatedate);
  private:
  const std::string& _internal_updatedate() const;
  void _internal_set_updatedate(const std::string& value);
  std::string* _internal_mutable_updatedate();
  public:

  // required string updateBy = 4;
  bool has_updateby() const;
  private:
  bool _internal_has_updateby() const;
  public:
  void clear_updateby();
  const std::string& updateby() const;
  void set_updateby(const std::string& value);
  void set_updateby(std::string&& value);
  void set_updateby(const char* value);
  void set_updateby(const char* value, size_t size);
  std::string* mutable_updateby();
  std::string* release_updateby();
  void set_allocated_updateby(std::string* updateby);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_updateby();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_updateby(
      std::string* updateby);
  private:
  const std::string& _internal_updateby() const;
  void _internal_set_updateby(const std::string& value);
  std::string* _internal_mutable_updateby();
  public:

  // required uint32 trxnId = 1;
  bool has_trxnid() const;
  private:
  bool _internal_has_trxnid() const;
  public:
  void clear_trxnid();
  ::PROTOBUF_NAMESPACE_ID::uint32 trxnid() const;
  void set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trxnid() const;
  void _internal_set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 mopType = 2;
  bool has_moptype() const;
  private:
  bool _internal_has_moptype() const;
  public:
  void clear_moptype();
  ::PROTOBUF_NAMESPACE_ID::uint32 moptype() const;
  void set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_moptype() const;
  void _internal_set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.TrxnMopUpdate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updatedate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr updateby_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trxnid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 moptype_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class AlarmAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.AlarmAck) */ {
 public:
  inline AlarmAck() : AlarmAck(nullptr) {};
  virtual ~AlarmAck();

  AlarmAck(const AlarmAck& from);
  AlarmAck(AlarmAck&& from) noexcept
    : AlarmAck() {
    *this = ::std::move(from);
  }

  inline AlarmAck& operator=(const AlarmAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline AlarmAck& operator=(AlarmAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const AlarmAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AlarmAck* internal_default_instance() {
    return reinterpret_cast<const AlarmAck*>(
               &_AlarmAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(AlarmAck& a, AlarmAck& b) {
    a.Swap(&b);
  }
  inline void Swap(AlarmAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(AlarmAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline AlarmAck* New() const final {
    return CreateMaybeMessage<AlarmAck>(nullptr);
  }

  AlarmAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<AlarmAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const AlarmAck& from);
  void MergeFrom(const AlarmAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(AlarmAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.AlarmAck";
  }
  protected:
  explicit AlarmAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAckByFieldNumber = 2,
    kAckTimeFieldNumber = 3,
    kRecordUidFieldNumber = 1,
  };
  // required string ackBy = 2;
  bool has_ackby() const;
  private:
  bool _internal_has_ackby() const;
  public:
  void clear_ackby();
  const std::string& ackby() const;
  void set_ackby(const std::string& value);
  void set_ackby(std::string&& value);
  void set_ackby(const char* value);
  void set_ackby(const char* value, size_t size);
  std::string* mutable_ackby();
  std::string* release_ackby();
  void set_allocated_ackby(std::string* ackby);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_ackby();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_ackby(
      std::string* ackby);
  private:
  const std::string& _internal_ackby() const;
  void _internal_set_ackby(const std::string& value);
  std::string* _internal_mutable_ackby();
  public:

  // required string ackTime = 3;
  bool has_acktime() const;
  private:
  bool _internal_has_acktime() const;
  public:
  void clear_acktime();
  const std::string& acktime() const;
  void set_acktime(const std::string& value);
  void set_acktime(std::string&& value);
  void set_acktime(const char* value);
  void set_acktime(const char* value, size_t size);
  std::string* mutable_acktime();
  std::string* release_acktime();
  void set_allocated_acktime(std::string* acktime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_acktime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_acktime(
      std::string* acktime);
  private:
  const std::string& _internal_acktime() const;
  void _internal_set_acktime(const std::string& value);
  std::string* _internal_mutable_acktime();
  public:

  // required uint32 recordUid = 1;
  bool has_recorduid() const;
  private:
  bool _internal_has_recorduid() const;
  public:
  void clear_recorduid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid() const;
  void set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recorduid() const;
  void _internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.AlarmAck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr ackby_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr acktime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recorduid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class FccOperation PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.FccOperation) */ {
 public:
  inline FccOperation() : FccOperation(nullptr) {};
  virtual ~FccOperation();

  FccOperation(const FccOperation& from);
  FccOperation(FccOperation&& from) noexcept
    : FccOperation() {
    *this = ::std::move(from);
  }

  inline FccOperation& operator=(const FccOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline FccOperation& operator=(FccOperation&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FccOperation& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FccOperation* internal_default_instance() {
    return reinterpret_cast<const FccOperation*>(
               &_FccOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(FccOperation& a, FccOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(FccOperation* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FccOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FccOperation* New() const final {
    return CreateMaybeMessage<FccOperation>(nullptr);
  }

  FccOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FccOperation>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FccOperation& from);
  void MergeFrom(const FccOperation& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FccOperation* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.FccOperation";
  }
  protected:
  explicit FccOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 2,
    kKeyFieldNumber = 1,
  };
  // optional string value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const std::string& value() const;
  void set_value(const std::string& value);
  void set_value(std::string&& value);
  void set_value(const char* value);
  void set_value(const char* value, size_t size);
  std::string* mutable_value();
  std::string* release_value();
  void set_allocated_value(std::string* value);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_value();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_value(
      std::string* value);
  private:
  const std::string& _internal_value() const;
  void _internal_set_value(const std::string& value);
  std::string* _internal_mutable_value();
  public:

  // required uint32 key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  ::PROTOBUF_NAMESPACE_ID::uint32 key() const;
  void set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_key() const;
  void _internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.FccOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr value_;
  ::PROTOBUF_NAMESPACE_ID::uint32 key_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class BosAck PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.BosAck) */ {
 public:
  inline BosAck() : BosAck(nullptr) {};
  virtual ~BosAck();

  BosAck(const BosAck& from);
  BosAck(BosAck&& from) noexcept
    : BosAck() {
    *this = ::std::move(from);
  }

  inline BosAck& operator=(const BosAck& from) {
    CopyFrom(from);
    return *this;
  }
  inline BosAck& operator=(BosAck&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BosAck& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BosAck* internal_default_instance() {
    return reinterpret_cast<const BosAck*>(
               &_BosAck_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(BosAck& a, BosAck& b) {
    a.Swap(&b);
  }
  inline void Swap(BosAck* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BosAck* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BosAck* New() const final {
    return CreateMaybeMessage<BosAck>(nullptr);
  }

  BosAck* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BosAck>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BosAck& from);
  void MergeFrom(const BosAck& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BosAck* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.BosAck";
  }
  protected:
  explicit BosAck(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMsgIdFieldNumber = 1,
    kRecIdFieldNumber = 2,
    kOperationFieldNumber = 3,
  };
  // required uint32 msgId = 1;
  bool has_msgid() const;
  private:
  bool _internal_has_msgid() const;
  public:
  void clear_msgid();
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid() const;
  void set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_msgid() const;
  void _internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 recId = 2;
  bool has_recid() const;
  private:
  bool _internal_has_recid() const;
  public:
  void clear_recid();
  ::PROTOBUF_NAMESPACE_ID::uint32 recid() const;
  void set_recid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_recid() const;
  void _internal_set_recid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 operation = 3;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::PROTOBUF_NAMESPACE_ID::uint32 operation() const;
  void set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_operation() const;
  void _internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.BosAck)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 msgid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 recid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 operation_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class HeartBeat PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.HeartBeat) */ {
 public:
  inline HeartBeat() : HeartBeat(nullptr) {};
  virtual ~HeartBeat();

  HeartBeat(const HeartBeat& from);
  HeartBeat(HeartBeat&& from) noexcept
    : HeartBeat() {
    *this = ::std::move(from);
  }

  inline HeartBeat& operator=(const HeartBeat& from) {
    CopyFrom(from);
    return *this;
  }
  inline HeartBeat& operator=(HeartBeat&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HeartBeat& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const HeartBeat* internal_default_instance() {
    return reinterpret_cast<const HeartBeat*>(
               &_HeartBeat_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(HeartBeat& a, HeartBeat& b) {
    a.Swap(&b);
  }
  inline void Swap(HeartBeat* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HeartBeat* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HeartBeat* New() const final {
    return CreateMaybeMessage<HeartBeat>(nullptr);
  }

  HeartBeat* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HeartBeat>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HeartBeat& from);
  void MergeFrom(const HeartBeat& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HeartBeat* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.HeartBeat";
  }
  protected:
  explicit HeartBeat(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimestampFieldNumber = 3,
    kDeviceTypeFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
  };
  // optional string timestamp = 3;
  bool has_timestamp() const;
  private:
  bool _internal_has_timestamp() const;
  public:
  void clear_timestamp();
  const std::string& timestamp() const;
  void set_timestamp(const std::string& value);
  void set_timestamp(std::string&& value);
  void set_timestamp(const char* value);
  void set_timestamp(const char* value, size_t size);
  std::string* mutable_timestamp();
  std::string* release_timestamp();
  void set_allocated_timestamp(std::string* timestamp);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_timestamp();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_timestamp(
      std::string* timestamp);
  private:
  const std::string& _internal_timestamp() const;
  void _internal_set_timestamp(const std::string& value);
  std::string* _internal_mutable_timestamp();
  public:

  // required uint32 deviceType = 1;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deviceId = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.HeartBeat)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr timestamp_;
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class OtherDevice PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.OtherDevice) */ {
 public:
  inline OtherDevice() : OtherDevice(nullptr) {};
  virtual ~OtherDevice();

  OtherDevice(const OtherDevice& from);
  OtherDevice(OtherDevice&& from) noexcept
    : OtherDevice() {
    *this = ::std::move(from);
  }

  inline OtherDevice& operator=(const OtherDevice& from) {
    CopyFrom(from);
    return *this;
  }
  inline OtherDevice& operator=(OtherDevice&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const OtherDevice& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const OtherDevice* internal_default_instance() {
    return reinterpret_cast<const OtherDevice*>(
               &_OtherDevice_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(OtherDevice& a, OtherDevice& b) {
    a.Swap(&b);
  }
  inline void Swap(OtherDevice* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OtherDevice* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline OtherDevice* New() const final {
    return CreateMaybeMessage<OtherDevice>(nullptr);
  }

  OtherDevice* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<OtherDevice>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const OtherDevice& from);
  void MergeFrom(const OtherDevice& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(OtherDevice* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.OtherDevice";
  }
  protected:
  explicit OtherDevice(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDeviceTypeFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kStatusFieldNumber = 3,
    kSwVersionFieldNumber = 4,
    kHwVersionFieldNumber = 5,
    kTrxnCountFieldNumber = 6,
  };
  // required uint32 deviceType = 1;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deviceId = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 3;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 swVersion = 4;
  bool has_swversion() const;
  private:
  bool _internal_has_swversion() const;
  public:
  void clear_swversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 swversion() const;
  void set_swversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_swversion() const;
  void _internal_set_swversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 hwVersion = 5;
  bool has_hwversion() const;
  private:
  bool _internal_has_hwversion() const;
  public:
  void clear_hwversion();
  ::PROTOBUF_NAMESPACE_ID::uint32 hwversion() const;
  void set_hwversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hwversion() const;
  void _internal_set_hwversion(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 trxnCount = 6;
  bool has_trxncount() const;
  private:
  bool _internal_has_trxncount() const;
  public:
  void clear_trxncount();
  ::PROTOBUF_NAMESPACE_ID::uint32 trxncount() const;
  void set_trxncount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_trxncount() const;
  void _internal_set_trxncount(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.OtherDevice)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  ::PROTOBUF_NAMESPACE_ID::uint32 swversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hwversion_;
  ::PROTOBUF_NAMESPACE_ID::uint32 trxncount_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DULogs PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DULogs) */ {
 public:
  inline DULogs() : DULogs(nullptr) {};
  virtual ~DULogs();

  DULogs(const DULogs& from);
  DULogs(DULogs&& from) noexcept
    : DULogs() {
    *this = ::std::move(from);
  }

  inline DULogs& operator=(const DULogs& from) {
    CopyFrom(from);
    return *this;
  }
  inline DULogs& operator=(DULogs&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DULogs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DULogs* internal_default_instance() {
    return reinterpret_cast<const DULogs*>(
               &_DULogs_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(DULogs& a, DULogs& b) {
    a.Swap(&b);
  }
  inline void Swap(DULogs* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DULogs* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DULogs* New() const final {
    return CreateMaybeMessage<DULogs>(nullptr);
  }

  DULogs* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DULogs>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DULogs& from);
  void MergeFrom(const DULogs& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DULogs* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DULogs";
  }
  protected:
  explicit DULogs(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParamDesc1FieldNumber = 6,
    kParam1FieldNumber = 7,
    kParamDesc2FieldNumber = 8,
    kParam2FieldNumber = 9,
    kParamDesc3FieldNumber = 10,
    kParam3FieldNumber = 11,
    kParamDesc4FieldNumber = 12,
    kParam4FieldNumber = 13,
    kParamDesc5FieldNumber = 14,
    kParam5FieldNumber = 15,
    kParamDesc6FieldNumber = 16,
    kParam6FieldNumber = 17,
    kParamDesc7FieldNumber = 18,
    kParam7FieldNumber = 19,
    kParamDesc8FieldNumber = 20,
    kParam8FieldNumber = 21,
    kParamDesc9FieldNumber = 22,
    kParam9FieldNumber = 23,
    kParamDesc10FieldNumber = 24,
    kParam10FieldNumber = 25,
    kParamDesc11FieldNumber = 26,
    kParam11FieldNumber = 27,
    kParamDesc12FieldNumber = 28,
    kParam12FieldNumber = 29,
    kCreateDateFieldNumber = 30,
    kLogDatetimeFieldNumber = 31,
    kLogTypeDescFieldNumber = 32,
    kLogIdFieldNumber = 1,
    kPumpnoFieldNumber = 2,
    kNozzlenoFieldNumber = 3,
    kProductCodeFieldNumber = 4,
    kLogTranTypeFieldNumber = 5,
  };
  // optional string paramDesc1 = 6;
  bool has_paramdesc1() const;
  private:
  bool _internal_has_paramdesc1() const;
  public:
  void clear_paramdesc1();
  const std::string& paramdesc1() const;
  void set_paramdesc1(const std::string& value);
  void set_paramdesc1(std::string&& value);
  void set_paramdesc1(const char* value);
  void set_paramdesc1(const char* value, size_t size);
  std::string* mutable_paramdesc1();
  std::string* release_paramdesc1();
  void set_allocated_paramdesc1(std::string* paramdesc1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc1(
      std::string* paramdesc1);
  private:
  const std::string& _internal_paramdesc1() const;
  void _internal_set_paramdesc1(const std::string& value);
  std::string* _internal_mutable_paramdesc1();
  public:

  // optional string param1 = 7;
  bool has_param1() const;
  private:
  bool _internal_has_param1() const;
  public:
  void clear_param1();
  const std::string& param1() const;
  void set_param1(const std::string& value);
  void set_param1(std::string&& value);
  void set_param1(const char* value);
  void set_param1(const char* value, size_t size);
  std::string* mutable_param1();
  std::string* release_param1();
  void set_allocated_param1(std::string* param1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param1(
      std::string* param1);
  private:
  const std::string& _internal_param1() const;
  void _internal_set_param1(const std::string& value);
  std::string* _internal_mutable_param1();
  public:

  // optional string paramDesc2 = 8;
  bool has_paramdesc2() const;
  private:
  bool _internal_has_paramdesc2() const;
  public:
  void clear_paramdesc2();
  const std::string& paramdesc2() const;
  void set_paramdesc2(const std::string& value);
  void set_paramdesc2(std::string&& value);
  void set_paramdesc2(const char* value);
  void set_paramdesc2(const char* value, size_t size);
  std::string* mutable_paramdesc2();
  std::string* release_paramdesc2();
  void set_allocated_paramdesc2(std::string* paramdesc2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc2(
      std::string* paramdesc2);
  private:
  const std::string& _internal_paramdesc2() const;
  void _internal_set_paramdesc2(const std::string& value);
  std::string* _internal_mutable_paramdesc2();
  public:

  // optional string param2 = 9;
  bool has_param2() const;
  private:
  bool _internal_has_param2() const;
  public:
  void clear_param2();
  const std::string& param2() const;
  void set_param2(const std::string& value);
  void set_param2(std::string&& value);
  void set_param2(const char* value);
  void set_param2(const char* value, size_t size);
  std::string* mutable_param2();
  std::string* release_param2();
  void set_allocated_param2(std::string* param2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param2(
      std::string* param2);
  private:
  const std::string& _internal_param2() const;
  void _internal_set_param2(const std::string& value);
  std::string* _internal_mutable_param2();
  public:

  // optional string paramDesc3 = 10;
  bool has_paramdesc3() const;
  private:
  bool _internal_has_paramdesc3() const;
  public:
  void clear_paramdesc3();
  const std::string& paramdesc3() const;
  void set_paramdesc3(const std::string& value);
  void set_paramdesc3(std::string&& value);
  void set_paramdesc3(const char* value);
  void set_paramdesc3(const char* value, size_t size);
  std::string* mutable_paramdesc3();
  std::string* release_paramdesc3();
  void set_allocated_paramdesc3(std::string* paramdesc3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc3(
      std::string* paramdesc3);
  private:
  const std::string& _internal_paramdesc3() const;
  void _internal_set_paramdesc3(const std::string& value);
  std::string* _internal_mutable_paramdesc3();
  public:

  // optional string param3 = 11;
  bool has_param3() const;
  private:
  bool _internal_has_param3() const;
  public:
  void clear_param3();
  const std::string& param3() const;
  void set_param3(const std::string& value);
  void set_param3(std::string&& value);
  void set_param3(const char* value);
  void set_param3(const char* value, size_t size);
  std::string* mutable_param3();
  std::string* release_param3();
  void set_allocated_param3(std::string* param3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param3(
      std::string* param3);
  private:
  const std::string& _internal_param3() const;
  void _internal_set_param3(const std::string& value);
  std::string* _internal_mutable_param3();
  public:

  // optional string paramDesc4 = 12;
  bool has_paramdesc4() const;
  private:
  bool _internal_has_paramdesc4() const;
  public:
  void clear_paramdesc4();
  const std::string& paramdesc4() const;
  void set_paramdesc4(const std::string& value);
  void set_paramdesc4(std::string&& value);
  void set_paramdesc4(const char* value);
  void set_paramdesc4(const char* value, size_t size);
  std::string* mutable_paramdesc4();
  std::string* release_paramdesc4();
  void set_allocated_paramdesc4(std::string* paramdesc4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc4(
      std::string* paramdesc4);
  private:
  const std::string& _internal_paramdesc4() const;
  void _internal_set_paramdesc4(const std::string& value);
  std::string* _internal_mutable_paramdesc4();
  public:

  // optional string param4 = 13;
  bool has_param4() const;
  private:
  bool _internal_has_param4() const;
  public:
  void clear_param4();
  const std::string& param4() const;
  void set_param4(const std::string& value);
  void set_param4(std::string&& value);
  void set_param4(const char* value);
  void set_param4(const char* value, size_t size);
  std::string* mutable_param4();
  std::string* release_param4();
  void set_allocated_param4(std::string* param4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param4(
      std::string* param4);
  private:
  const std::string& _internal_param4() const;
  void _internal_set_param4(const std::string& value);
  std::string* _internal_mutable_param4();
  public:

  // optional string paramDesc5 = 14;
  bool has_paramdesc5() const;
  private:
  bool _internal_has_paramdesc5() const;
  public:
  void clear_paramdesc5();
  const std::string& paramdesc5() const;
  void set_paramdesc5(const std::string& value);
  void set_paramdesc5(std::string&& value);
  void set_paramdesc5(const char* value);
  void set_paramdesc5(const char* value, size_t size);
  std::string* mutable_paramdesc5();
  std::string* release_paramdesc5();
  void set_allocated_paramdesc5(std::string* paramdesc5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc5(
      std::string* paramdesc5);
  private:
  const std::string& _internal_paramdesc5() const;
  void _internal_set_paramdesc5(const std::string& value);
  std::string* _internal_mutable_paramdesc5();
  public:

  // optional string param5 = 15;
  bool has_param5() const;
  private:
  bool _internal_has_param5() const;
  public:
  void clear_param5();
  const std::string& param5() const;
  void set_param5(const std::string& value);
  void set_param5(std::string&& value);
  void set_param5(const char* value);
  void set_param5(const char* value, size_t size);
  std::string* mutable_param5();
  std::string* release_param5();
  void set_allocated_param5(std::string* param5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param5(
      std::string* param5);
  private:
  const std::string& _internal_param5() const;
  void _internal_set_param5(const std::string& value);
  std::string* _internal_mutable_param5();
  public:

  // optional string paramDesc6 = 16;
  bool has_paramdesc6() const;
  private:
  bool _internal_has_paramdesc6() const;
  public:
  void clear_paramdesc6();
  const std::string& paramdesc6() const;
  void set_paramdesc6(const std::string& value);
  void set_paramdesc6(std::string&& value);
  void set_paramdesc6(const char* value);
  void set_paramdesc6(const char* value, size_t size);
  std::string* mutable_paramdesc6();
  std::string* release_paramdesc6();
  void set_allocated_paramdesc6(std::string* paramdesc6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc6(
      std::string* paramdesc6);
  private:
  const std::string& _internal_paramdesc6() const;
  void _internal_set_paramdesc6(const std::string& value);
  std::string* _internal_mutable_paramdesc6();
  public:

  // optional string param6 = 17;
  bool has_param6() const;
  private:
  bool _internal_has_param6() const;
  public:
  void clear_param6();
  const std::string& param6() const;
  void set_param6(const std::string& value);
  void set_param6(std::string&& value);
  void set_param6(const char* value);
  void set_param6(const char* value, size_t size);
  std::string* mutable_param6();
  std::string* release_param6();
  void set_allocated_param6(std::string* param6);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param6();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param6(
      std::string* param6);
  private:
  const std::string& _internal_param6() const;
  void _internal_set_param6(const std::string& value);
  std::string* _internal_mutable_param6();
  public:

  // optional string paramDesc7 = 18;
  bool has_paramdesc7() const;
  private:
  bool _internal_has_paramdesc7() const;
  public:
  void clear_paramdesc7();
  const std::string& paramdesc7() const;
  void set_paramdesc7(const std::string& value);
  void set_paramdesc7(std::string&& value);
  void set_paramdesc7(const char* value);
  void set_paramdesc7(const char* value, size_t size);
  std::string* mutable_paramdesc7();
  std::string* release_paramdesc7();
  void set_allocated_paramdesc7(std::string* paramdesc7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc7(
      std::string* paramdesc7);
  private:
  const std::string& _internal_paramdesc7() const;
  void _internal_set_paramdesc7(const std::string& value);
  std::string* _internal_mutable_paramdesc7();
  public:

  // optional string param7 = 19;
  bool has_param7() const;
  private:
  bool _internal_has_param7() const;
  public:
  void clear_param7();
  const std::string& param7() const;
  void set_param7(const std::string& value);
  void set_param7(std::string&& value);
  void set_param7(const char* value);
  void set_param7(const char* value, size_t size);
  std::string* mutable_param7();
  std::string* release_param7();
  void set_allocated_param7(std::string* param7);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param7();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param7(
      std::string* param7);
  private:
  const std::string& _internal_param7() const;
  void _internal_set_param7(const std::string& value);
  std::string* _internal_mutable_param7();
  public:

  // optional string paramDesc8 = 20;
  bool has_paramdesc8() const;
  private:
  bool _internal_has_paramdesc8() const;
  public:
  void clear_paramdesc8();
  const std::string& paramdesc8() const;
  void set_paramdesc8(const std::string& value);
  void set_paramdesc8(std::string&& value);
  void set_paramdesc8(const char* value);
  void set_paramdesc8(const char* value, size_t size);
  std::string* mutable_paramdesc8();
  std::string* release_paramdesc8();
  void set_allocated_paramdesc8(std::string* paramdesc8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc8(
      std::string* paramdesc8);
  private:
  const std::string& _internal_paramdesc8() const;
  void _internal_set_paramdesc8(const std::string& value);
  std::string* _internal_mutable_paramdesc8();
  public:

  // optional string param8 = 21;
  bool has_param8() const;
  private:
  bool _internal_has_param8() const;
  public:
  void clear_param8();
  const std::string& param8() const;
  void set_param8(const std::string& value);
  void set_param8(std::string&& value);
  void set_param8(const char* value);
  void set_param8(const char* value, size_t size);
  std::string* mutable_param8();
  std::string* release_param8();
  void set_allocated_param8(std::string* param8);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param8();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param8(
      std::string* param8);
  private:
  const std::string& _internal_param8() const;
  void _internal_set_param8(const std::string& value);
  std::string* _internal_mutable_param8();
  public:

  // optional string paramDesc9 = 22;
  bool has_paramdesc9() const;
  private:
  bool _internal_has_paramdesc9() const;
  public:
  void clear_paramdesc9();
  const std::string& paramdesc9() const;
  void set_paramdesc9(const std::string& value);
  void set_paramdesc9(std::string&& value);
  void set_paramdesc9(const char* value);
  void set_paramdesc9(const char* value, size_t size);
  std::string* mutable_paramdesc9();
  std::string* release_paramdesc9();
  void set_allocated_paramdesc9(std::string* paramdesc9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc9(
      std::string* paramdesc9);
  private:
  const std::string& _internal_paramdesc9() const;
  void _internal_set_paramdesc9(const std::string& value);
  std::string* _internal_mutable_paramdesc9();
  public:

  // optional string param9 = 23;
  bool has_param9() const;
  private:
  bool _internal_has_param9() const;
  public:
  void clear_param9();
  const std::string& param9() const;
  void set_param9(const std::string& value);
  void set_param9(std::string&& value);
  void set_param9(const char* value);
  void set_param9(const char* value, size_t size);
  std::string* mutable_param9();
  std::string* release_param9();
  void set_allocated_param9(std::string* param9);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param9();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param9(
      std::string* param9);
  private:
  const std::string& _internal_param9() const;
  void _internal_set_param9(const std::string& value);
  std::string* _internal_mutable_param9();
  public:

  // optional string paramDesc10 = 24;
  bool has_paramdesc10() const;
  private:
  bool _internal_has_paramdesc10() const;
  public:
  void clear_paramdesc10();
  const std::string& paramdesc10() const;
  void set_paramdesc10(const std::string& value);
  void set_paramdesc10(std::string&& value);
  void set_paramdesc10(const char* value);
  void set_paramdesc10(const char* value, size_t size);
  std::string* mutable_paramdesc10();
  std::string* release_paramdesc10();
  void set_allocated_paramdesc10(std::string* paramdesc10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc10(
      std::string* paramdesc10);
  private:
  const std::string& _internal_paramdesc10() const;
  void _internal_set_paramdesc10(const std::string& value);
  std::string* _internal_mutable_paramdesc10();
  public:

  // optional string param10 = 25;
  bool has_param10() const;
  private:
  bool _internal_has_param10() const;
  public:
  void clear_param10();
  const std::string& param10() const;
  void set_param10(const std::string& value);
  void set_param10(std::string&& value);
  void set_param10(const char* value);
  void set_param10(const char* value, size_t size);
  std::string* mutable_param10();
  std::string* release_param10();
  void set_allocated_param10(std::string* param10);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param10();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param10(
      std::string* param10);
  private:
  const std::string& _internal_param10() const;
  void _internal_set_param10(const std::string& value);
  std::string* _internal_mutable_param10();
  public:

  // optional string paramDesc11 = 26;
  bool has_paramdesc11() const;
  private:
  bool _internal_has_paramdesc11() const;
  public:
  void clear_paramdesc11();
  const std::string& paramdesc11() const;
  void set_paramdesc11(const std::string& value);
  void set_paramdesc11(std::string&& value);
  void set_paramdesc11(const char* value);
  void set_paramdesc11(const char* value, size_t size);
  std::string* mutable_paramdesc11();
  std::string* release_paramdesc11();
  void set_allocated_paramdesc11(std::string* paramdesc11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc11(
      std::string* paramdesc11);
  private:
  const std::string& _internal_paramdesc11() const;
  void _internal_set_paramdesc11(const std::string& value);
  std::string* _internal_mutable_paramdesc11();
  public:

  // optional string param11 = 27;
  bool has_param11() const;
  private:
  bool _internal_has_param11() const;
  public:
  void clear_param11();
  const std::string& param11() const;
  void set_param11(const std::string& value);
  void set_param11(std::string&& value);
  void set_param11(const char* value);
  void set_param11(const char* value, size_t size);
  std::string* mutable_param11();
  std::string* release_param11();
  void set_allocated_param11(std::string* param11);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param11();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param11(
      std::string* param11);
  private:
  const std::string& _internal_param11() const;
  void _internal_set_param11(const std::string& value);
  std::string* _internal_mutable_param11();
  public:

  // optional string paramDesc12 = 28;
  bool has_paramdesc12() const;
  private:
  bool _internal_has_paramdesc12() const;
  public:
  void clear_paramdesc12();
  const std::string& paramdesc12() const;
  void set_paramdesc12(const std::string& value);
  void set_paramdesc12(std::string&& value);
  void set_paramdesc12(const char* value);
  void set_paramdesc12(const char* value, size_t size);
  std::string* mutable_paramdesc12();
  std::string* release_paramdesc12();
  void set_allocated_paramdesc12(std::string* paramdesc12);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_paramdesc12();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_paramdesc12(
      std::string* paramdesc12);
  private:
  const std::string& _internal_paramdesc12() const;
  void _internal_set_paramdesc12(const std::string& value);
  std::string* _internal_mutable_paramdesc12();
  public:

  // optional string param12 = 29;
  bool has_param12() const;
  private:
  bool _internal_has_param12() const;
  public:
  void clear_param12();
  const std::string& param12() const;
  void set_param12(const std::string& value);
  void set_param12(std::string&& value);
  void set_param12(const char* value);
  void set_param12(const char* value, size_t size);
  std::string* mutable_param12();
  std::string* release_param12();
  void set_allocated_param12(std::string* param12);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param12();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param12(
      std::string* param12);
  private:
  const std::string& _internal_param12() const;
  void _internal_set_param12(const std::string& value);
  std::string* _internal_mutable_param12();
  public:

  // required string createDate = 30;
  bool has_createdate() const;
  private:
  bool _internal_has_createdate() const;
  public:
  void clear_createdate();
  const std::string& createdate() const;
  void set_createdate(const std::string& value);
  void set_createdate(std::string&& value);
  void set_createdate(const char* value);
  void set_createdate(const char* value, size_t size);
  std::string* mutable_createdate();
  std::string* release_createdate();
  void set_allocated_createdate(std::string* createdate);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_createdate();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_createdate(
      std::string* createdate);
  private:
  const std::string& _internal_createdate() const;
  void _internal_set_createdate(const std::string& value);
  std::string* _internal_mutable_createdate();
  public:

  // optional string logDatetime = 31;
  bool has_logdatetime() const;
  private:
  bool _internal_has_logdatetime() const;
  public:
  void clear_logdatetime();
  const std::string& logdatetime() const;
  void set_logdatetime(const std::string& value);
  void set_logdatetime(std::string&& value);
  void set_logdatetime(const char* value);
  void set_logdatetime(const char* value, size_t size);
  std::string* mutable_logdatetime();
  std::string* release_logdatetime();
  void set_allocated_logdatetime(std::string* logdatetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_logdatetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_logdatetime(
      std::string* logdatetime);
  private:
  const std::string& _internal_logdatetime() const;
  void _internal_set_logdatetime(const std::string& value);
  std::string* _internal_mutable_logdatetime();
  public:

  // optional string logTypeDesc = 32;
  bool has_logtypedesc() const;
  private:
  bool _internal_has_logtypedesc() const;
  public:
  void clear_logtypedesc();
  const std::string& logtypedesc() const;
  void set_logtypedesc(const std::string& value);
  void set_logtypedesc(std::string&& value);
  void set_logtypedesc(const char* value);
  void set_logtypedesc(const char* value, size_t size);
  std::string* mutable_logtypedesc();
  std::string* release_logtypedesc();
  void set_allocated_logtypedesc(std::string* logtypedesc);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_logtypedesc();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_logtypedesc(
      std::string* logtypedesc);
  private:
  const std::string& _internal_logtypedesc() const;
  void _internal_set_logtypedesc(const std::string& value);
  std::string* _internal_mutable_logtypedesc();
  public:

  // required int32 logId = 1;
  bool has_logid() const;
  private:
  bool _internal_has_logid() const;
  public:
  void clear_logid();
  ::PROTOBUF_NAMESPACE_ID::int32 logid() const;
  void set_logid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logid() const;
  void _internal_set_logid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 pumpno = 2;
  bool has_pumpno() const;
  private:
  bool _internal_has_pumpno() const;
  public:
  void clear_pumpno();
  ::PROTOBUF_NAMESPACE_ID::int32 pumpno() const;
  void set_pumpno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_pumpno() const;
  void _internal_set_pumpno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 nozzleno = 3;
  bool has_nozzleno() const;
  private:
  bool _internal_has_nozzleno() const;
  public:
  void clear_nozzleno();
  ::PROTOBUF_NAMESPACE_ID::int32 nozzleno() const;
  void set_nozzleno(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nozzleno() const;
  void _internal_set_nozzleno(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 productCode = 4;
  bool has_productcode() const;
  private:
  bool _internal_has_productcode() const;
  public:
  void clear_productcode();
  ::PROTOBUF_NAMESPACE_ID::int32 productcode() const;
  void set_productcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_productcode() const;
  void _internal_set_productcode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 logTranType = 5;
  bool has_logtrantype() const;
  private:
  bool _internal_has_logtrantype() const;
  public:
  void clear_logtrantype();
  ::PROTOBUF_NAMESPACE_ID::int32 logtrantype() const;
  void set_logtrantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_logtrantype() const;
  void _internal_set_logtrantype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DULogs)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param5_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param6_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param7_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param8_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param9_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param10_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc11_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param11_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr paramdesc12_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param12_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr createdate_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logdatetime_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr logtypedesc_;
  ::PROTOBUF_NAMESPACE_ID::int32 logid_;
  ::PROTOBUF_NAMESPACE_ID::int32 pumpno_;
  ::PROTOBUF_NAMESPACE_ID::int32 nozzleno_;
  ::PROTOBUF_NAMESPACE_ID::int32 productcode_;
  ::PROTOBUF_NAMESPACE_ID::int32 logtrantype_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class BOSAlarm PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.BOSAlarm) */ {
 public:
  inline BOSAlarm() : BOSAlarm(nullptr) {};
  virtual ~BOSAlarm();

  BOSAlarm(const BOSAlarm& from);
  BOSAlarm(BOSAlarm&& from) noexcept
    : BOSAlarm() {
    *this = ::std::move(from);
  }

  inline BOSAlarm& operator=(const BOSAlarm& from) {
    CopyFrom(from);
    return *this;
  }
  inline BOSAlarm& operator=(BOSAlarm&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BOSAlarm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BOSAlarm* internal_default_instance() {
    return reinterpret_cast<const BOSAlarm*>(
               &_BOSAlarm_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(BOSAlarm& a, BOSAlarm& b) {
    a.Swap(&b);
  }
  inline void Swap(BOSAlarm* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BOSAlarm* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BOSAlarm* New() const final {
    return CreateMaybeMessage<BOSAlarm>(nullptr);
  }

  BOSAlarm* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BOSAlarm>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BOSAlarm& from);
  void MergeFrom(const BOSAlarm& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BOSAlarm* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.BOSAlarm";
  }
  protected:
  explicit BOSAlarm(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParam1FieldNumber = 4,
    kParam2FieldNumber = 5,
    kParam3FieldNumber = 6,
    kParam4FieldNumber = 7,
    kParam5FieldNumber = 8,
    kAlarmIdFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kAlarmStateFieldNumber = 3,
  };
  // optional string param1 = 4;
  bool has_param1() const;
  private:
  bool _internal_has_param1() const;
  public:
  void clear_param1();
  const std::string& param1() const;
  void set_param1(const std::string& value);
  void set_param1(std::string&& value);
  void set_param1(const char* value);
  void set_param1(const char* value, size_t size);
  std::string* mutable_param1();
  std::string* release_param1();
  void set_allocated_param1(std::string* param1);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param1();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param1(
      std::string* param1);
  private:
  const std::string& _internal_param1() const;
  void _internal_set_param1(const std::string& value);
  std::string* _internal_mutable_param1();
  public:

  // optional string param2 = 5;
  bool has_param2() const;
  private:
  bool _internal_has_param2() const;
  public:
  void clear_param2();
  const std::string& param2() const;
  void set_param2(const std::string& value);
  void set_param2(std::string&& value);
  void set_param2(const char* value);
  void set_param2(const char* value, size_t size);
  std::string* mutable_param2();
  std::string* release_param2();
  void set_allocated_param2(std::string* param2);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param2();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param2(
      std::string* param2);
  private:
  const std::string& _internal_param2() const;
  void _internal_set_param2(const std::string& value);
  std::string* _internal_mutable_param2();
  public:

  // optional string param3 = 6;
  bool has_param3() const;
  private:
  bool _internal_has_param3() const;
  public:
  void clear_param3();
  const std::string& param3() const;
  void set_param3(const std::string& value);
  void set_param3(std::string&& value);
  void set_param3(const char* value);
  void set_param3(const char* value, size_t size);
  std::string* mutable_param3();
  std::string* release_param3();
  void set_allocated_param3(std::string* param3);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param3();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param3(
      std::string* param3);
  private:
  const std::string& _internal_param3() const;
  void _internal_set_param3(const std::string& value);
  std::string* _internal_mutable_param3();
  public:

  // optional string param4 = 7;
  bool has_param4() const;
  private:
  bool _internal_has_param4() const;
  public:
  void clear_param4();
  const std::string& param4() const;
  void set_param4(const std::string& value);
  void set_param4(std::string&& value);
  void set_param4(const char* value);
  void set_param4(const char* value, size_t size);
  std::string* mutable_param4();
  std::string* release_param4();
  void set_allocated_param4(std::string* param4);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param4();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param4(
      std::string* param4);
  private:
  const std::string& _internal_param4() const;
  void _internal_set_param4(const std::string& value);
  std::string* _internal_mutable_param4();
  public:

  // optional string param5 = 8;
  bool has_param5() const;
  private:
  bool _internal_has_param5() const;
  public:
  void clear_param5();
  const std::string& param5() const;
  void set_param5(const std::string& value);
  void set_param5(std::string&& value);
  void set_param5(const char* value);
  void set_param5(const char* value, size_t size);
  std::string* mutable_param5();
  std::string* release_param5();
  void set_allocated_param5(std::string* param5);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_param5();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_param5(
      std::string* param5);
  private:
  const std::string& _internal_param5() const;
  void _internal_set_param5(const std::string& value);
  std::string* _internal_mutable_param5();
  public:

  // required uint32 alarmId = 1;
  bool has_alarmid() const;
  private:
  bool _internal_has_alarmid() const;
  public:
  void clear_alarmid();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmid() const;
  void set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmid() const;
  void _internal_set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deviceId = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 alarmState = 3;
  bool has_alarmstate() const;
  private:
  bool _internal_has_alarmstate() const;
  public:
  void clear_alarmstate();
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmstate() const;
  void set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_alarmstate() const;
  void _internal_set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.BOSAlarm)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param1_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param2_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param3_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param4_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr param5_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 alarmstate_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class FCCDoorStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.FCCDoorStatus) */ {
 public:
  inline FCCDoorStatus() : FCCDoorStatus(nullptr) {};
  virtual ~FCCDoorStatus();

  FCCDoorStatus(const FCCDoorStatus& from);
  FCCDoorStatus(FCCDoorStatus&& from) noexcept
    : FCCDoorStatus() {
    *this = ::std::move(from);
  }

  inline FCCDoorStatus& operator=(const FCCDoorStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline FCCDoorStatus& operator=(FCCDoorStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const FCCDoorStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const FCCDoorStatus* internal_default_instance() {
    return reinterpret_cast<const FCCDoorStatus*>(
               &_FCCDoorStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(FCCDoorStatus& a, FCCDoorStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(FCCDoorStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FCCDoorStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FCCDoorStatus* New() const final {
    return CreateMaybeMessage<FCCDoorStatus>(nullptr);
  }

  FCCDoorStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FCCDoorStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FCCDoorStatus& from);
  void MergeFrom(const FCCDoorStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FCCDoorStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.FCCDoorStatus";
  }
  protected:
  explicit FCCDoorStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 2,
    kStatusFieldNumber = 1,
  };
  // required string dateTime = 2;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datetime(
      std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // required uint32 status = 1;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.FCCDoorStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class InterlockStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.InterlockStatus) */ {
 public:
  inline InterlockStatus() : InterlockStatus(nullptr) {};
  virtual ~InterlockStatus();

  InterlockStatus(const InterlockStatus& from);
  InterlockStatus(InterlockStatus&& from) noexcept
    : InterlockStatus() {
    *this = ::std::move(from);
  }

  inline InterlockStatus& operator=(const InterlockStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline InterlockStatus& operator=(InterlockStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const InterlockStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const InterlockStatus* internal_default_instance() {
    return reinterpret_cast<const InterlockStatus*>(
               &_InterlockStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(InterlockStatus& a, InterlockStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(InterlockStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InterlockStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline InterlockStatus* New() const final {
    return CreateMaybeMessage<InterlockStatus>(nullptr);
  }

  InterlockStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<InterlockStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const InterlockStatus& from);
  void MergeFrom(const InterlockStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InterlockStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.InterlockStatus";
  }
  protected:
  explicit InterlockStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 4,
    kDeviceTypeFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kInterlockTypeFieldNumber = 3,
    kNozzleIdFieldNumber = 5,
  };
  // required string dateTime = 4;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datetime(
      std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // required int32 deviceType = 1;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 deviceId = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // required int32 interlockType = 3;
  bool has_interlocktype() const;
  private:
  bool _internal_has_interlocktype() const;
  public:
  void clear_interlocktype();
  ::PROTOBUF_NAMESPACE_ID::int32 interlocktype() const;
  void set_interlocktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_interlocktype() const;
  void _internal_set_interlocktype(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // optional int32 nozzleId = 5;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::int32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.InterlockStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::int32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::int32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::int32 interlocktype_;
  ::PROTOBUF_NAMESPACE_ID::int32 nozzleid_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class DeviceStatus PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.DeviceStatus) */ {
 public:
  inline DeviceStatus() : DeviceStatus(nullptr) {};
  virtual ~DeviceStatus();

  DeviceStatus(const DeviceStatus& from);
  DeviceStatus(DeviceStatus&& from) noexcept
    : DeviceStatus() {
    *this = ::std::move(from);
  }

  inline DeviceStatus& operator=(const DeviceStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline DeviceStatus& operator=(DeviceStatus&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DeviceStatus& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceStatus* internal_default_instance() {
    return reinterpret_cast<const DeviceStatus*>(
               &_DeviceStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(DeviceStatus& a, DeviceStatus& b) {
    a.Swap(&b);
  }
  inline void Swap(DeviceStatus* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DeviceStatus* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DeviceStatus* New() const final {
    return CreateMaybeMessage<DeviceStatus>(nullptr);
  }

  DeviceStatus* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DeviceStatus>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DeviceStatus& from);
  void MergeFrom(const DeviceStatus& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DeviceStatus* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.DeviceStatus";
  }
  protected:
  explicit DeviceStatus(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDateTimeFieldNumber = 5,
    kDeviceTypeFieldNumber = 1,
    kDeviceIdFieldNumber = 2,
    kNozzleIdFieldNumber = 3,
    kStatusFieldNumber = 4,
  };
  // required string dateTime = 5;
  bool has_datetime() const;
  private:
  bool _internal_has_datetime() const;
  public:
  void clear_datetime();
  const std::string& datetime() const;
  void set_datetime(const std::string& value);
  void set_datetime(std::string&& value);
  void set_datetime(const char* value);
  void set_datetime(const char* value, size_t size);
  std::string* mutable_datetime();
  std::string* release_datetime();
  void set_allocated_datetime(std::string* datetime);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_datetime();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_datetime(
      std::string* datetime);
  private:
  const std::string& _internal_datetime() const;
  void _internal_set_datetime(const std::string& value);
  std::string* _internal_mutable_datetime();
  public:

  // required uint32 deviceType = 1;
  bool has_devicetype() const;
  private:
  bool _internal_has_devicetype() const;
  public:
  void clear_devicetype();
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype() const;
  void set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_devicetype() const;
  void _internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 deviceId = 2;
  bool has_deviceid() const;
  private:
  bool _internal_has_deviceid() const;
  public:
  void clear_deviceid();
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid() const;
  void set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_deviceid() const;
  void _internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // optional uint32 nozzleId = 3;
  bool has_nozzleid() const;
  private:
  bool _internal_has_nozzleid() const;
  public:
  void clear_nozzleid();
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid() const;
  void set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_nozzleid() const;
  void _internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // required uint32 status = 4;
  bool has_status() const;
  private:
  bool _internal_has_status() const;
  public:
  void clear_status();
  ::PROTOBUF_NAMESPACE_ID::uint32 status() const;
  void set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_status() const;
  void _internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.DeviceStatus)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr datetime_;
  ::PROTOBUF_NAMESPACE_ID::uint32 devicetype_;
  ::PROTOBUF_NAMESPACE_ID::uint32 deviceid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 nozzleid_;
  ::PROTOBUF_NAMESPACE_ID::uint32 status_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// -------------------------------------------------------------------

class PromotionalMsg PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:fccboscom.PromotionalMsg) */ {
 public:
  inline PromotionalMsg() : PromotionalMsg(nullptr) {};
  virtual ~PromotionalMsg();

  PromotionalMsg(const PromotionalMsg& from);
  PromotionalMsg(PromotionalMsg&& from) noexcept
    : PromotionalMsg() {
    *this = ::std::move(from);
  }

  inline PromotionalMsg& operator=(const PromotionalMsg& from) {
    CopyFrom(from);
    return *this;
  }
  inline PromotionalMsg& operator=(PromotionalMsg&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const PromotionalMsg& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PromotionalMsg* internal_default_instance() {
    return reinterpret_cast<const PromotionalMsg*>(
               &_PromotionalMsg_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(PromotionalMsg& a, PromotionalMsg& b) {
    a.Swap(&b);
  }
  inline void Swap(PromotionalMsg* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(PromotionalMsg* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline PromotionalMsg* New() const final {
    return CreateMaybeMessage<PromotionalMsg>(nullptr);
  }

  PromotionalMsg* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<PromotionalMsg>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const PromotionalMsg& from);
  void MergeFrom(const PromotionalMsg& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(PromotionalMsg* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "fccboscom.PromotionalMsg";
  }
  protected:
  explicit PromotionalMsg(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_fccboscom_2eproto);
    return ::descriptor_table_fccboscom_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMessageFieldNumber = 1,
  };
  // required string message = 1;
  bool has_message() const;
  private:
  bool _internal_has_message() const;
  public:
  void clear_message();
  const std::string& message() const;
  void set_message(const std::string& value);
  void set_message(std::string&& value);
  void set_message(const char* value);
  void set_message(const char* value, size_t size);
  std::string* mutable_message();
  std::string* release_message();
  void set_allocated_message(std::string* message);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_message();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_message(
      std::string* message);
  private:
  const std::string& _internal_message() const;
  void _internal_set_message(const std::string& value);
  std::string* _internal_mutable_message();
  public:

  // @@protoc_insertion_point(class_scope:fccboscom.PromotionalMsg)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr message_;
  friend struct ::TableStruct_fccboscom_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// RoData

// required uint32 msgid = 1;
inline bool RoData::_internal_has_msgid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool RoData::has_msgid() const {
  return _internal_has_msgid();
}
inline void RoData::clear_msgid() {
  msgid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::msgid() const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.msgid)
  return _internal_msgid();
}
inline void RoData::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  msgid_ = value;
}
inline void RoData::set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:fccboscom.RoData.msgid)
}

// optional uint32 ack = 2;
inline bool RoData::_internal_has_ack() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool RoData::has_ack() const {
  return _internal_has_ack();
}
inline void RoData::clear_ack() {
  ack_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::_internal_ack() const {
  return ack_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::ack() const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.ack)
  return _internal_ack();
}
inline void RoData::_internal_set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  ack_ = value;
}
inline void RoData::set_ack(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_ack(value);
  // @@protoc_insertion_point(field_set:fccboscom.RoData.ack)
}

// optional uint32 msgRecordId = 3;
inline bool RoData::_internal_has_msgrecordid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool RoData::has_msgrecordid() const {
  return _internal_has_msgrecordid();
}
inline void RoData::clear_msgrecordid() {
  msgrecordid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::_internal_msgrecordid() const {
  return msgrecordid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 RoData::msgrecordid() const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.msgRecordId)
  return _internal_msgrecordid();
}
inline void RoData::_internal_set_msgrecordid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  msgrecordid_ = value;
}
inline void RoData::set_msgrecordid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgrecordid(value);
  // @@protoc_insertion_point(field_set:fccboscom.RoData.msgRecordId)
}

// repeated .fccboscom.DbConf dbConf = 4;
inline int RoData::_internal_dbconf_size() const {
  return dbconf_.size();
}
inline int RoData::dbconf_size() const {
  return _internal_dbconf_size();
}
inline void RoData::clear_dbconf() {
  dbconf_.Clear();
}
inline ::fccboscom::DbConf* RoData::mutable_dbconf(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.dbConf)
  return dbconf_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DbConf >*
RoData::mutable_dbconf() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.dbConf)
  return &dbconf_;
}
inline const ::fccboscom::DbConf& RoData::_internal_dbconf(int index) const {
  return dbconf_.Get(index);
}
inline const ::fccboscom::DbConf& RoData::dbconf(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.dbConf)
  return _internal_dbconf(index);
}
inline ::fccboscom::DbConf* RoData::_internal_add_dbconf() {
  return dbconf_.Add();
}
inline ::fccboscom::DbConf* RoData::add_dbconf() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.dbConf)
  return _internal_add_dbconf();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DbConf >&
RoData::dbconf() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.dbConf)
  return dbconf_;
}

// repeated .fccboscom.TankStatus tankStatus = 5;
inline int RoData::_internal_tankstatus_size() const {
  return tankstatus_.size();
}
inline int RoData::tankstatus_size() const {
  return _internal_tankstatus_size();
}
inline void RoData::clear_tankstatus() {
  tankstatus_.Clear();
}
inline ::fccboscom::TankStatus* RoData::mutable_tankstatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.tankStatus)
  return tankstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankStatus >*
RoData::mutable_tankstatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.tankStatus)
  return &tankstatus_;
}
inline const ::fccboscom::TankStatus& RoData::_internal_tankstatus(int index) const {
  return tankstatus_.Get(index);
}
inline const ::fccboscom::TankStatus& RoData::tankstatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.tankStatus)
  return _internal_tankstatus(index);
}
inline ::fccboscom::TankStatus* RoData::_internal_add_tankstatus() {
  return tankstatus_.Add();
}
inline ::fccboscom::TankStatus* RoData::add_tankstatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.tankStatus)
  return _internal_add_tankstatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankStatus >&
RoData::tankstatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.tankStatus)
  return tankstatus_;
}

// repeated .fccboscom.PumpStatus pumpStatus = 6;
inline int RoData::_internal_pumpstatus_size() const {
  return pumpstatus_.size();
}
inline int RoData::pumpstatus_size() const {
  return _internal_pumpstatus_size();
}
inline void RoData::clear_pumpstatus() {
  pumpstatus_.Clear();
}
inline ::fccboscom::PumpStatus* RoData::mutable_pumpstatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.pumpStatus)
  return pumpstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpStatus >*
RoData::mutable_pumpstatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.pumpStatus)
  return &pumpstatus_;
}
inline const ::fccboscom::PumpStatus& RoData::_internal_pumpstatus(int index) const {
  return pumpstatus_.Get(index);
}
inline const ::fccboscom::PumpStatus& RoData::pumpstatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.pumpStatus)
  return _internal_pumpstatus(index);
}
inline ::fccboscom::PumpStatus* RoData::_internal_add_pumpstatus() {
  return pumpstatus_.Add();
}
inline ::fccboscom::PumpStatus* RoData::add_pumpstatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.pumpStatus)
  return _internal_add_pumpstatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpStatus >&
RoData::pumpstatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.pumpStatus)
  return pumpstatus_;
}

// repeated .fccboscom.UpsStatus upsStatus = 7;
inline int RoData::_internal_upsstatus_size() const {
  return upsstatus_.size();
}
inline int RoData::upsstatus_size() const {
  return _internal_upsstatus_size();
}
inline void RoData::clear_upsstatus() {
  upsstatus_.Clear();
}
inline ::fccboscom::UpsStatus* RoData::mutable_upsstatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.upsStatus)
  return upsstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::UpsStatus >*
RoData::mutable_upsstatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.upsStatus)
  return &upsstatus_;
}
inline const ::fccboscom::UpsStatus& RoData::_internal_upsstatus(int index) const {
  return upsstatus_.Get(index);
}
inline const ::fccboscom::UpsStatus& RoData::upsstatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.upsStatus)
  return _internal_upsstatus(index);
}
inline ::fccboscom::UpsStatus* RoData::_internal_add_upsstatus() {
  return upsstatus_.Add();
}
inline ::fccboscom::UpsStatus* RoData::add_upsstatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.upsStatus)
  return _internal_add_upsstatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::UpsStatus >&
RoData::upsstatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.upsStatus)
  return upsstatus_;
}

// repeated .fccboscom.PumpTrxn pumpTrxn = 8;
inline int RoData::_internal_pumptrxn_size() const {
  return pumptrxn_.size();
}
inline int RoData::pumptrxn_size() const {
  return _internal_pumptrxn_size();
}
inline void RoData::clear_pumptrxn() {
  pumptrxn_.Clear();
}
inline ::fccboscom::PumpTrxn* RoData::mutable_pumptrxn(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.pumpTrxn)
  return pumptrxn_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpTrxn >*
RoData::mutable_pumptrxn() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.pumpTrxn)
  return &pumptrxn_;
}
inline const ::fccboscom::PumpTrxn& RoData::_internal_pumptrxn(int index) const {
  return pumptrxn_.Get(index);
}
inline const ::fccboscom::PumpTrxn& RoData::pumptrxn(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.pumpTrxn)
  return _internal_pumptrxn(index);
}
inline ::fccboscom::PumpTrxn* RoData::_internal_add_pumptrxn() {
  return pumptrxn_.Add();
}
inline ::fccboscom::PumpTrxn* RoData::add_pumptrxn() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.pumpTrxn)
  return _internal_add_pumptrxn();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpTrxn >&
RoData::pumptrxn() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.pumpTrxn)
  return pumptrxn_;
}

// repeated .fccboscom.TankInventory tankInventory = 9;
inline int RoData::_internal_tankinventory_size() const {
  return tankinventory_.size();
}
inline int RoData::tankinventory_size() const {
  return _internal_tankinventory_size();
}
inline void RoData::clear_tankinventory() {
  tankinventory_.Clear();
}
inline ::fccboscom::TankInventory* RoData::mutable_tankinventory(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.tankInventory)
  return tankinventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankInventory >*
RoData::mutable_tankinventory() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.tankInventory)
  return &tankinventory_;
}
inline const ::fccboscom::TankInventory& RoData::_internal_tankinventory(int index) const {
  return tankinventory_.Get(index);
}
inline const ::fccboscom::TankInventory& RoData::tankinventory(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.tankInventory)
  return _internal_tankinventory(index);
}
inline ::fccboscom::TankInventory* RoData::_internal_add_tankinventory() {
  return tankinventory_.Add();
}
inline ::fccboscom::TankInventory* RoData::add_tankinventory() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.tankInventory)
  return _internal_add_tankinventory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankInventory >&
RoData::tankinventory() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.tankInventory)
  return tankinventory_;
}

// repeated .fccboscom.TankDelivery tankDelivery = 10;
inline int RoData::_internal_tankdelivery_size() const {
  return tankdelivery_.size();
}
inline int RoData::tankdelivery_size() const {
  return _internal_tankdelivery_size();
}
inline void RoData::clear_tankdelivery() {
  tankdelivery_.Clear();
}
inline ::fccboscom::TankDelivery* RoData::mutable_tankdelivery(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.tankDelivery)
  return tankdelivery_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankDelivery >*
RoData::mutable_tankdelivery() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.tankDelivery)
  return &tankdelivery_;
}
inline const ::fccboscom::TankDelivery& RoData::_internal_tankdelivery(int index) const {
  return tankdelivery_.Get(index);
}
inline const ::fccboscom::TankDelivery& RoData::tankdelivery(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.tankDelivery)
  return _internal_tankdelivery(index);
}
inline ::fccboscom::TankDelivery* RoData::_internal_add_tankdelivery() {
  return tankdelivery_.Add();
}
inline ::fccboscom::TankDelivery* RoData::add_tankdelivery() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.tankDelivery)
  return _internal_add_tankdelivery();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankDelivery >&
RoData::tankdelivery() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.tankDelivery)
  return tankdelivery_;
}

// repeated .fccboscom.DeliveryReceipt deliveryReceipt = 11;
inline int RoData::_internal_deliveryreceipt_size() const {
  return deliveryreceipt_.size();
}
inline int RoData::deliveryreceipt_size() const {
  return _internal_deliveryreceipt_size();
}
inline void RoData::clear_deliveryreceipt() {
  deliveryreceipt_.Clear();
}
inline ::fccboscom::DeliveryReceipt* RoData::mutable_deliveryreceipt(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.deliveryReceipt)
  return deliveryreceipt_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeliveryReceipt >*
RoData::mutable_deliveryreceipt() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.deliveryReceipt)
  return &deliveryreceipt_;
}
inline const ::fccboscom::DeliveryReceipt& RoData::_internal_deliveryreceipt(int index) const {
  return deliveryreceipt_.Get(index);
}
inline const ::fccboscom::DeliveryReceipt& RoData::deliveryreceipt(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.deliveryReceipt)
  return _internal_deliveryreceipt(index);
}
inline ::fccboscom::DeliveryReceipt* RoData::_internal_add_deliveryreceipt() {
  return deliveryreceipt_.Add();
}
inline ::fccboscom::DeliveryReceipt* RoData::add_deliveryreceipt() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.deliveryReceipt)
  return _internal_add_deliveryreceipt();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeliveryReceipt >&
RoData::deliveryreceipt() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.deliveryReceipt)
  return deliveryreceipt_;
}

// repeated .fccboscom.AlarmDetails alarmDetails = 12;
inline int RoData::_internal_alarmdetails_size() const {
  return alarmdetails_.size();
}
inline int RoData::alarmdetails_size() const {
  return _internal_alarmdetails_size();
}
inline void RoData::clear_alarmdetails() {
  alarmdetails_.Clear();
}
inline ::fccboscom::AlarmDetails* RoData::mutable_alarmdetails(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.alarmDetails)
  return alarmdetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmDetails >*
RoData::mutable_alarmdetails() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.alarmDetails)
  return &alarmdetails_;
}
inline const ::fccboscom::AlarmDetails& RoData::_internal_alarmdetails(int index) const {
  return alarmdetails_.Get(index);
}
inline const ::fccboscom::AlarmDetails& RoData::alarmdetails(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.alarmDetails)
  return _internal_alarmdetails(index);
}
inline ::fccboscom::AlarmDetails* RoData::_internal_add_alarmdetails() {
  return alarmdetails_.Add();
}
inline ::fccboscom::AlarmDetails* RoData::add_alarmdetails() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.alarmDetails)
  return _internal_add_alarmdetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmDetails >&
RoData::alarmdetails() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.alarmDetails)
  return alarmdetails_;
}

// repeated .fccboscom.DayEndDetails dayEndDetails = 13;
inline int RoData::_internal_dayenddetails_size() const {
  return dayenddetails_.size();
}
inline int RoData::dayenddetails_size() const {
  return _internal_dayenddetails_size();
}
inline void RoData::clear_dayenddetails() {
  dayenddetails_.Clear();
}
inline ::fccboscom::DayEndDetails* RoData::mutable_dayenddetails(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.dayEndDetails)
  return dayenddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndDetails >*
RoData::mutable_dayenddetails() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.dayEndDetails)
  return &dayenddetails_;
}
inline const ::fccboscom::DayEndDetails& RoData::_internal_dayenddetails(int index) const {
  return dayenddetails_.Get(index);
}
inline const ::fccboscom::DayEndDetails& RoData::dayenddetails(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.dayEndDetails)
  return _internal_dayenddetails(index);
}
inline ::fccboscom::DayEndDetails* RoData::_internal_add_dayenddetails() {
  return dayenddetails_.Add();
}
inline ::fccboscom::DayEndDetails* RoData::add_dayenddetails() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.dayEndDetails)
  return _internal_add_dayenddetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndDetails >&
RoData::dayenddetails() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.dayEndDetails)
  return dayenddetails_;
}

// repeated .fccboscom.DayEndTotalizer dayEndTotalizer = 14;
inline int RoData::_internal_dayendtotalizer_size() const {
  return dayendtotalizer_.size();
}
inline int RoData::dayendtotalizer_size() const {
  return _internal_dayendtotalizer_size();
}
inline void RoData::clear_dayendtotalizer() {
  dayendtotalizer_.Clear();
}
inline ::fccboscom::DayEndTotalizer* RoData::mutable_dayendtotalizer(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.dayEndTotalizer)
  return dayendtotalizer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndTotalizer >*
RoData::mutable_dayendtotalizer() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.dayEndTotalizer)
  return &dayendtotalizer_;
}
inline const ::fccboscom::DayEndTotalizer& RoData::_internal_dayendtotalizer(int index) const {
  return dayendtotalizer_.Get(index);
}
inline const ::fccboscom::DayEndTotalizer& RoData::dayendtotalizer(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.dayEndTotalizer)
  return _internal_dayendtotalizer(index);
}
inline ::fccboscom::DayEndTotalizer* RoData::_internal_add_dayendtotalizer() {
  return dayendtotalizer_.Add();
}
inline ::fccboscom::DayEndTotalizer* RoData::add_dayendtotalizer() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.dayEndTotalizer)
  return _internal_add_dayendtotalizer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndTotalizer >&
RoData::dayendtotalizer() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.dayEndTotalizer)
  return dayendtotalizer_;
}

// repeated .fccboscom.DayEndInventory dayEndInventory = 15;
inline int RoData::_internal_dayendinventory_size() const {
  return dayendinventory_.size();
}
inline int RoData::dayendinventory_size() const {
  return _internal_dayendinventory_size();
}
inline void RoData::clear_dayendinventory() {
  dayendinventory_.Clear();
}
inline ::fccboscom::DayEndInventory* RoData::mutable_dayendinventory(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.dayEndInventory)
  return dayendinventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndInventory >*
RoData::mutable_dayendinventory() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.dayEndInventory)
  return &dayendinventory_;
}
inline const ::fccboscom::DayEndInventory& RoData::_internal_dayendinventory(int index) const {
  return dayendinventory_.Get(index);
}
inline const ::fccboscom::DayEndInventory& RoData::dayendinventory(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.dayEndInventory)
  return _internal_dayendinventory(index);
}
inline ::fccboscom::DayEndInventory* RoData::_internal_add_dayendinventory() {
  return dayendinventory_.Add();
}
inline ::fccboscom::DayEndInventory* RoData::add_dayendinventory() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.dayEndInventory)
  return _internal_add_dayendinventory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DayEndInventory >&
RoData::dayendinventory() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.dayEndInventory)
  return dayendinventory_;
}

// repeated .fccboscom.ShiftEndDetails shiftEndDetails = 16;
inline int RoData::_internal_shiftenddetails_size() const {
  return shiftenddetails_.size();
}
inline int RoData::shiftenddetails_size() const {
  return _internal_shiftenddetails_size();
}
inline void RoData::clear_shiftenddetails() {
  shiftenddetails_.Clear();
}
inline ::fccboscom::ShiftEndDetails* RoData::mutable_shiftenddetails(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.shiftEndDetails)
  return shiftenddetails_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndDetails >*
RoData::mutable_shiftenddetails() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.shiftEndDetails)
  return &shiftenddetails_;
}
inline const ::fccboscom::ShiftEndDetails& RoData::_internal_shiftenddetails(int index) const {
  return shiftenddetails_.Get(index);
}
inline const ::fccboscom::ShiftEndDetails& RoData::shiftenddetails(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.shiftEndDetails)
  return _internal_shiftenddetails(index);
}
inline ::fccboscom::ShiftEndDetails* RoData::_internal_add_shiftenddetails() {
  return shiftenddetails_.Add();
}
inline ::fccboscom::ShiftEndDetails* RoData::add_shiftenddetails() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.shiftEndDetails)
  return _internal_add_shiftenddetails();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndDetails >&
RoData::shiftenddetails() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.shiftEndDetails)
  return shiftenddetails_;
}

// repeated .fccboscom.ShiftEndTotalizer shiftEndTotalizer = 17;
inline int RoData::_internal_shiftendtotalizer_size() const {
  return shiftendtotalizer_.size();
}
inline int RoData::shiftendtotalizer_size() const {
  return _internal_shiftendtotalizer_size();
}
inline void RoData::clear_shiftendtotalizer() {
  shiftendtotalizer_.Clear();
}
inline ::fccboscom::ShiftEndTotalizer* RoData::mutable_shiftendtotalizer(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.shiftEndTotalizer)
  return shiftendtotalizer_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndTotalizer >*
RoData::mutable_shiftendtotalizer() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.shiftEndTotalizer)
  return &shiftendtotalizer_;
}
inline const ::fccboscom::ShiftEndTotalizer& RoData::_internal_shiftendtotalizer(int index) const {
  return shiftendtotalizer_.Get(index);
}
inline const ::fccboscom::ShiftEndTotalizer& RoData::shiftendtotalizer(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.shiftEndTotalizer)
  return _internal_shiftendtotalizer(index);
}
inline ::fccboscom::ShiftEndTotalizer* RoData::_internal_add_shiftendtotalizer() {
  return shiftendtotalizer_.Add();
}
inline ::fccboscom::ShiftEndTotalizer* RoData::add_shiftendtotalizer() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.shiftEndTotalizer)
  return _internal_add_shiftendtotalizer();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndTotalizer >&
RoData::shiftendtotalizer() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.shiftEndTotalizer)
  return shiftendtotalizer_;
}

// repeated .fccboscom.ShiftEndInventory shiftEndInventory = 18;
inline int RoData::_internal_shiftendinventory_size() const {
  return shiftendinventory_.size();
}
inline int RoData::shiftendinventory_size() const {
  return _internal_shiftendinventory_size();
}
inline void RoData::clear_shiftendinventory() {
  shiftendinventory_.Clear();
}
inline ::fccboscom::ShiftEndInventory* RoData::mutable_shiftendinventory(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.shiftEndInventory)
  return shiftendinventory_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndInventory >*
RoData::mutable_shiftendinventory() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.shiftEndInventory)
  return &shiftendinventory_;
}
inline const ::fccboscom::ShiftEndInventory& RoData::_internal_shiftendinventory(int index) const {
  return shiftendinventory_.Get(index);
}
inline const ::fccboscom::ShiftEndInventory& RoData::shiftendinventory(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.shiftEndInventory)
  return _internal_shiftendinventory(index);
}
inline ::fccboscom::ShiftEndInventory* RoData::_internal_add_shiftendinventory() {
  return shiftendinventory_.Add();
}
inline ::fccboscom::ShiftEndInventory* RoData::add_shiftendinventory() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.shiftEndInventory)
  return _internal_add_shiftendinventory();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ShiftEndInventory >&
RoData::shiftendinventory() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.shiftEndInventory)
  return shiftendinventory_;
}

// repeated .fccboscom.PumpControl pumpControl = 19;
inline int RoData::_internal_pumpcontrol_size() const {
  return pumpcontrol_.size();
}
inline int RoData::pumpcontrol_size() const {
  return _internal_pumpcontrol_size();
}
inline void RoData::clear_pumpcontrol() {
  pumpcontrol_.Clear();
}
inline ::fccboscom::PumpControl* RoData::mutable_pumpcontrol(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.pumpControl)
  return pumpcontrol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpControl >*
RoData::mutable_pumpcontrol() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.pumpControl)
  return &pumpcontrol_;
}
inline const ::fccboscom::PumpControl& RoData::_internal_pumpcontrol(int index) const {
  return pumpcontrol_.Get(index);
}
inline const ::fccboscom::PumpControl& RoData::pumpcontrol(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.pumpControl)
  return _internal_pumpcontrol(index);
}
inline ::fccboscom::PumpControl* RoData::_internal_add_pumpcontrol() {
  return pumpcontrol_.Add();
}
inline ::fccboscom::PumpControl* RoData::add_pumpcontrol() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.pumpControl)
  return _internal_add_pumpcontrol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PumpControl >&
RoData::pumpcontrol() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.pumpControl)
  return pumpcontrol_;
}

// repeated .fccboscom.TankControl tankControl = 20;
inline int RoData::_internal_tankcontrol_size() const {
  return tankcontrol_.size();
}
inline int RoData::tankcontrol_size() const {
  return _internal_tankcontrol_size();
}
inline void RoData::clear_tankcontrol() {
  tankcontrol_.Clear();
}
inline ::fccboscom::TankControl* RoData::mutable_tankcontrol(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.tankControl)
  return tankcontrol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankControl >*
RoData::mutable_tankcontrol() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.tankControl)
  return &tankcontrol_;
}
inline const ::fccboscom::TankControl& RoData::_internal_tankcontrol(int index) const {
  return tankcontrol_.Get(index);
}
inline const ::fccboscom::TankControl& RoData::tankcontrol(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.tankControl)
  return _internal_tankcontrol(index);
}
inline ::fccboscom::TankControl* RoData::_internal_add_tankcontrol() {
  return tankcontrol_.Add();
}
inline ::fccboscom::TankControl* RoData::add_tankcontrol() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.tankControl)
  return _internal_add_tankcontrol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TankControl >&
RoData::tankcontrol() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.tankControl)
  return tankcontrol_;
}

// repeated .fccboscom.ProductPriceChange productPriceChange = 21;
inline int RoData::_internal_productpricechange_size() const {
  return productpricechange_.size();
}
inline int RoData::productpricechange_size() const {
  return _internal_productpricechange_size();
}
inline void RoData::clear_productpricechange() {
  productpricechange_.Clear();
}
inline ::fccboscom::ProductPriceChange* RoData::mutable_productpricechange(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.productPriceChange)
  return productpricechange_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ProductPriceChange >*
RoData::mutable_productpricechange() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.productPriceChange)
  return &productpricechange_;
}
inline const ::fccboscom::ProductPriceChange& RoData::_internal_productpricechange(int index) const {
  return productpricechange_.Get(index);
}
inline const ::fccboscom::ProductPriceChange& RoData::productpricechange(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.productPriceChange)
  return _internal_productpricechange(index);
}
inline ::fccboscom::ProductPriceChange* RoData::_internal_add_productpricechange() {
  return productpricechange_.Add();
}
inline ::fccboscom::ProductPriceChange* RoData::add_productpricechange() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.productPriceChange)
  return _internal_add_productpricechange();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::ProductPriceChange >&
RoData::productpricechange() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.productPriceChange)
  return productpricechange_;
}

// repeated .fccboscom.PriceChangeStatus priceChangeStatus = 22;
inline int RoData::_internal_pricechangestatus_size() const {
  return pricechangestatus_.size();
}
inline int RoData::pricechangestatus_size() const {
  return _internal_pricechangestatus_size();
}
inline void RoData::clear_pricechangestatus() {
  pricechangestatus_.Clear();
}
inline ::fccboscom::PriceChangeStatus* RoData::mutable_pricechangestatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.priceChangeStatus)
  return pricechangestatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PriceChangeStatus >*
RoData::mutable_pricechangestatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.priceChangeStatus)
  return &pricechangestatus_;
}
inline const ::fccboscom::PriceChangeStatus& RoData::_internal_pricechangestatus(int index) const {
  return pricechangestatus_.Get(index);
}
inline const ::fccboscom::PriceChangeStatus& RoData::pricechangestatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.priceChangeStatus)
  return _internal_pricechangestatus(index);
}
inline ::fccboscom::PriceChangeStatus* RoData::_internal_add_pricechangestatus() {
  return pricechangestatus_.Add();
}
inline ::fccboscom::PriceChangeStatus* RoData::add_pricechangestatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.priceChangeStatus)
  return _internal_add_pricechangestatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PriceChangeStatus >&
RoData::pricechangestatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.priceChangeStatus)
  return pricechangestatus_;
}

// repeated .fccboscom.OperationControl operationControl = 23;
inline int RoData::_internal_operationcontrol_size() const {
  return operationcontrol_.size();
}
inline int RoData::operationcontrol_size() const {
  return _internal_operationcontrol_size();
}
inline void RoData::clear_operationcontrol() {
  operationcontrol_.Clear();
}
inline ::fccboscom::OperationControl* RoData::mutable_operationcontrol(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.operationControl)
  return operationcontrol_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OperationControl >*
RoData::mutable_operationcontrol() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.operationControl)
  return &operationcontrol_;
}
inline const ::fccboscom::OperationControl& RoData::_internal_operationcontrol(int index) const {
  return operationcontrol_.Get(index);
}
inline const ::fccboscom::OperationControl& RoData::operationcontrol(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.operationControl)
  return _internal_operationcontrol(index);
}
inline ::fccboscom::OperationControl* RoData::_internal_add_operationcontrol() {
  return operationcontrol_.Add();
}
inline ::fccboscom::OperationControl* RoData::add_operationcontrol() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.operationControl)
  return _internal_add_operationcontrol();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OperationControl >&
RoData::operationcontrol() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.operationControl)
  return operationcontrol_;
}

// repeated .fccboscom.TrxnMopUpdate trxnMopUpdate = 24;
inline int RoData::_internal_trxnmopupdate_size() const {
  return trxnmopupdate_.size();
}
inline int RoData::trxnmopupdate_size() const {
  return _internal_trxnmopupdate_size();
}
inline void RoData::clear_trxnmopupdate() {
  trxnmopupdate_.Clear();
}
inline ::fccboscom::TrxnMopUpdate* RoData::mutable_trxnmopupdate(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.trxnMopUpdate)
  return trxnmopupdate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TrxnMopUpdate >*
RoData::mutable_trxnmopupdate() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.trxnMopUpdate)
  return &trxnmopupdate_;
}
inline const ::fccboscom::TrxnMopUpdate& RoData::_internal_trxnmopupdate(int index) const {
  return trxnmopupdate_.Get(index);
}
inline const ::fccboscom::TrxnMopUpdate& RoData::trxnmopupdate(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.trxnMopUpdate)
  return _internal_trxnmopupdate(index);
}
inline ::fccboscom::TrxnMopUpdate* RoData::_internal_add_trxnmopupdate() {
  return trxnmopupdate_.Add();
}
inline ::fccboscom::TrxnMopUpdate* RoData::add_trxnmopupdate() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.trxnMopUpdate)
  return _internal_add_trxnmopupdate();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::TrxnMopUpdate >&
RoData::trxnmopupdate() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.trxnMopUpdate)
  return trxnmopupdate_;
}

// repeated .fccboscom.AlarmAck alarmAck = 25;
inline int RoData::_internal_alarmack_size() const {
  return alarmack_.size();
}
inline int RoData::alarmack_size() const {
  return _internal_alarmack_size();
}
inline void RoData::clear_alarmack() {
  alarmack_.Clear();
}
inline ::fccboscom::AlarmAck* RoData::mutable_alarmack(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.alarmAck)
  return alarmack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmAck >*
RoData::mutable_alarmack() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.alarmAck)
  return &alarmack_;
}
inline const ::fccboscom::AlarmAck& RoData::_internal_alarmack(int index) const {
  return alarmack_.Get(index);
}
inline const ::fccboscom::AlarmAck& RoData::alarmack(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.alarmAck)
  return _internal_alarmack(index);
}
inline ::fccboscom::AlarmAck* RoData::_internal_add_alarmack() {
  return alarmack_.Add();
}
inline ::fccboscom::AlarmAck* RoData::add_alarmack() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.alarmAck)
  return _internal_add_alarmack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::AlarmAck >&
RoData::alarmack() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.alarmAck)
  return alarmack_;
}

// repeated .fccboscom.FccOperation fccOperation = 26;
inline int RoData::_internal_fccoperation_size() const {
  return fccoperation_.size();
}
inline int RoData::fccoperation_size() const {
  return _internal_fccoperation_size();
}
inline void RoData::clear_fccoperation() {
  fccoperation_.Clear();
}
inline ::fccboscom::FccOperation* RoData::mutable_fccoperation(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.fccOperation)
  return fccoperation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FccOperation >*
RoData::mutable_fccoperation() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.fccOperation)
  return &fccoperation_;
}
inline const ::fccboscom::FccOperation& RoData::_internal_fccoperation(int index) const {
  return fccoperation_.Get(index);
}
inline const ::fccboscom::FccOperation& RoData::fccoperation(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.fccOperation)
  return _internal_fccoperation(index);
}
inline ::fccboscom::FccOperation* RoData::_internal_add_fccoperation() {
  return fccoperation_.Add();
}
inline ::fccboscom::FccOperation* RoData::add_fccoperation() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.fccOperation)
  return _internal_add_fccoperation();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FccOperation >&
RoData::fccoperation() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.fccOperation)
  return fccoperation_;
}

// repeated .fccboscom.BosAck bosAck = 27;
inline int RoData::_internal_bosack_size() const {
  return bosack_.size();
}
inline int RoData::bosack_size() const {
  return _internal_bosack_size();
}
inline void RoData::clear_bosack() {
  bosack_.Clear();
}
inline ::fccboscom::BosAck* RoData::mutable_bosack(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.bosAck)
  return bosack_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BosAck >*
RoData::mutable_bosack() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.bosAck)
  return &bosack_;
}
inline const ::fccboscom::BosAck& RoData::_internal_bosack(int index) const {
  return bosack_.Get(index);
}
inline const ::fccboscom::BosAck& RoData::bosack(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.bosAck)
  return _internal_bosack(index);
}
inline ::fccboscom::BosAck* RoData::_internal_add_bosack() {
  return bosack_.Add();
}
inline ::fccboscom::BosAck* RoData::add_bosack() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.bosAck)
  return _internal_add_bosack();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BosAck >&
RoData::bosack() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.bosAck)
  return bosack_;
}

// repeated .fccboscom.HeartBeat heartBeat = 28;
inline int RoData::_internal_heartbeat_size() const {
  return heartbeat_.size();
}
inline int RoData::heartbeat_size() const {
  return _internal_heartbeat_size();
}
inline void RoData::clear_heartbeat() {
  heartbeat_.Clear();
}
inline ::fccboscom::HeartBeat* RoData::mutable_heartbeat(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.heartBeat)
  return heartbeat_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::HeartBeat >*
RoData::mutable_heartbeat() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.heartBeat)
  return &heartbeat_;
}
inline const ::fccboscom::HeartBeat& RoData::_internal_heartbeat(int index) const {
  return heartbeat_.Get(index);
}
inline const ::fccboscom::HeartBeat& RoData::heartbeat(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.heartBeat)
  return _internal_heartbeat(index);
}
inline ::fccboscom::HeartBeat* RoData::_internal_add_heartbeat() {
  return heartbeat_.Add();
}
inline ::fccboscom::HeartBeat* RoData::add_heartbeat() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.heartBeat)
  return _internal_add_heartbeat();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::HeartBeat >&
RoData::heartbeat() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.heartBeat)
  return heartbeat_;
}

// repeated .fccboscom.OtherDevice otherDevice = 29;
inline int RoData::_internal_otherdevice_size() const {
  return otherdevice_.size();
}
inline int RoData::otherdevice_size() const {
  return _internal_otherdevice_size();
}
inline void RoData::clear_otherdevice() {
  otherdevice_.Clear();
}
inline ::fccboscom::OtherDevice* RoData::mutable_otherdevice(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.otherDevice)
  return otherdevice_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OtherDevice >*
RoData::mutable_otherdevice() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.otherDevice)
  return &otherdevice_;
}
inline const ::fccboscom::OtherDevice& RoData::_internal_otherdevice(int index) const {
  return otherdevice_.Get(index);
}
inline const ::fccboscom::OtherDevice& RoData::otherdevice(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.otherDevice)
  return _internal_otherdevice(index);
}
inline ::fccboscom::OtherDevice* RoData::_internal_add_otherdevice() {
  return otherdevice_.Add();
}
inline ::fccboscom::OtherDevice* RoData::add_otherdevice() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.otherDevice)
  return _internal_add_otherdevice();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::OtherDevice >&
RoData::otherdevice() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.otherDevice)
  return otherdevice_;
}

// repeated .fccboscom.DULogs duLogs = 30;
inline int RoData::_internal_dulogs_size() const {
  return dulogs_.size();
}
inline int RoData::dulogs_size() const {
  return _internal_dulogs_size();
}
inline void RoData::clear_dulogs() {
  dulogs_.Clear();
}
inline ::fccboscom::DULogs* RoData::mutable_dulogs(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.duLogs)
  return dulogs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DULogs >*
RoData::mutable_dulogs() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.duLogs)
  return &dulogs_;
}
inline const ::fccboscom::DULogs& RoData::_internal_dulogs(int index) const {
  return dulogs_.Get(index);
}
inline const ::fccboscom::DULogs& RoData::dulogs(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.duLogs)
  return _internal_dulogs(index);
}
inline ::fccboscom::DULogs* RoData::_internal_add_dulogs() {
  return dulogs_.Add();
}
inline ::fccboscom::DULogs* RoData::add_dulogs() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.duLogs)
  return _internal_add_dulogs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DULogs >&
RoData::dulogs() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.duLogs)
  return dulogs_;
}

// repeated .fccboscom.BOSAlarm bosAlarm = 31;
inline int RoData::_internal_bosalarm_size() const {
  return bosalarm_.size();
}
inline int RoData::bosalarm_size() const {
  return _internal_bosalarm_size();
}
inline void RoData::clear_bosalarm() {
  bosalarm_.Clear();
}
inline ::fccboscom::BOSAlarm* RoData::mutable_bosalarm(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.bosAlarm)
  return bosalarm_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BOSAlarm >*
RoData::mutable_bosalarm() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.bosAlarm)
  return &bosalarm_;
}
inline const ::fccboscom::BOSAlarm& RoData::_internal_bosalarm(int index) const {
  return bosalarm_.Get(index);
}
inline const ::fccboscom::BOSAlarm& RoData::bosalarm(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.bosAlarm)
  return _internal_bosalarm(index);
}
inline ::fccboscom::BOSAlarm* RoData::_internal_add_bosalarm() {
  return bosalarm_.Add();
}
inline ::fccboscom::BOSAlarm* RoData::add_bosalarm() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.bosAlarm)
  return _internal_add_bosalarm();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::BOSAlarm >&
RoData::bosalarm() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.bosAlarm)
  return bosalarm_;
}

// repeated .fccboscom.FCCDoorStatus fccDoorStatus = 32;
inline int RoData::_internal_fccdoorstatus_size() const {
  return fccdoorstatus_.size();
}
inline int RoData::fccdoorstatus_size() const {
  return _internal_fccdoorstatus_size();
}
inline void RoData::clear_fccdoorstatus() {
  fccdoorstatus_.Clear();
}
inline ::fccboscom::FCCDoorStatus* RoData::mutable_fccdoorstatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.fccDoorStatus)
  return fccdoorstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FCCDoorStatus >*
RoData::mutable_fccdoorstatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.fccDoorStatus)
  return &fccdoorstatus_;
}
inline const ::fccboscom::FCCDoorStatus& RoData::_internal_fccdoorstatus(int index) const {
  return fccdoorstatus_.Get(index);
}
inline const ::fccboscom::FCCDoorStatus& RoData::fccdoorstatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.fccDoorStatus)
  return _internal_fccdoorstatus(index);
}
inline ::fccboscom::FCCDoorStatus* RoData::_internal_add_fccdoorstatus() {
  return fccdoorstatus_.Add();
}
inline ::fccboscom::FCCDoorStatus* RoData::add_fccdoorstatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.fccDoorStatus)
  return _internal_add_fccdoorstatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::FCCDoorStatus >&
RoData::fccdoorstatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.fccDoorStatus)
  return fccdoorstatus_;
}

// repeated .fccboscom.InterlockStatus interlockStatus = 33;
inline int RoData::_internal_interlockstatus_size() const {
  return interlockstatus_.size();
}
inline int RoData::interlockstatus_size() const {
  return _internal_interlockstatus_size();
}
inline void RoData::clear_interlockstatus() {
  interlockstatus_.Clear();
}
inline ::fccboscom::InterlockStatus* RoData::mutable_interlockstatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.interlockStatus)
  return interlockstatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::InterlockStatus >*
RoData::mutable_interlockstatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.interlockStatus)
  return &interlockstatus_;
}
inline const ::fccboscom::InterlockStatus& RoData::_internal_interlockstatus(int index) const {
  return interlockstatus_.Get(index);
}
inline const ::fccboscom::InterlockStatus& RoData::interlockstatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.interlockStatus)
  return _internal_interlockstatus(index);
}
inline ::fccboscom::InterlockStatus* RoData::_internal_add_interlockstatus() {
  return interlockstatus_.Add();
}
inline ::fccboscom::InterlockStatus* RoData::add_interlockstatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.interlockStatus)
  return _internal_add_interlockstatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::InterlockStatus >&
RoData::interlockstatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.interlockStatus)
  return interlockstatus_;
}

// repeated .fccboscom.DeviceStatus deviceStatus = 34;
inline int RoData::_internal_devicestatus_size() const {
  return devicestatus_.size();
}
inline int RoData::devicestatus_size() const {
  return _internal_devicestatus_size();
}
inline void RoData::clear_devicestatus() {
  devicestatus_.Clear();
}
inline ::fccboscom::DeviceStatus* RoData::mutable_devicestatus(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.deviceStatus)
  return devicestatus_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeviceStatus >*
RoData::mutable_devicestatus() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.deviceStatus)
  return &devicestatus_;
}
inline const ::fccboscom::DeviceStatus& RoData::_internal_devicestatus(int index) const {
  return devicestatus_.Get(index);
}
inline const ::fccboscom::DeviceStatus& RoData::devicestatus(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.deviceStatus)
  return _internal_devicestatus(index);
}
inline ::fccboscom::DeviceStatus* RoData::_internal_add_devicestatus() {
  return devicestatus_.Add();
}
inline ::fccboscom::DeviceStatus* RoData::add_devicestatus() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.deviceStatus)
  return _internal_add_devicestatus();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DeviceStatus >&
RoData::devicestatus() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.deviceStatus)
  return devicestatus_;
}

// repeated .fccboscom.PromotionalMsg promotionalMsg = 35;
inline int RoData::_internal_promotionalmsg_size() const {
  return promotionalmsg_.size();
}
inline int RoData::promotionalmsg_size() const {
  return _internal_promotionalmsg_size();
}
inline void RoData::clear_promotionalmsg() {
  promotionalmsg_.Clear();
}
inline ::fccboscom::PromotionalMsg* RoData::mutable_promotionalmsg(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.RoData.promotionalMsg)
  return promotionalmsg_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PromotionalMsg >*
RoData::mutable_promotionalmsg() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.RoData.promotionalMsg)
  return &promotionalmsg_;
}
inline const ::fccboscom::PromotionalMsg& RoData::_internal_promotionalmsg(int index) const {
  return promotionalmsg_.Get(index);
}
inline const ::fccboscom::PromotionalMsg& RoData::promotionalmsg(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.RoData.promotionalMsg)
  return _internal_promotionalmsg(index);
}
inline ::fccboscom::PromotionalMsg* RoData::_internal_add_promotionalmsg() {
  return promotionalmsg_.Add();
}
inline ::fccboscom::PromotionalMsg* RoData::add_promotionalmsg() {
  // @@protoc_insertion_point(field_add:fccboscom.RoData.promotionalMsg)
  return _internal_add_promotionalmsg();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::PromotionalMsg >&
RoData::promotionalmsg() const {
  // @@protoc_insertion_point(field_list:fccboscom.RoData.promotionalMsg)
  return promotionalmsg_;
}

// -------------------------------------------------------------------

// DbConf

// required string tableName = 1;
inline bool DbConf::_internal_has_tablename() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DbConf::has_tablename() const {
  return _internal_has_tablename();
}
inline void DbConf::clear_tablename() {
  tablename_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DbConf::tablename() const {
  // @@protoc_insertion_point(field_get:fccboscom.DbConf.tableName)
  return _internal_tablename();
}
inline void DbConf::set_tablename(const std::string& value) {
  _internal_set_tablename(value);
  // @@protoc_insertion_point(field_set:fccboscom.DbConf.tableName)
}
inline std::string* DbConf::mutable_tablename() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DbConf.tableName)
  return _internal_mutable_tablename();
}
inline const std::string& DbConf::_internal_tablename() const {
  return tablename_.Get();
}
inline void DbConf::_internal_set_tablename(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  tablename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DbConf::set_tablename(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  tablename_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DbConf.tableName)
}
inline void DbConf::set_tablename(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  tablename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DbConf.tableName)
}
inline void DbConf::set_tablename(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  tablename_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DbConf.tableName)
}
inline std::string* DbConf::_internal_mutable_tablename() {
  _has_bits_[0] |= 0x00000001u;
  return tablename_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DbConf::release_tablename() {
  // @@protoc_insertion_point(field_release:fccboscom.DbConf.tableName)
  if (!_internal_has_tablename()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return tablename_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DbConf::set_allocated_tablename(std::string* tablename) {
  if (tablename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tablename_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), tablename,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DbConf.tableName)
}
inline std::string* DbConf::unsafe_arena_release_tablename() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DbConf.tableName)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return tablename_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DbConf::unsafe_arena_set_allocated_tablename(
    std::string* tablename) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (tablename != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  tablename_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      tablename, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DbConf.tableName)
}

// repeated .fccboscom.DataModule dataModule = 2;
inline int DbConf::_internal_datamodule_size() const {
  return datamodule_.size();
}
inline int DbConf::datamodule_size() const {
  return _internal_datamodule_size();
}
inline void DbConf::clear_datamodule() {
  datamodule_.Clear();
}
inline ::fccboscom::DataModule* DbConf::mutable_datamodule(int index) {
  // @@protoc_insertion_point(field_mutable:fccboscom.DbConf.dataModule)
  return datamodule_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DataModule >*
DbConf::mutable_datamodule() {
  // @@protoc_insertion_point(field_mutable_list:fccboscom.DbConf.dataModule)
  return &datamodule_;
}
inline const ::fccboscom::DataModule& DbConf::_internal_datamodule(int index) const {
  return datamodule_.Get(index);
}
inline const ::fccboscom::DataModule& DbConf::datamodule(int index) const {
  // @@protoc_insertion_point(field_get:fccboscom.DbConf.dataModule)
  return _internal_datamodule(index);
}
inline ::fccboscom::DataModule* DbConf::_internal_add_datamodule() {
  return datamodule_.Add();
}
inline ::fccboscom::DataModule* DbConf::add_datamodule() {
  // @@protoc_insertion_point(field_add:fccboscom.DbConf.dataModule)
  return _internal_add_datamodule();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::fccboscom::DataModule >&
DbConf::datamodule() const {
  // @@protoc_insertion_point(field_list:fccboscom.DbConf.dataModule)
  return datamodule_;
}

// required uint32 operation = 3;
inline bool DbConf::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DbConf::has_operation() const {
  return _internal_has_operation();
}
inline void DbConf::clear_operation() {
  operation_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DbConf::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DbConf::operation() const {
  // @@protoc_insertion_point(field_get:fccboscom.DbConf.operation)
  return _internal_operation();
}
inline void DbConf::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  operation_ = value;
}
inline void DbConf::set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:fccboscom.DbConf.operation)
}

// -------------------------------------------------------------------

// DataModule

// required string key = 1;
inline bool DataModule::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DataModule::has_key() const {
  return _internal_has_key();
}
inline void DataModule::clear_key() {
  key_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DataModule::key() const {
  // @@protoc_insertion_point(field_get:fccboscom.DataModule.key)
  return _internal_key();
}
inline void DataModule::set_key(const std::string& value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fccboscom.DataModule.key)
}
inline std::string* DataModule::mutable_key() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DataModule.key)
  return _internal_mutable_key();
}
inline const std::string& DataModule::_internal_key() const {
  return key_.Get();
}
inline void DataModule::_internal_set_key(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataModule::set_key(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DataModule.key)
}
inline void DataModule::set_key(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DataModule.key)
}
inline void DataModule::set_key(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  key_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DataModule.key)
}
inline std::string* DataModule::_internal_mutable_key() {
  _has_bits_[0] |= 0x00000001u;
  return key_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataModule::release_key() {
  // @@protoc_insertion_point(field_release:fccboscom.DataModule.key)
  if (!_internal_has_key()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return key_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataModule::set_allocated_key(std::string* key) {
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), key,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DataModule.key)
}
inline std::string* DataModule::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DataModule.key)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return key_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataModule::unsafe_arena_set_allocated_key(
    std::string* key) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (key != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  key_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      key, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DataModule.key)
}

// required string value = 2;
inline bool DataModule::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DataModule::has_value() const {
  return _internal_has_value();
}
inline void DataModule::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DataModule::value() const {
  // @@protoc_insertion_point(field_get:fccboscom.DataModule.value)
  return _internal_value();
}
inline void DataModule::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fccboscom.DataModule.value)
}
inline std::string* DataModule::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DataModule.value)
  return _internal_mutable_value();
}
inline const std::string& DataModule::_internal_value() const {
  return value_.Get();
}
inline void DataModule::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DataModule::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DataModule.value)
}
inline void DataModule::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DataModule.value)
}
inline void DataModule::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DataModule.value)
}
inline std::string* DataModule::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000002u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DataModule::release_value() {
  // @@protoc_insertion_point(field_release:fccboscom.DataModule.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DataModule::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DataModule.value)
}
inline std::string* DataModule::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DataModule.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DataModule::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DataModule.value)
}

// required uint32 dataType = 3;
inline bool DataModule::_internal_has_datatype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DataModule::has_datatype() const {
  return _internal_has_datatype();
}
inline void DataModule::clear_datatype() {
  datatype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataModule::_internal_datatype() const {
  return datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DataModule::datatype() const {
  // @@protoc_insertion_point(field_get:fccboscom.DataModule.dataType)
  return _internal_datatype();
}
inline void DataModule::_internal_set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  datatype_ = value;
}
inline void DataModule::set_datatype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_datatype(value);
  // @@protoc_insertion_point(field_set:fccboscom.DataModule.dataType)
}

// -------------------------------------------------------------------

// TankStatus

// required uint32 tankId = 1;
inline bool TankStatus::_internal_has_tankid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TankStatus::has_tankid() const {
  return _internal_has_tankid();
}
inline void TankStatus::clear_tankid() {
  tankid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::_internal_tankid() const {
  return tankid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::tankid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.tankId)
  return _internal_tankid();
}
inline void TankStatus::_internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tankid_ = value;
}
inline void TankStatus::set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.tankId)
}

// required uint32 tankUid = 2;
inline bool TankStatus::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TankStatus::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void TankStatus::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.tankUid)
  return _internal_tankuid();
}
inline void TankStatus::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tankuid_ = value;
}
inline void TankStatus::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.tankUid)
}

// required uint32 tankStatus = 3;
inline bool TankStatus::_internal_has_tankstatus() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TankStatus::has_tankstatus() const {
  return _internal_has_tankstatus();
}
inline void TankStatus::clear_tankstatus() {
  tankstatus_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::_internal_tankstatus() const {
  return tankstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::tankstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.tankStatus)
  return _internal_tankstatus();
}
inline void TankStatus::_internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tankstatus_ = value;
}
inline void TankStatus::set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.tankStatus)
}

// required float productLevel = 4;
inline bool TankStatus::_internal_has_productlevel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TankStatus::has_productlevel() const {
  return _internal_has_productlevel();
}
inline void TankStatus::clear_productlevel() {
  productlevel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TankStatus::_internal_productlevel() const {
  return productlevel_;
}
inline float TankStatus::productlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.productLevel)
  return _internal_productlevel();
}
inline void TankStatus::_internal_set_productlevel(float value) {
  _has_bits_[0] |= 0x00000008u;
  productlevel_ = value;
}
inline void TankStatus::set_productlevel(float value) {
  _internal_set_productlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.productLevel)
}

// required float productVolume = 5;
inline bool TankStatus::_internal_has_productvolume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TankStatus::has_productvolume() const {
  return _internal_has_productvolume();
}
inline void TankStatus::clear_productvolume() {
  productvolume_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TankStatus::_internal_productvolume() const {
  return productvolume_;
}
inline float TankStatus::productvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.productVolume)
  return _internal_productvolume();
}
inline void TankStatus::_internal_set_productvolume(float value) {
  _has_bits_[0] |= 0x00000010u;
  productvolume_ = value;
}
inline void TankStatus::set_productvolume(float value) {
  _internal_set_productvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.productVolume)
}

// required float waterLevel = 6;
inline bool TankStatus::_internal_has_waterlevel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TankStatus::has_waterlevel() const {
  return _internal_has_waterlevel();
}
inline void TankStatus::clear_waterlevel() {
  waterlevel_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TankStatus::_internal_waterlevel() const {
  return waterlevel_;
}
inline float TankStatus::waterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.waterLevel)
  return _internal_waterlevel();
}
inline void TankStatus::_internal_set_waterlevel(float value) {
  _has_bits_[0] |= 0x00000020u;
  waterlevel_ = value;
}
inline void TankStatus::set_waterlevel(float value) {
  _internal_set_waterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.waterLevel)
}

// required float waterVolume = 7;
inline bool TankStatus::_internal_has_watervolume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TankStatus::has_watervolume() const {
  return _internal_has_watervolume();
}
inline void TankStatus::clear_watervolume() {
  watervolume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TankStatus::_internal_watervolume() const {
  return watervolume_;
}
inline float TankStatus::watervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.waterVolume)
  return _internal_watervolume();
}
inline void TankStatus::_internal_set_watervolume(float value) {
  _has_bits_[0] |= 0x00000040u;
  watervolume_ = value;
}
inline void TankStatus::set_watervolume(float value) {
  _internal_set_watervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.waterVolume)
}

// required float temperature = 8;
inline bool TankStatus::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TankStatus::has_temperature() const {
  return _internal_has_temperature();
}
inline void TankStatus::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TankStatus::_internal_temperature() const {
  return temperature_;
}
inline float TankStatus::temperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.temperature)
  return _internal_temperature();
}
inline void TankStatus::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000080u;
  temperature_ = value;
}
inline void TankStatus::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.temperature)
}

// required double tcVolume = 9;
inline bool TankStatus::_internal_has_tcvolume() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TankStatus::has_tcvolume() const {
  return _internal_has_tcvolume();
}
inline void TankStatus::clear_tcvolume() {
  tcvolume_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double TankStatus::_internal_tcvolume() const {
  return tcvolume_;
}
inline double TankStatus::tcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.tcVolume)
  return _internal_tcvolume();
}
inline void TankStatus::_internal_set_tcvolume(double value) {
  _has_bits_[0] |= 0x00000100u;
  tcvolume_ = value;
}
inline void TankStatus::set_tcvolume(double value) {
  _internal_set_tcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.tcVolume)
}

// required float ullage = 10;
inline bool TankStatus::_internal_has_ullage() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TankStatus::has_ullage() const {
  return _internal_has_ullage();
}
inline void TankStatus::clear_ullage() {
  ullage_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TankStatus::_internal_ullage() const {
  return ullage_;
}
inline float TankStatus::ullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.ullage)
  return _internal_ullage();
}
inline void TankStatus::_internal_set_ullage(float value) {
  _has_bits_[0] |= 0x00000200u;
  ullage_ = value;
}
inline void TankStatus::set_ullage(float value) {
  _internal_set_ullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.ullage)
}

// optional float density = 11;
inline bool TankStatus::_internal_has_density() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TankStatus::has_density() const {
  return _internal_has_density();
}
inline void TankStatus::clear_density() {
  density_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TankStatus::_internal_density() const {
  return density_;
}
inline float TankStatus::density() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.density)
  return _internal_density();
}
inline void TankStatus::_internal_set_density(float value) {
  _has_bits_[0] |= 0x00000400u;
  density_ = value;
}
inline void TankStatus::set_density(float value) {
  _internal_set_density(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.density)
}

// optional float tcDensity = 12;
inline bool TankStatus::_internal_has_tcdensity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TankStatus::has_tcdensity() const {
  return _internal_has_tcdensity();
}
inline void TankStatus::clear_tcdensity() {
  tcdensity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float TankStatus::_internal_tcdensity() const {
  return tcdensity_;
}
inline float TankStatus::tcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.tcDensity)
  return _internal_tcdensity();
}
inline void TankStatus::_internal_set_tcdensity(float value) {
  _has_bits_[0] |= 0x00000800u;
  tcdensity_ = value;
}
inline void TankStatus::set_tcdensity(float value) {
  _internal_set_tcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.tcDensity)
}

// optional uint32 lockVal = 13;
inline bool TankStatus::_internal_has_lockval() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TankStatus::has_lockval() const {
  return _internal_has_lockval();
}
inline void TankStatus::clear_lockval() {
  lockval_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::_internal_lockval() const {
  return lockval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankStatus::lockval() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankStatus.lockVal)
  return _internal_lockval();
}
inline void TankStatus::_internal_set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  lockval_ = value;
}
inline void TankStatus::set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lockval(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankStatus.lockVal)
}

// -------------------------------------------------------------------

// PumpStatus

// required uint32 pumpId = 1;
inline bool PumpStatus::_internal_has_pumpid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PumpStatus::has_pumpid() const {
  return _internal_has_pumpid();
}
inline void PumpStatus::clear_pumpid() {
  pumpid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_pumpid() const {
  return pumpid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::pumpid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.pumpId)
  return _internal_pumpid();
}
inline void PumpStatus::_internal_set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  pumpid_ = value;
}
inline void PumpStatus::set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.pumpId)
}

// required uint32 pumpUid = 2;
inline bool PumpStatus::_internal_has_pumpuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PumpStatus::has_pumpuid() const {
  return _internal_has_pumpuid();
}
inline void PumpStatus::clear_pumpuid() {
  pumpuid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_pumpuid() const {
  return pumpuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::pumpuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.pumpUid)
  return _internal_pumpuid();
}
inline void PumpStatus::_internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pumpuid_ = value;
}
inline void PumpStatus::set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.pumpUid)
}

// required uint32 status = 3;
inline bool PumpStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PumpStatus::has_status() const {
  return _internal_has_status();
}
inline void PumpStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.status)
  return _internal_status();
}
inline void PumpStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void PumpStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.status)
}

// required uint32 nozzleId = 4;
inline bool PumpStatus::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PumpStatus::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void PumpStatus::clear_nozzleid() {
  nozzleid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.nozzleId)
  return _internal_nozzleid();
}
inline void PumpStatus::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  nozzleid_ = value;
}
inline void PumpStatus::set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.nozzleId)
}

// required float trxnVolume = 5;
inline bool PumpStatus::_internal_has_trxnvolume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PumpStatus::has_trxnvolume() const {
  return _internal_has_trxnvolume();
}
inline void PumpStatus::clear_trxnvolume() {
  trxnvolume_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PumpStatus::_internal_trxnvolume() const {
  return trxnvolume_;
}
inline float PumpStatus::trxnvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.trxnVolume)
  return _internal_trxnvolume();
}
inline void PumpStatus::_internal_set_trxnvolume(float value) {
  _has_bits_[0] |= 0x00000010u;
  trxnvolume_ = value;
}
inline void PumpStatus::set_trxnvolume(float value) {
  _internal_set_trxnvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.trxnVolume)
}

// required float trxnAmount = 6;
inline bool PumpStatus::_internal_has_trxnamount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PumpStatus::has_trxnamount() const {
  return _internal_has_trxnamount();
}
inline void PumpStatus::clear_trxnamount() {
  trxnamount_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PumpStatus::_internal_trxnamount() const {
  return trxnamount_;
}
inline float PumpStatus::trxnamount() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.trxnAmount)
  return _internal_trxnamount();
}
inline void PumpStatus::_internal_set_trxnamount(float value) {
  _has_bits_[0] |= 0x00000020u;
  trxnamount_ = value;
}
inline void PumpStatus::set_trxnamount(float value) {
  _internal_set_trxnamount(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.trxnAmount)
}

// required uint32 lockVal = 7;
inline bool PumpStatus::_internal_has_lockval() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PumpStatus::has_lockval() const {
  return _internal_has_lockval();
}
inline void PumpStatus::clear_lockval() {
  lockval_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_lockval() const {
  return lockval_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::lockval() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.lockVal)
  return _internal_lockval();
}
inline void PumpStatus::_internal_set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  lockval_ = value;
}
inline void PumpStatus::set_lockval(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lockval(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.lockVal)
}

// optional uint32 npndStatus = 8;
inline bool PumpStatus::_internal_has_npndstatus() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PumpStatus::has_npndstatus() const {
  return _internal_has_npndstatus();
}
inline void PumpStatus::clear_npndstatus() {
  npndstatus_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_npndstatus() const {
  return npndstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::npndstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.npndStatus)
  return _internal_npndstatus();
}
inline void PumpStatus::_internal_set_npndstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  npndstatus_ = value;
}
inline void PumpStatus::set_npndstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_npndstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.npndStatus)
}

// optional uint32 motorTimeout = 9;
inline bool PumpStatus::_internal_has_motortimeout() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PumpStatus::has_motortimeout() const {
  return _internal_has_motortimeout();
}
inline void PumpStatus::clear_motortimeout() {
  motortimeout_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_motortimeout() const {
  return motortimeout_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::motortimeout() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.motorTimeout)
  return _internal_motortimeout();
}
inline void PumpStatus::_internal_set_motortimeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  motortimeout_ = value;
}
inline void PumpStatus::set_motortimeout(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_motortimeout(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.motorTimeout)
}

// optional uint32 pumpType = 10;
inline bool PumpStatus::_internal_has_pumptype() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PumpStatus::has_pumptype() const {
  return _internal_has_pumptype();
}
inline void PumpStatus::clear_pumptype() {
  pumptype_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::_internal_pumptype() const {
  return pumptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpStatus::pumptype() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpStatus.pumpType)
  return _internal_pumptype();
}
inline void PumpStatus::_internal_set_pumptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  pumptype_ = value;
}
inline void PumpStatus::set_pumptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumptype(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpStatus.pumpType)
}

// -------------------------------------------------------------------

// UpsStatus

// required uint32 upsId = 1;
inline bool UpsStatus::_internal_has_upsid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool UpsStatus::has_upsid() const {
  return _internal_has_upsid();
}
inline void UpsStatus::clear_upsid() {
  upsid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::_internal_upsid() const {
  return upsid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::upsid() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.upsId)
  return _internal_upsid();
}
inline void UpsStatus::_internal_set_upsid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  upsid_ = value;
}
inline void UpsStatus::set_upsid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upsid(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.upsId)
}

// required uint32 upsUid = 2;
inline bool UpsStatus::_internal_has_upsuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool UpsStatus::has_upsuid() const {
  return _internal_has_upsuid();
}
inline void UpsStatus::clear_upsuid() {
  upsuid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::_internal_upsuid() const {
  return upsuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::upsuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.upsUid)
  return _internal_upsuid();
}
inline void UpsStatus::_internal_set_upsuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  upsuid_ = value;
}
inline void UpsStatus::set_upsuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_upsuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.upsUid)
}

// required float inputVtg = 3;
inline bool UpsStatus::_internal_has_inputvtg() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool UpsStatus::has_inputvtg() const {
  return _internal_has_inputvtg();
}
inline void UpsStatus::clear_inputvtg() {
  inputvtg_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float UpsStatus::_internal_inputvtg() const {
  return inputvtg_;
}
inline float UpsStatus::inputvtg() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.inputVtg)
  return _internal_inputvtg();
}
inline void UpsStatus::_internal_set_inputvtg(float value) {
  _has_bits_[0] |= 0x00000010u;
  inputvtg_ = value;
}
inline void UpsStatus::set_inputvtg(float value) {
  _internal_set_inputvtg(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.inputVtg)
}

// required float outputVtg = 4;
inline bool UpsStatus::_internal_has_outputvtg() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool UpsStatus::has_outputvtg() const {
  return _internal_has_outputvtg();
}
inline void UpsStatus::clear_outputvtg() {
  outputvtg_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float UpsStatus::_internal_outputvtg() const {
  return outputvtg_;
}
inline float UpsStatus::outputvtg() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.outputVtg)
  return _internal_outputvtg();
}
inline void UpsStatus::_internal_set_outputvtg(float value) {
  _has_bits_[0] |= 0x00000020u;
  outputvtg_ = value;
}
inline void UpsStatus::set_outputvtg(float value) {
  _internal_set_outputvtg(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.outputVtg)
}

// required float batteryVtg = 5;
inline bool UpsStatus::_internal_has_batteryvtg() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool UpsStatus::has_batteryvtg() const {
  return _internal_has_batteryvtg();
}
inline void UpsStatus::clear_batteryvtg() {
  batteryvtg_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float UpsStatus::_internal_batteryvtg() const {
  return batteryvtg_;
}
inline float UpsStatus::batteryvtg() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.batteryVtg)
  return _internal_batteryvtg();
}
inline void UpsStatus::_internal_set_batteryvtg(float value) {
  _has_bits_[0] |= 0x00000040u;
  batteryvtg_ = value;
}
inline void UpsStatus::set_batteryvtg(float value) {
  _internal_set_batteryvtg(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.batteryVtg)
}

// required float inputFreq = 6;
inline bool UpsStatus::_internal_has_inputfreq() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool UpsStatus::has_inputfreq() const {
  return _internal_has_inputfreq();
}
inline void UpsStatus::clear_inputfreq() {
  inputfreq_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float UpsStatus::_internal_inputfreq() const {
  return inputfreq_;
}
inline float UpsStatus::inputfreq() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.inputFreq)
  return _internal_inputfreq();
}
inline void UpsStatus::_internal_set_inputfreq(float value) {
  _has_bits_[0] |= 0x00000080u;
  inputfreq_ = value;
}
inline void UpsStatus::set_inputfreq(float value) {
  _internal_set_inputfreq(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.inputFreq)
}

// required float temperature = 7;
inline bool UpsStatus::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool UpsStatus::has_temperature() const {
  return _internal_has_temperature();
}
inline void UpsStatus::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float UpsStatus::_internal_temperature() const {
  return temperature_;
}
inline float UpsStatus::temperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.temperature)
  return _internal_temperature();
}
inline void UpsStatus::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000100u;
  temperature_ = value;
}
inline void UpsStatus::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.temperature)
}

// required string upsStatus = 8;
inline bool UpsStatus::_internal_has_upsstatus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool UpsStatus::has_upsstatus() const {
  return _internal_has_upsstatus();
}
inline void UpsStatus::clear_upsstatus() {
  upsstatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& UpsStatus::upsstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.upsStatus)
  return _internal_upsstatus();
}
inline void UpsStatus::set_upsstatus(const std::string& value) {
  _internal_set_upsstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.upsStatus)
}
inline std::string* UpsStatus::mutable_upsstatus() {
  // @@protoc_insertion_point(field_mutable:fccboscom.UpsStatus.upsStatus)
  return _internal_mutable_upsstatus();
}
inline const std::string& UpsStatus::_internal_upsstatus() const {
  return upsstatus_.Get();
}
inline void UpsStatus::_internal_set_upsstatus(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  upsstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpsStatus::set_upsstatus(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  upsstatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.UpsStatus.upsStatus)
}
inline void UpsStatus::set_upsstatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  upsstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.UpsStatus.upsStatus)
}
inline void UpsStatus::set_upsstatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  upsstatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.UpsStatus.upsStatus)
}
inline std::string* UpsStatus::_internal_mutable_upsstatus() {
  _has_bits_[0] |= 0x00000001u;
  return upsstatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpsStatus::release_upsstatus() {
  // @@protoc_insertion_point(field_release:fccboscom.UpsStatus.upsStatus)
  if (!_internal_has_upsstatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return upsstatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpsStatus::set_allocated_upsstatus(std::string* upsstatus) {
  if (upsstatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upsstatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), upsstatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.UpsStatus.upsStatus)
}
inline std::string* UpsStatus::unsafe_arena_release_upsstatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.UpsStatus.upsStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return upsstatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpsStatus::unsafe_arena_set_allocated_upsstatus(
    std::string* upsstatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (upsstatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  upsstatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      upsstatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.UpsStatus.upsStatus)
}

// optional float loadPercent = 9;
inline bool UpsStatus::_internal_has_loadpercent() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool UpsStatus::has_loadpercent() const {
  return _internal_has_loadpercent();
}
inline void UpsStatus::clear_loadpercent() {
  loadpercent_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float UpsStatus::_internal_loadpercent() const {
  return loadpercent_;
}
inline float UpsStatus::loadpercent() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.loadPercent)
  return _internal_loadpercent();
}
inline void UpsStatus::_internal_set_loadpercent(float value) {
  _has_bits_[0] |= 0x00000200u;
  loadpercent_ = value;
}
inline void UpsStatus::set_loadpercent(float value) {
  _internal_set_loadpercent(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.loadPercent)
}

// optional float batteryPercent = 10;
inline bool UpsStatus::_internal_has_batterypercent() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool UpsStatus::has_batterypercent() const {
  return _internal_has_batterypercent();
}
inline void UpsStatus::clear_batterypercent() {
  batterypercent_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float UpsStatus::_internal_batterypercent() const {
  return batterypercent_;
}
inline float UpsStatus::batterypercent() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.batteryPercent)
  return _internal_batterypercent();
}
inline void UpsStatus::_internal_set_batterypercent(float value) {
  _has_bits_[0] |= 0x00000400u;
  batterypercent_ = value;
}
inline void UpsStatus::set_batterypercent(float value) {
  _internal_set_batterypercent(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.batteryPercent)
}

// optional uint32 inventoryId = 11;
inline bool UpsStatus::_internal_has_inventoryid() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool UpsStatus::has_inventoryid() const {
  return _internal_has_inventoryid();
}
inline void UpsStatus::clear_inventoryid() {
  inventoryid_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::_internal_inventoryid() const {
  return inventoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 UpsStatus::inventoryid() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.inventoryId)
  return _internal_inventoryid();
}
inline void UpsStatus::_internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  inventoryid_ = value;
}
inline void UpsStatus::set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventoryid(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.inventoryId)
}

// optional string inventoryTime = 12;
inline bool UpsStatus::_internal_has_inventorytime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool UpsStatus::has_inventorytime() const {
  return _internal_has_inventorytime();
}
inline void UpsStatus::clear_inventorytime() {
  inventorytime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& UpsStatus::inventorytime() const {
  // @@protoc_insertion_point(field_get:fccboscom.UpsStatus.inventoryTime)
  return _internal_inventorytime();
}
inline void UpsStatus::set_inventorytime(const std::string& value) {
  _internal_set_inventorytime(value);
  // @@protoc_insertion_point(field_set:fccboscom.UpsStatus.inventoryTime)
}
inline std::string* UpsStatus::mutable_inventorytime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.UpsStatus.inventoryTime)
  return _internal_mutable_inventorytime();
}
inline const std::string& UpsStatus::_internal_inventorytime() const {
  return inventorytime_.Get();
}
inline void UpsStatus::_internal_set_inventorytime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void UpsStatus::set_inventorytime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  inventorytime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.UpsStatus.inventoryTime)
}
inline void UpsStatus::set_inventorytime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.UpsStatus.inventoryTime)
}
inline void UpsStatus::set_inventorytime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.UpsStatus.inventoryTime)
}
inline std::string* UpsStatus::_internal_mutable_inventorytime() {
  _has_bits_[0] |= 0x00000002u;
  return inventorytime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* UpsStatus::release_inventorytime() {
  // @@protoc_insertion_point(field_release:fccboscom.UpsStatus.inventoryTime)
  if (!_internal_has_inventorytime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return inventorytime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void UpsStatus::set_allocated_inventorytime(std::string* inventorytime) {
  if (inventorytime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inventorytime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventorytime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.UpsStatus.inventoryTime)
}
inline std::string* UpsStatus::unsafe_arena_release_inventorytime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.UpsStatus.inventoryTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return inventorytime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void UpsStatus::unsafe_arena_set_allocated_inventorytime(
    std::string* inventorytime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inventorytime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  inventorytime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inventorytime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.UpsStatus.inventoryTime)
}

// -------------------------------------------------------------------

// PumpTrxn

// required uint32 pumpId = 1;
inline bool PumpTrxn::_internal_has_pumpid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PumpTrxn::has_pumpid() const {
  return _internal_has_pumpid();
}
inline void PumpTrxn::clear_pumpid() {
  pumpid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_pumpid() const {
  return pumpid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::pumpid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.pumpId)
  return _internal_pumpid();
}
inline void PumpTrxn::_internal_set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  pumpid_ = value;
}
inline void PumpTrxn::set_pumpid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.pumpId)
}

// required uint32 pumpUid = 2;
inline bool PumpTrxn::_internal_has_pumpuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PumpTrxn::has_pumpuid() const {
  return _internal_has_pumpuid();
}
inline void PumpTrxn::clear_pumpuid() {
  pumpuid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_pumpuid() const {
  return pumpuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::pumpuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.pumpUid)
  return _internal_pumpuid();
}
inline void PumpTrxn::_internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  pumpuid_ = value;
}
inline void PumpTrxn::set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.pumpUid)
}

// required uint32 nozzleId = 3;
inline bool PumpTrxn::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PumpTrxn::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void PumpTrxn::clear_nozzleid() {
  nozzleid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.nozzleId)
  return _internal_nozzleid();
}
inline void PumpTrxn::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  nozzleid_ = value;
}
inline void PumpTrxn::set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.nozzleId)
}

// required uint32 nozzleUid = 4;
inline bool PumpTrxn::_internal_has_nozzleuid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PumpTrxn::has_nozzleuid() const {
  return _internal_has_nozzleuid();
}
inline void PumpTrxn::clear_nozzleuid() {
  nozzleuid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_nozzleuid() const {
  return nozzleuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::nozzleuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.nozzleUid)
  return _internal_nozzleuid();
}
inline void PumpTrxn::_internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nozzleuid_ = value;
}
inline void PumpTrxn::set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.nozzleUid)
}

// required float trxnVolume = 5;
inline bool PumpTrxn::_internal_has_trxnvolume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PumpTrxn::has_trxnvolume() const {
  return _internal_has_trxnvolume();
}
inline void PumpTrxn::clear_trxnvolume() {
  trxnvolume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float PumpTrxn::_internal_trxnvolume() const {
  return trxnvolume_;
}
inline float PumpTrxn::trxnvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.trxnVolume)
  return _internal_trxnvolume();
}
inline void PumpTrxn::_internal_set_trxnvolume(float value) {
  _has_bits_[0] |= 0x00000040u;
  trxnvolume_ = value;
}
inline void PumpTrxn::set_trxnvolume(float value) {
  _internal_set_trxnvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.trxnVolume)
}

// required float trxnAmount = 6;
inline bool PumpTrxn::_internal_has_trxnamount() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PumpTrxn::has_trxnamount() const {
  return _internal_has_trxnamount();
}
inline void PumpTrxn::clear_trxnamount() {
  trxnamount_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float PumpTrxn::_internal_trxnamount() const {
  return trxnamount_;
}
inline float PumpTrxn::trxnamount() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.trxnAmount)
  return _internal_trxnamount();
}
inline void PumpTrxn::_internal_set_trxnamount(float value) {
  _has_bits_[0] |= 0x00000080u;
  trxnamount_ = value;
}
inline void PumpTrxn::set_trxnamount(float value) {
  _internal_set_trxnamount(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.trxnAmount)
}

// required float unitRate = 7;
inline bool PumpTrxn::_internal_has_unitrate() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool PumpTrxn::has_unitrate() const {
  return _internal_has_unitrate();
}
inline void PumpTrxn::clear_unitrate() {
  unitrate_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float PumpTrxn::_internal_unitrate() const {
  return unitrate_;
}
inline float PumpTrxn::unitrate() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.unitRate)
  return _internal_unitrate();
}
inline void PumpTrxn::_internal_set_unitrate(float value) {
  _has_bits_[0] |= 0x00000200u;
  unitrate_ = value;
}
inline void PumpTrxn::set_unitrate(float value) {
  _internal_set_unitrate(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.unitRate)
}

// required double startVolumeTotalizer = 8;
inline bool PumpTrxn::_internal_has_startvolumetotalizer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool PumpTrxn::has_startvolumetotalizer() const {
  return _internal_has_startvolumetotalizer();
}
inline void PumpTrxn::clear_startvolumetotalizer() {
  startvolumetotalizer_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double PumpTrxn::_internal_startvolumetotalizer() const {
  return startvolumetotalizer_;
}
inline double PumpTrxn::startvolumetotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.startVolumeTotalizer)
  return _internal_startvolumetotalizer();
}
inline void PumpTrxn::_internal_set_startvolumetotalizer(double value) {
  _has_bits_[0] |= 0x00000100u;
  startvolumetotalizer_ = value;
}
inline void PumpTrxn::set_startvolumetotalizer(double value) {
  _internal_set_startvolumetotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.startVolumeTotalizer)
}

// required double endVolumeTotalizer = 9;
inline bool PumpTrxn::_internal_has_endvolumetotalizer() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool PumpTrxn::has_endvolumetotalizer() const {
  return _internal_has_endvolumetotalizer();
}
inline void PumpTrxn::clear_endvolumetotalizer() {
  endvolumetotalizer_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline double PumpTrxn::_internal_endvolumetotalizer() const {
  return endvolumetotalizer_;
}
inline double PumpTrxn::endvolumetotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.endVolumeTotalizer)
  return _internal_endvolumetotalizer();
}
inline void PumpTrxn::_internal_set_endvolumetotalizer(double value) {
  _has_bits_[0] |= 0x00000800u;
  endvolumetotalizer_ = value;
}
inline void PumpTrxn::set_endvolumetotalizer(double value) {
  _internal_set_endvolumetotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.endVolumeTotalizer)
}

// required uint32 presetType = 10;
inline bool PumpTrxn::_internal_has_presettype() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool PumpTrxn::has_presettype() const {
  return _internal_has_presettype();
}
inline void PumpTrxn::clear_presettype() {
  presettype_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_presettype() const {
  return presettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::presettype() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.presetType)
  return _internal_presettype();
}
inline void PumpTrxn::_internal_set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  presettype_ = value;
}
inline void PumpTrxn::set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_presettype(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.presetType)
}

// optional uint32 presetMode = 11;
inline bool PumpTrxn::_internal_has_presetmode() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool PumpTrxn::has_presetmode() const {
  return _internal_has_presetmode();
}
inline void PumpTrxn::clear_presetmode() {
  presetmode_ = 0u;
  _has_bits_[0] &= ~0x00001000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_presetmode() const {
  return presetmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::presetmode() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.presetMode)
  return _internal_presetmode();
}
inline void PumpTrxn::_internal_set_presetmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00001000u;
  presetmode_ = value;
}
inline void PumpTrxn::set_presetmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_presetmode(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.presetMode)
}

// optional float presetValue = 12;
inline bool PumpTrxn::_internal_has_presetvalue() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool PumpTrxn::has_presetvalue() const {
  return _internal_has_presetvalue();
}
inline void PumpTrxn::clear_presetvalue() {
  presetvalue_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float PumpTrxn::_internal_presetvalue() const {
  return presetvalue_;
}
inline float PumpTrxn::presetvalue() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.presetValue)
  return _internal_presetvalue();
}
inline void PumpTrxn::_internal_set_presetvalue(float value) {
  _has_bits_[0] |= 0x00002000u;
  presetvalue_ = value;
}
inline void PumpTrxn::set_presetvalue(float value) {
  _internal_set_presetvalue(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.presetValue)
}

// required uint32 trxnId = 13;
inline bool PumpTrxn::_internal_has_trxnid() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool PumpTrxn::has_trxnid() const {
  return _internal_has_trxnid();
}
inline void PumpTrxn::clear_trxnid() {
  trxnid_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_trxnid() const {
  return trxnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::trxnid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.trxnId)
  return _internal_trxnid();
}
inline void PumpTrxn::_internal_set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  trxnid_ = value;
}
inline void PumpTrxn::set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trxnid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.trxnId)
}

// required string trxnStartTime = 14;
inline bool PumpTrxn::_internal_has_trxnstarttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PumpTrxn::has_trxnstarttime() const {
  return _internal_has_trxnstarttime();
}
inline void PumpTrxn::clear_trxnstarttime() {
  trxnstarttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PumpTrxn::trxnstarttime() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.trxnStartTime)
  return _internal_trxnstarttime();
}
inline void PumpTrxn::set_trxnstarttime(const std::string& value) {
  _internal_set_trxnstarttime(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.trxnStartTime)
}
inline std::string* PumpTrxn::mutable_trxnstarttime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.PumpTrxn.trxnStartTime)
  return _internal_mutable_trxnstarttime();
}
inline const std::string& PumpTrxn::_internal_trxnstarttime() const {
  return trxnstarttime_.Get();
}
inline void PumpTrxn::_internal_set_trxnstarttime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  trxnstarttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PumpTrxn::set_trxnstarttime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  trxnstarttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.PumpTrxn.trxnStartTime)
}
inline void PumpTrxn::set_trxnstarttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  trxnstarttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.PumpTrxn.trxnStartTime)
}
inline void PumpTrxn::set_trxnstarttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  trxnstarttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.PumpTrxn.trxnStartTime)
}
inline std::string* PumpTrxn::_internal_mutable_trxnstarttime() {
  _has_bits_[0] |= 0x00000001u;
  return trxnstarttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PumpTrxn::release_trxnstarttime() {
  // @@protoc_insertion_point(field_release:fccboscom.PumpTrxn.trxnStartTime)
  if (!_internal_has_trxnstarttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return trxnstarttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PumpTrxn::set_allocated_trxnstarttime(std::string* trxnstarttime) {
  if (trxnstarttime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trxnstarttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trxnstarttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.PumpTrxn.trxnStartTime)
}
inline std::string* PumpTrxn::unsafe_arena_release_trxnstarttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.PumpTrxn.trxnStartTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return trxnstarttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PumpTrxn::unsafe_arena_set_allocated_trxnstarttime(
    std::string* trxnstarttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trxnstarttime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  trxnstarttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trxnstarttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.PumpTrxn.trxnStartTime)
}

// required string trxnEndTime = 15;
inline bool PumpTrxn::_internal_has_trxnendtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PumpTrxn::has_trxnendtime() const {
  return _internal_has_trxnendtime();
}
inline void PumpTrxn::clear_trxnendtime() {
  trxnendtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& PumpTrxn::trxnendtime() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.trxnEndTime)
  return _internal_trxnendtime();
}
inline void PumpTrxn::set_trxnendtime(const std::string& value) {
  _internal_set_trxnendtime(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.trxnEndTime)
}
inline std::string* PumpTrxn::mutable_trxnendtime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.PumpTrxn.trxnEndTime)
  return _internal_mutable_trxnendtime();
}
inline const std::string& PumpTrxn::_internal_trxnendtime() const {
  return trxnendtime_.Get();
}
inline void PumpTrxn::_internal_set_trxnendtime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  trxnendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PumpTrxn::set_trxnendtime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  trxnendtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.PumpTrxn.trxnEndTime)
}
inline void PumpTrxn::set_trxnendtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  trxnendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.PumpTrxn.trxnEndTime)
}
inline void PumpTrxn::set_trxnendtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  trxnendtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.PumpTrxn.trxnEndTime)
}
inline std::string* PumpTrxn::_internal_mutable_trxnendtime() {
  _has_bits_[0] |= 0x00000002u;
  return trxnendtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PumpTrxn::release_trxnendtime() {
  // @@protoc_insertion_point(field_release:fccboscom.PumpTrxn.trxnEndTime)
  if (!_internal_has_trxnendtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return trxnendtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PumpTrxn::set_allocated_trxnendtime(std::string* trxnendtime) {
  if (trxnendtime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trxnendtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), trxnendtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.PumpTrxn.trxnEndTime)
}
inline std::string* PumpTrxn::unsafe_arena_release_trxnendtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.PumpTrxn.trxnEndTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return trxnendtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PumpTrxn::unsafe_arena_set_allocated_trxnendtime(
    std::string* trxnendtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (trxnendtime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  trxnendtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      trxnendtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.PumpTrxn.trxnEndTime)
}

// required uint32 dayId = 16;
inline bool PumpTrxn::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool PumpTrxn::has_dayid() const {
  return _internal_has_dayid();
}
inline void PumpTrxn::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00008000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.dayId)
  return _internal_dayid();
}
inline void PumpTrxn::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00008000u;
  dayid_ = value;
}
inline void PumpTrxn::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.dayId)
}

// required uint32 gradeUid = 17;
inline bool PumpTrxn::_internal_has_gradeuid() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool PumpTrxn::has_gradeuid() const {
  return _internal_has_gradeuid();
}
inline void PumpTrxn::clear_gradeuid() {
  gradeuid_ = 0u;
  _has_bits_[0] &= ~0x00010000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_gradeuid() const {
  return gradeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::gradeuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.gradeUid)
  return _internal_gradeuid();
}
inline void PumpTrxn::_internal_set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00010000u;
  gradeuid_ = value;
}
inline void PumpTrxn::set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gradeuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.gradeUid)
}

// required uint32 pumpMode = 18;
inline bool PumpTrxn::_internal_has_pumpmode() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool PumpTrxn::has_pumpmode() const {
  return _internal_has_pumpmode();
}
inline void PumpTrxn::clear_pumpmode() {
  pumpmode_ = 0u;
  _has_bits_[0] &= ~0x00020000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_pumpmode() const {
  return pumpmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::pumpmode() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.pumpMode)
  return _internal_pumpmode();
}
inline void PumpTrxn::_internal_set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00020000u;
  pumpmode_ = value;
}
inline void PumpTrxn::set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpmode(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.pumpMode)
}

// required uint32 shiftId = 19;
inline bool PumpTrxn::_internal_has_shiftid() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool PumpTrxn::has_shiftid() const {
  return _internal_has_shiftid();
}
inline void PumpTrxn::clear_shiftid() {
  shiftid_ = 0u;
  _has_bits_[0] &= ~0x00040000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_shiftid() const {
  return shiftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::shiftid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.shiftId)
  return _internal_shiftid();
}
inline void PumpTrxn::_internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00040000u;
  shiftid_ = value;
}
inline void PumpTrxn::set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shiftid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.shiftId)
}

// required uint32 dealerShiftId = 20;
inline bool PumpTrxn::_internal_has_dealershiftid() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool PumpTrxn::has_dealershiftid() const {
  return _internal_has_dealershiftid();
}
inline void PumpTrxn::clear_dealershiftid() {
  dealershiftid_ = 0u;
  _has_bits_[0] &= ~0x00080000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_dealershiftid() const {
  return dealershiftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::dealershiftid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.dealerShiftId)
  return _internal_dealershiftid();
}
inline void PumpTrxn::_internal_set_dealershiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00080000u;
  dealershiftid_ = value;
}
inline void PumpTrxn::set_dealershiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dealershiftid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.dealerShiftId)
}

// required uint32 mopType = 21;
inline bool PumpTrxn::_internal_has_moptype() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool PumpTrxn::has_moptype() const {
  return _internal_has_moptype();
}
inline void PumpTrxn::clear_moptype() {
  moptype_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::_internal_moptype() const {
  return moptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpTrxn::moptype() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.mopType)
  return _internal_moptype();
}
inline void PumpTrxn::_internal_set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  moptype_ = value;
}
inline void PumpTrxn::set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_moptype(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.mopType)
}

// required double lastTrxnEndVolTotalizer = 22;
inline bool PumpTrxn::_internal_has_lasttrxnendvoltotalizer() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool PumpTrxn::has_lasttrxnendvoltotalizer() const {
  return _internal_has_lasttrxnendvoltotalizer();
}
inline void PumpTrxn::clear_lasttrxnendvoltotalizer() {
  lasttrxnendvoltotalizer_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double PumpTrxn::_internal_lasttrxnendvoltotalizer() const {
  return lasttrxnendvoltotalizer_;
}
inline double PumpTrxn::lasttrxnendvoltotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.lastTrxnEndVolTotalizer)
  return _internal_lasttrxnendvoltotalizer();
}
inline void PumpTrxn::_internal_set_lasttrxnendvoltotalizer(double value) {
  _has_bits_[0] |= 0x00100000u;
  lasttrxnendvoltotalizer_ = value;
}
inline void PumpTrxn::set_lasttrxnendvoltotalizer(double value) {
  _internal_set_lasttrxnendvoltotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.lastTrxnEndVolTotalizer)
}

// optional float discountRate = 23;
inline bool PumpTrxn::_internal_has_discountrate() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool PumpTrxn::has_discountrate() const {
  return _internal_has_discountrate();
}
inline void PumpTrxn::clear_discountrate() {
  discountrate_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline float PumpTrxn::_internal_discountrate() const {
  return discountrate_;
}
inline float PumpTrxn::discountrate() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.discountRate)
  return _internal_discountrate();
}
inline void PumpTrxn::_internal_set_discountrate(float value) {
  _has_bits_[0] |= 0x00400000u;
  discountrate_ = value;
}
inline void PumpTrxn::set_discountrate(float value) {
  _internal_set_discountrate(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.discountRate)
}

// optional float totalDiscount = 24;
inline bool PumpTrxn::_internal_has_totaldiscount() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool PumpTrxn::has_totaldiscount() const {
  return _internal_has_totaldiscount();
}
inline void PumpTrxn::clear_totaldiscount() {
  totaldiscount_ = 0;
  _has_bits_[0] &= ~0x01000000u;
}
inline float PumpTrxn::_internal_totaldiscount() const {
  return totaldiscount_;
}
inline float PumpTrxn::totaldiscount() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.totalDiscount)
  return _internal_totaldiscount();
}
inline void PumpTrxn::_internal_set_totaldiscount(float value) {
  _has_bits_[0] |= 0x01000000u;
  totaldiscount_ = value;
}
inline void PumpTrxn::set_totaldiscount(float value) {
  _internal_set_totaldiscount(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.totalDiscount)
}

// optional double presetId = 25;
inline bool PumpTrxn::_internal_has_presetid() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool PumpTrxn::has_presetid() const {
  return _internal_has_presetid();
}
inline void PumpTrxn::clear_presetid() {
  presetid_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline double PumpTrxn::_internal_presetid() const {
  return presetid_;
}
inline double PumpTrxn::presetid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpTrxn.presetId)
  return _internal_presetid();
}
inline void PumpTrxn::_internal_set_presetid(double value) {
  _has_bits_[0] |= 0x00800000u;
  presetid_ = value;
}
inline void PumpTrxn::set_presetid(double value) {
  _internal_set_presetid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpTrxn.presetId)
}

// -------------------------------------------------------------------

// TankInventory

// required uint32 tankId = 1;
inline bool TankInventory::_internal_has_tankid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TankInventory::has_tankid() const {
  return _internal_has_tankid();
}
inline void TankInventory::clear_tankid() {
  tankid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::_internal_tankid() const {
  return tankid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::tankid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.tankId)
  return _internal_tankid();
}
inline void TankInventory::_internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tankid_ = value;
}
inline void TankInventory::set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.tankId)
}

// required uint32 tankUid = 2;
inline bool TankInventory::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TankInventory::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void TankInventory::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.tankUid)
  return _internal_tankuid();
}
inline void TankInventory::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tankuid_ = value;
}
inline void TankInventory::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.tankUid)
}

// required float productLevel = 3;
inline bool TankInventory::_internal_has_productlevel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TankInventory::has_productlevel() const {
  return _internal_has_productlevel();
}
inline void TankInventory::clear_productlevel() {
  productlevel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float TankInventory::_internal_productlevel() const {
  return productlevel_;
}
inline float TankInventory::productlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.productLevel)
  return _internal_productlevel();
}
inline void TankInventory::_internal_set_productlevel(float value) {
  _has_bits_[0] |= 0x00000008u;
  productlevel_ = value;
}
inline void TankInventory::set_productlevel(float value) {
  _internal_set_productlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.productLevel)
}

// required float waterLevel = 4;
inline bool TankInventory::_internal_has_waterlevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TankInventory::has_waterlevel() const {
  return _internal_has_waterlevel();
}
inline void TankInventory::clear_waterlevel() {
  waterlevel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TankInventory::_internal_waterlevel() const {
  return waterlevel_;
}
inline float TankInventory::waterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.waterLevel)
  return _internal_waterlevel();
}
inline void TankInventory::_internal_set_waterlevel(float value) {
  _has_bits_[0] |= 0x00000010u;
  waterlevel_ = value;
}
inline void TankInventory::set_waterlevel(float value) {
  _internal_set_waterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.waterLevel)
}

// required float productVolume = 5;
inline bool TankInventory::_internal_has_productvolume() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TankInventory::has_productvolume() const {
  return _internal_has_productvolume();
}
inline void TankInventory::clear_productvolume() {
  productvolume_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TankInventory::_internal_productvolume() const {
  return productvolume_;
}
inline float TankInventory::productvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.productVolume)
  return _internal_productvolume();
}
inline void TankInventory::_internal_set_productvolume(float value) {
  _has_bits_[0] |= 0x00000020u;
  productvolume_ = value;
}
inline void TankInventory::set_productvolume(float value) {
  _internal_set_productvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.productVolume)
}

// required float waterVolume = 6;
inline bool TankInventory::_internal_has_watervolume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TankInventory::has_watervolume() const {
  return _internal_has_watervolume();
}
inline void TankInventory::clear_watervolume() {
  watervolume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TankInventory::_internal_watervolume() const {
  return watervolume_;
}
inline float TankInventory::watervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.waterVolume)
  return _internal_watervolume();
}
inline void TankInventory::_internal_set_watervolume(float value) {
  _has_bits_[0] |= 0x00000040u;
  watervolume_ = value;
}
inline void TankInventory::set_watervolume(float value) {
  _internal_set_watervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.waterVolume)
}

// required float tcVolume = 7;
inline bool TankInventory::_internal_has_tcvolume() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TankInventory::has_tcvolume() const {
  return _internal_has_tcvolume();
}
inline void TankInventory::clear_tcvolume() {
  tcvolume_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TankInventory::_internal_tcvolume() const {
  return tcvolume_;
}
inline float TankInventory::tcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.tcVolume)
  return _internal_tcvolume();
}
inline void TankInventory::_internal_set_tcvolume(float value) {
  _has_bits_[0] |= 0x00000080u;
  tcvolume_ = value;
}
inline void TankInventory::set_tcvolume(float value) {
  _internal_set_tcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.tcVolume)
}

// required float ullage = 8;
inline bool TankInventory::_internal_has_ullage() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TankInventory::has_ullage() const {
  return _internal_has_ullage();
}
inline void TankInventory::clear_ullage() {
  ullage_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TankInventory::_internal_ullage() const {
  return ullage_;
}
inline float TankInventory::ullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.ullage)
  return _internal_ullage();
}
inline void TankInventory::_internal_set_ullage(float value) {
  _has_bits_[0] |= 0x00000100u;
  ullage_ = value;
}
inline void TankInventory::set_ullage(float value) {
  _internal_set_ullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.ullage)
}

// required float temperature = 9;
inline bool TankInventory::_internal_has_temperature() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TankInventory::has_temperature() const {
  return _internal_has_temperature();
}
inline void TankInventory::clear_temperature() {
  temperature_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TankInventory::_internal_temperature() const {
  return temperature_;
}
inline float TankInventory::temperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.temperature)
  return _internal_temperature();
}
inline void TankInventory::_internal_set_temperature(float value) {
  _has_bits_[0] |= 0x00000200u;
  temperature_ = value;
}
inline void TankInventory::set_temperature(float value) {
  _internal_set_temperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.temperature)
}

// required uint32 tankStatus = 10;
inline bool TankInventory::_internal_has_tankstatus() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TankInventory::has_tankstatus() const {
  return _internal_has_tankstatus();
}
inline void TankInventory::clear_tankstatus() {
  tankstatus_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::_internal_tankstatus() const {
  return tankstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::tankstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.tankStatus)
  return _internal_tankstatus();
}
inline void TankInventory::_internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  tankstatus_ = value;
}
inline void TankInventory::set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.tankStatus)
}

// optional float productDensity = 11;
inline bool TankInventory::_internal_has_productdensity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TankInventory::has_productdensity() const {
  return _internal_has_productdensity();
}
inline void TankInventory::clear_productdensity() {
  productdensity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float TankInventory::_internal_productdensity() const {
  return productdensity_;
}
inline float TankInventory::productdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.productDensity)
  return _internal_productdensity();
}
inline void TankInventory::_internal_set_productdensity(float value) {
  _has_bits_[0] |= 0x00000800u;
  productdensity_ = value;
}
inline void TankInventory::set_productdensity(float value) {
  _internal_set_productdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.productDensity)
}

// optional float productTcDensity = 12;
inline bool TankInventory::_internal_has_producttcdensity() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TankInventory::has_producttcdensity() const {
  return _internal_has_producttcdensity();
}
inline void TankInventory::clear_producttcdensity() {
  producttcdensity_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TankInventory::_internal_producttcdensity() const {
  return producttcdensity_;
}
inline float TankInventory::producttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.productTcDensity)
  return _internal_producttcdensity();
}
inline void TankInventory::_internal_set_producttcdensity(float value) {
  _has_bits_[0] |= 0x00001000u;
  producttcdensity_ = value;
}
inline void TankInventory::set_producttcdensity(float value) {
  _internal_set_producttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.productTcDensity)
}

// required uint32 inventoryId = 13;
inline bool TankInventory::_internal_has_inventoryid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TankInventory::has_inventoryid() const {
  return _internal_has_inventoryid();
}
inline void TankInventory::clear_inventoryid() {
  inventoryid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::_internal_inventoryid() const {
  return inventoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::inventoryid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.inventoryId)
  return _internal_inventoryid();
}
inline void TankInventory::_internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  inventoryid_ = value;
}
inline void TankInventory::set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventoryid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.inventoryId)
}

// required string inventoryTime = 14;
inline bool TankInventory::_internal_has_inventorytime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TankInventory::has_inventorytime() const {
  return _internal_has_inventorytime();
}
inline void TankInventory::clear_inventorytime() {
  inventorytime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TankInventory::inventorytime() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.inventoryTime)
  return _internal_inventorytime();
}
inline void TankInventory::set_inventorytime(const std::string& value) {
  _internal_set_inventorytime(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.inventoryTime)
}
inline std::string* TankInventory::mutable_inventorytime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.TankInventory.inventoryTime)
  return _internal_mutable_inventorytime();
}
inline const std::string& TankInventory::_internal_inventorytime() const {
  return inventorytime_.Get();
}
inline void TankInventory::_internal_set_inventorytime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TankInventory::set_inventorytime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  inventorytime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.TankInventory.inventoryTime)
}
inline void TankInventory::set_inventorytime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.TankInventory.inventoryTime)
}
inline void TankInventory::set_inventorytime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  inventorytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.TankInventory.inventoryTime)
}
inline std::string* TankInventory::_internal_mutable_inventorytime() {
  _has_bits_[0] |= 0x00000001u;
  return inventorytime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TankInventory::release_inventorytime() {
  // @@protoc_insertion_point(field_release:fccboscom.TankInventory.inventoryTime)
  if (!_internal_has_inventorytime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return inventorytime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TankInventory::set_allocated_inventorytime(std::string* inventorytime) {
  if (inventorytime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inventorytime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), inventorytime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.TankInventory.inventoryTime)
}
inline std::string* TankInventory::unsafe_arena_release_inventorytime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.TankInventory.inventoryTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return inventorytime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TankInventory::unsafe_arena_set_allocated_inventorytime(
    std::string* inventorytime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (inventorytime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  inventorytime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      inventorytime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.TankInventory.inventoryTime)
}

// required uint32 inventoryMode = 15;
inline bool TankInventory::_internal_has_inventorymode() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TankInventory::has_inventorymode() const {
  return _internal_has_inventorymode();
}
inline void TankInventory::clear_inventorymode() {
  inventorymode_ = 0u;
  _has_bits_[0] &= ~0x00004000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::_internal_inventorymode() const {
  return inventorymode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankInventory::inventorymode() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankInventory.inventoryMode)
  return _internal_inventorymode();
}
inline void TankInventory::_internal_set_inventorymode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00004000u;
  inventorymode_ = value;
}
inline void TankInventory::set_inventorymode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventorymode(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankInventory.inventoryMode)
}

// -------------------------------------------------------------------

// TankDelivery

// required uint32 tankId = 1;
inline bool TankDelivery::_internal_has_tankid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TankDelivery::has_tankid() const {
  return _internal_has_tankid();
}
inline void TankDelivery::clear_tankid() {
  tankid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::_internal_tankid() const {
  return tankid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::tankid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.tankId)
  return _internal_tankid();
}
inline void TankDelivery::_internal_set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  tankid_ = value;
}
inline void TankDelivery::set_tankid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.tankId)
}

// required uint32 tankUid = 2;
inline bool TankDelivery::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TankDelivery::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void TankDelivery::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.tankUid)
  return _internal_tankuid();
}
inline void TankDelivery::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  tankuid_ = value;
}
inline void TankDelivery::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.tankUid)
}

// required string startTime = 3;
inline bool TankDelivery::_internal_has_starttime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TankDelivery::has_starttime() const {
  return _internal_has_starttime();
}
inline void TankDelivery::clear_starttime() {
  starttime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TankDelivery::starttime() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startTime)
  return _internal_starttime();
}
inline void TankDelivery::set_starttime(const std::string& value) {
  _internal_set_starttime(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startTime)
}
inline std::string* TankDelivery::mutable_starttime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.TankDelivery.startTime)
  return _internal_mutable_starttime();
}
inline const std::string& TankDelivery::_internal_starttime() const {
  return starttime_.Get();
}
inline void TankDelivery::_internal_set_starttime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TankDelivery::set_starttime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  starttime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.TankDelivery.startTime)
}
inline void TankDelivery::set_starttime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.TankDelivery.startTime)
}
inline void TankDelivery::set_starttime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  starttime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.TankDelivery.startTime)
}
inline std::string* TankDelivery::_internal_mutable_starttime() {
  _has_bits_[0] |= 0x00000001u;
  return starttime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TankDelivery::release_starttime() {
  // @@protoc_insertion_point(field_release:fccboscom.TankDelivery.startTime)
  if (!_internal_has_starttime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return starttime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TankDelivery::set_allocated_starttime(std::string* starttime) {
  if (starttime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  starttime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), starttime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.TankDelivery.startTime)
}
inline std::string* TankDelivery::unsafe_arena_release_starttime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.TankDelivery.startTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return starttime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TankDelivery::unsafe_arena_set_allocated_starttime(
    std::string* starttime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (starttime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  starttime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      starttime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.TankDelivery.startTime)
}

// required float startProductLevel = 4;
inline bool TankDelivery::_internal_has_startproductlevel() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TankDelivery::has_startproductlevel() const {
  return _internal_has_startproductlevel();
}
inline void TankDelivery::clear_startproductlevel() {
  startproductlevel_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float TankDelivery::_internal_startproductlevel() const {
  return startproductlevel_;
}
inline float TankDelivery::startproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startProductLevel)
  return _internal_startproductlevel();
}
inline void TankDelivery::_internal_set_startproductlevel(float value) {
  _has_bits_[0] |= 0x00000010u;
  startproductlevel_ = value;
}
inline void TankDelivery::set_startproductlevel(float value) {
  _internal_set_startproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startProductLevel)
}

// required float startWaterLevel = 5;
inline bool TankDelivery::_internal_has_startwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TankDelivery::has_startwaterlevel() const {
  return _internal_has_startwaterlevel();
}
inline void TankDelivery::clear_startwaterlevel() {
  startwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float TankDelivery::_internal_startwaterlevel() const {
  return startwaterlevel_;
}
inline float TankDelivery::startwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startWaterLevel)
  return _internal_startwaterlevel();
}
inline void TankDelivery::_internal_set_startwaterlevel(float value) {
  _has_bits_[0] |= 0x00000020u;
  startwaterlevel_ = value;
}
inline void TankDelivery::set_startwaterlevel(float value) {
  _internal_set_startwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startWaterLevel)
}

// required float startProductVolume = 6;
inline bool TankDelivery::_internal_has_startproductvolume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TankDelivery::has_startproductvolume() const {
  return _internal_has_startproductvolume();
}
inline void TankDelivery::clear_startproductvolume() {
  startproductvolume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float TankDelivery::_internal_startproductvolume() const {
  return startproductvolume_;
}
inline float TankDelivery::startproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startProductVolume)
  return _internal_startproductvolume();
}
inline void TankDelivery::_internal_set_startproductvolume(float value) {
  _has_bits_[0] |= 0x00000040u;
  startproductvolume_ = value;
}
inline void TankDelivery::set_startproductvolume(float value) {
  _internal_set_startproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startProductVolume)
}

// required float startWaterVolume = 7;
inline bool TankDelivery::_internal_has_startwatervolume() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TankDelivery::has_startwatervolume() const {
  return _internal_has_startwatervolume();
}
inline void TankDelivery::clear_startwatervolume() {
  startwatervolume_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float TankDelivery::_internal_startwatervolume() const {
  return startwatervolume_;
}
inline float TankDelivery::startwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startWaterVolume)
  return _internal_startwatervolume();
}
inline void TankDelivery::_internal_set_startwatervolume(float value) {
  _has_bits_[0] |= 0x00000080u;
  startwatervolume_ = value;
}
inline void TankDelivery::set_startwatervolume(float value) {
  _internal_set_startwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startWaterVolume)
}

// required float startProductTcVolume = 8;
inline bool TankDelivery::_internal_has_startproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TankDelivery::has_startproducttcvolume() const {
  return _internal_has_startproducttcvolume();
}
inline void TankDelivery::clear_startproducttcvolume() {
  startproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float TankDelivery::_internal_startproducttcvolume() const {
  return startproducttcvolume_;
}
inline float TankDelivery::startproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startProductTcVolume)
  return _internal_startproducttcvolume();
}
inline void TankDelivery::_internal_set_startproducttcvolume(float value) {
  _has_bits_[0] |= 0x00000100u;
  startproducttcvolume_ = value;
}
inline void TankDelivery::set_startproducttcvolume(float value) {
  _internal_set_startproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startProductTcVolume)
}

// required float startTemperature = 9;
inline bool TankDelivery::_internal_has_starttemperature() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TankDelivery::has_starttemperature() const {
  return _internal_has_starttemperature();
}
inline void TankDelivery::clear_starttemperature() {
  starttemperature_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float TankDelivery::_internal_starttemperature() const {
  return starttemperature_;
}
inline float TankDelivery::starttemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startTemperature)
  return _internal_starttemperature();
}
inline void TankDelivery::_internal_set_starttemperature(float value) {
  _has_bits_[0] |= 0x00000200u;
  starttemperature_ = value;
}
inline void TankDelivery::set_starttemperature(float value) {
  _internal_set_starttemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startTemperature)
}

// optional float startProductDensity = 10;
inline bool TankDelivery::_internal_has_startproductdensity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TankDelivery::has_startproductdensity() const {
  return _internal_has_startproductdensity();
}
inline void TankDelivery::clear_startproductdensity() {
  startproductdensity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float TankDelivery::_internal_startproductdensity() const {
  return startproductdensity_;
}
inline float TankDelivery::startproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startProductDensity)
  return _internal_startproductdensity();
}
inline void TankDelivery::_internal_set_startproductdensity(float value) {
  _has_bits_[0] |= 0x00000400u;
  startproductdensity_ = value;
}
inline void TankDelivery::set_startproductdensity(float value) {
  _internal_set_startproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startProductDensity)
}

// optional float startProductTcDensity = 11;
inline bool TankDelivery::_internal_has_startproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TankDelivery::has_startproducttcdensity() const {
  return _internal_has_startproducttcdensity();
}
inline void TankDelivery::clear_startproducttcdensity() {
  startproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float TankDelivery::_internal_startproducttcdensity() const {
  return startproducttcdensity_;
}
inline float TankDelivery::startproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.startProductTcDensity)
  return _internal_startproducttcdensity();
}
inline void TankDelivery::_internal_set_startproducttcdensity(float value) {
  _has_bits_[0] |= 0x00000800u;
  startproducttcdensity_ = value;
}
inline void TankDelivery::set_startproducttcdensity(float value) {
  _internal_set_startproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.startProductTcDensity)
}

// required string endTime = 12;
inline bool TankDelivery::_internal_has_endtime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TankDelivery::has_endtime() const {
  return _internal_has_endtime();
}
inline void TankDelivery::clear_endtime() {
  endtime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TankDelivery::endtime() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endTime)
  return _internal_endtime();
}
inline void TankDelivery::set_endtime(const std::string& value) {
  _internal_set_endtime(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endTime)
}
inline std::string* TankDelivery::mutable_endtime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.TankDelivery.endTime)
  return _internal_mutable_endtime();
}
inline const std::string& TankDelivery::_internal_endtime() const {
  return endtime_.Get();
}
inline void TankDelivery::_internal_set_endtime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TankDelivery::set_endtime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  endtime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.TankDelivery.endTime)
}
inline void TankDelivery::set_endtime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.TankDelivery.endTime)
}
inline void TankDelivery::set_endtime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  endtime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.TankDelivery.endTime)
}
inline std::string* TankDelivery::_internal_mutable_endtime() {
  _has_bits_[0] |= 0x00000002u;
  return endtime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TankDelivery::release_endtime() {
  // @@protoc_insertion_point(field_release:fccboscom.TankDelivery.endTime)
  if (!_internal_has_endtime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return endtime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TankDelivery::set_allocated_endtime(std::string* endtime) {
  if (endtime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  endtime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), endtime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.TankDelivery.endTime)
}
inline std::string* TankDelivery::unsafe_arena_release_endtime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.TankDelivery.endTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return endtime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TankDelivery::unsafe_arena_set_allocated_endtime(
    std::string* endtime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (endtime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  endtime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      endtime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.TankDelivery.endTime)
}

// required float endProductLevel = 13;
inline bool TankDelivery::_internal_has_endproductlevel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool TankDelivery::has_endproductlevel() const {
  return _internal_has_endproductlevel();
}
inline void TankDelivery::clear_endproductlevel() {
  endproductlevel_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float TankDelivery::_internal_endproductlevel() const {
  return endproductlevel_;
}
inline float TankDelivery::endproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endProductLevel)
  return _internal_endproductlevel();
}
inline void TankDelivery::_internal_set_endproductlevel(float value) {
  _has_bits_[0] |= 0x00001000u;
  endproductlevel_ = value;
}
inline void TankDelivery::set_endproductlevel(float value) {
  _internal_set_endproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endProductLevel)
}

// required float endWaterLevel = 14;
inline bool TankDelivery::_internal_has_endwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool TankDelivery::has_endwaterlevel() const {
  return _internal_has_endwaterlevel();
}
inline void TankDelivery::clear_endwaterlevel() {
  endwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float TankDelivery::_internal_endwaterlevel() const {
  return endwaterlevel_;
}
inline float TankDelivery::endwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endWaterLevel)
  return _internal_endwaterlevel();
}
inline void TankDelivery::_internal_set_endwaterlevel(float value) {
  _has_bits_[0] |= 0x00002000u;
  endwaterlevel_ = value;
}
inline void TankDelivery::set_endwaterlevel(float value) {
  _internal_set_endwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endWaterLevel)
}

// required float endProductVolume = 15;
inline bool TankDelivery::_internal_has_endproductvolume() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool TankDelivery::has_endproductvolume() const {
  return _internal_has_endproductvolume();
}
inline void TankDelivery::clear_endproductvolume() {
  endproductvolume_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float TankDelivery::_internal_endproductvolume() const {
  return endproductvolume_;
}
inline float TankDelivery::endproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endProductVolume)
  return _internal_endproductvolume();
}
inline void TankDelivery::_internal_set_endproductvolume(float value) {
  _has_bits_[0] |= 0x00004000u;
  endproductvolume_ = value;
}
inline void TankDelivery::set_endproductvolume(float value) {
  _internal_set_endproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endProductVolume)
}

// required float endWaterVolume = 16;
inline bool TankDelivery::_internal_has_endwatervolume() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool TankDelivery::has_endwatervolume() const {
  return _internal_has_endwatervolume();
}
inline void TankDelivery::clear_endwatervolume() {
  endwatervolume_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float TankDelivery::_internal_endwatervolume() const {
  return endwatervolume_;
}
inline float TankDelivery::endwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endWaterVolume)
  return _internal_endwatervolume();
}
inline void TankDelivery::_internal_set_endwatervolume(float value) {
  _has_bits_[0] |= 0x00008000u;
  endwatervolume_ = value;
}
inline void TankDelivery::set_endwatervolume(float value) {
  _internal_set_endwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endWaterVolume)
}

// required float endProductTcVolume = 17;
inline bool TankDelivery::_internal_has_endproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool TankDelivery::has_endproducttcvolume() const {
  return _internal_has_endproducttcvolume();
}
inline void TankDelivery::clear_endproducttcvolume() {
  endproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float TankDelivery::_internal_endproducttcvolume() const {
  return endproducttcvolume_;
}
inline float TankDelivery::endproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endProductTcVolume)
  return _internal_endproducttcvolume();
}
inline void TankDelivery::_internal_set_endproducttcvolume(float value) {
  _has_bits_[0] |= 0x00010000u;
  endproducttcvolume_ = value;
}
inline void TankDelivery::set_endproducttcvolume(float value) {
  _internal_set_endproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endProductTcVolume)
}

// required float endTemperature = 18;
inline bool TankDelivery::_internal_has_endtemperature() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool TankDelivery::has_endtemperature() const {
  return _internal_has_endtemperature();
}
inline void TankDelivery::clear_endtemperature() {
  endtemperature_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float TankDelivery::_internal_endtemperature() const {
  return endtemperature_;
}
inline float TankDelivery::endtemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endTemperature)
  return _internal_endtemperature();
}
inline void TankDelivery::_internal_set_endtemperature(float value) {
  _has_bits_[0] |= 0x00020000u;
  endtemperature_ = value;
}
inline void TankDelivery::set_endtemperature(float value) {
  _internal_set_endtemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endTemperature)
}

// optional float endProductDensity = 19;
inline bool TankDelivery::_internal_has_endproductdensity() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool TankDelivery::has_endproductdensity() const {
  return _internal_has_endproductdensity();
}
inline void TankDelivery::clear_endproductdensity() {
  endproductdensity_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float TankDelivery::_internal_endproductdensity() const {
  return endproductdensity_;
}
inline float TankDelivery::endproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endProductDensity)
  return _internal_endproductdensity();
}
inline void TankDelivery::_internal_set_endproductdensity(float value) {
  _has_bits_[0] |= 0x00040000u;
  endproductdensity_ = value;
}
inline void TankDelivery::set_endproductdensity(float value) {
  _internal_set_endproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endProductDensity)
}

// optional float endProductTcDensity = 20;
inline bool TankDelivery::_internal_has_endproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool TankDelivery::has_endproducttcdensity() const {
  return _internal_has_endproducttcdensity();
}
inline void TankDelivery::clear_endproducttcdensity() {
  endproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float TankDelivery::_internal_endproducttcdensity() const {
  return endproducttcdensity_;
}
inline float TankDelivery::endproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.endProductTcDensity)
  return _internal_endproducttcdensity();
}
inline void TankDelivery::_internal_set_endproducttcdensity(float value) {
  _has_bits_[0] |= 0x00080000u;
  endproducttcdensity_ = value;
}
inline void TankDelivery::set_endproducttcdensity(float value) {
  _internal_set_endproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.endProductTcDensity)
}

// required uint32 deliveryId = 21;
inline bool TankDelivery::_internal_has_deliveryid() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool TankDelivery::has_deliveryid() const {
  return _internal_has_deliveryid();
}
inline void TankDelivery::clear_deliveryid() {
  deliveryid_ = 0u;
  _has_bits_[0] &= ~0x00100000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::_internal_deliveryid() const {
  return deliveryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::deliveryid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.deliveryId)
  return _internal_deliveryid();
}
inline void TankDelivery::_internal_set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00100000u;
  deliveryid_ = value;
}
inline void TankDelivery::set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deliveryid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.deliveryId)
}

// required uint32 atgId = 22;
inline bool TankDelivery::_internal_has_atgid() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool TankDelivery::has_atgid() const {
  return _internal_has_atgid();
}
inline void TankDelivery::clear_atgid() {
  atgid_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::_internal_atgid() const {
  return atgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::atgid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.atgId)
  return _internal_atgid();
}
inline void TankDelivery::_internal_set_atgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  atgid_ = value;
}
inline void TankDelivery::set_atgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atgid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.atgId)
}

// required uint32 atgUid = 23;
inline bool TankDelivery::_internal_has_atguid() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool TankDelivery::has_atguid() const {
  return _internal_has_atguid();
}
inline void TankDelivery::clear_atguid() {
  atguid_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::_internal_atguid() const {
  return atguid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankDelivery::atguid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankDelivery.atgUid)
  return _internal_atguid();
}
inline void TankDelivery::_internal_set_atguid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  atguid_ = value;
}
inline void TankDelivery::set_atguid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_atguid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankDelivery.atgUid)
}

// -------------------------------------------------------------------

// DeliveryReceipt

// required uint32 tankUid = 1;
inline bool DeliveryReceipt::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void DeliveryReceipt::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.tankUid)
  return _internal_tankuid();
}
inline void DeliveryReceipt::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  tankuid_ = value;
}
inline void DeliveryReceipt::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.tankUid)
}

// required uint32 productUid = 2;
inline bool DeliveryReceipt::_internal_has_productuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_productuid() const {
  return _internal_has_productuid();
}
inline void DeliveryReceipt::clear_productuid() {
  productuid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::_internal_productuid() const {
  return productuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::productuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.productUid)
  return _internal_productuid();
}
inline void DeliveryReceipt::_internal_set_productuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  productuid_ = value;
}
inline void DeliveryReceipt::set_productuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_productuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.productUid)
}

// required string supplyPoint = 3;
inline bool DeliveryReceipt::_internal_has_supplypoint() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_supplypoint() const {
  return _internal_has_supplypoint();
}
inline void DeliveryReceipt::clear_supplypoint() {
  supplypoint_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeliveryReceipt::supplypoint() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.supplyPoint)
  return _internal_supplypoint();
}
inline void DeliveryReceipt::set_supplypoint(const std::string& value) {
  _internal_set_supplypoint(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.supplyPoint)
}
inline std::string* DeliveryReceipt::mutable_supplypoint() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeliveryReceipt.supplyPoint)
  return _internal_mutable_supplypoint();
}
inline const std::string& DeliveryReceipt::_internal_supplypoint() const {
  return supplypoint_.Get();
}
inline void DeliveryReceipt::_internal_set_supplypoint(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  supplypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeliveryReceipt::set_supplypoint(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  supplypoint_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeliveryReceipt.supplyPoint)
}
inline void DeliveryReceipt::set_supplypoint(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  supplypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeliveryReceipt.supplyPoint)
}
inline void DeliveryReceipt::set_supplypoint(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  supplypoint_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeliveryReceipt.supplyPoint)
}
inline std::string* DeliveryReceipt::_internal_mutable_supplypoint() {
  _has_bits_[0] |= 0x00000001u;
  return supplypoint_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeliveryReceipt::release_supplypoint() {
  // @@protoc_insertion_point(field_release:fccboscom.DeliveryReceipt.supplyPoint)
  if (!_internal_has_supplypoint()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return supplypoint_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryReceipt::set_allocated_supplypoint(std::string* supplypoint) {
  if (supplypoint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  supplypoint_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), supplypoint,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeliveryReceipt.supplyPoint)
}
inline std::string* DeliveryReceipt::unsafe_arena_release_supplypoint() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeliveryReceipt.supplyPoint)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return supplypoint_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeliveryReceipt::unsafe_arena_set_allocated_supplypoint(
    std::string* supplypoint) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (supplypoint != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  supplypoint_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      supplypoint, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeliveryReceipt.supplyPoint)
}

// required string invoiceNo = 4;
inline bool DeliveryReceipt::_internal_has_invoiceno() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_invoiceno() const {
  return _internal_has_invoiceno();
}
inline void DeliveryReceipt::clear_invoiceno() {
  invoiceno_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DeliveryReceipt::invoiceno() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.invoiceNo)
  return _internal_invoiceno();
}
inline void DeliveryReceipt::set_invoiceno(const std::string& value) {
  _internal_set_invoiceno(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.invoiceNo)
}
inline std::string* DeliveryReceipt::mutable_invoiceno() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeliveryReceipt.invoiceNo)
  return _internal_mutable_invoiceno();
}
inline const std::string& DeliveryReceipt::_internal_invoiceno() const {
  return invoiceno_.Get();
}
inline void DeliveryReceipt::_internal_set_invoiceno(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  invoiceno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeliveryReceipt::set_invoiceno(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  invoiceno_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeliveryReceipt.invoiceNo)
}
inline void DeliveryReceipt::set_invoiceno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  invoiceno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeliveryReceipt.invoiceNo)
}
inline void DeliveryReceipt::set_invoiceno(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  invoiceno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeliveryReceipt.invoiceNo)
}
inline std::string* DeliveryReceipt::_internal_mutable_invoiceno() {
  _has_bits_[0] |= 0x00000002u;
  return invoiceno_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeliveryReceipt::release_invoiceno() {
  // @@protoc_insertion_point(field_release:fccboscom.DeliveryReceipt.invoiceNo)
  if (!_internal_has_invoiceno()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return invoiceno_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryReceipt::set_allocated_invoiceno(std::string* invoiceno) {
  if (invoiceno != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invoiceno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invoiceno,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeliveryReceipt.invoiceNo)
}
inline std::string* DeliveryReceipt::unsafe_arena_release_invoiceno() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeliveryReceipt.invoiceNo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return invoiceno_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeliveryReceipt::unsafe_arena_set_allocated_invoiceno(
    std::string* invoiceno) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invoiceno != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  invoiceno_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invoiceno, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeliveryReceipt.invoiceNo)
}

// required string invoiceDateTime = 5;
inline bool DeliveryReceipt::_internal_has_invoicedatetime() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_invoicedatetime() const {
  return _internal_has_invoicedatetime();
}
inline void DeliveryReceipt::clear_invoicedatetime() {
  invoicedatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DeliveryReceipt::invoicedatetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.invoiceDateTime)
  return _internal_invoicedatetime();
}
inline void DeliveryReceipt::set_invoicedatetime(const std::string& value) {
  _internal_set_invoicedatetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.invoiceDateTime)
}
inline std::string* DeliveryReceipt::mutable_invoicedatetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeliveryReceipt.invoiceDateTime)
  return _internal_mutable_invoicedatetime();
}
inline const std::string& DeliveryReceipt::_internal_invoicedatetime() const {
  return invoicedatetime_.Get();
}
inline void DeliveryReceipt::_internal_set_invoicedatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  invoicedatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeliveryReceipt::set_invoicedatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  invoicedatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeliveryReceipt.invoiceDateTime)
}
inline void DeliveryReceipt::set_invoicedatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  invoicedatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeliveryReceipt.invoiceDateTime)
}
inline void DeliveryReceipt::set_invoicedatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  invoicedatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeliveryReceipt.invoiceDateTime)
}
inline std::string* DeliveryReceipt::_internal_mutable_invoicedatetime() {
  _has_bits_[0] |= 0x00000004u;
  return invoicedatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeliveryReceipt::release_invoicedatetime() {
  // @@protoc_insertion_point(field_release:fccboscom.DeliveryReceipt.invoiceDateTime)
  if (!_internal_has_invoicedatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return invoicedatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryReceipt::set_allocated_invoicedatetime(std::string* invoicedatetime) {
  if (invoicedatetime != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  invoicedatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), invoicedatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeliveryReceipt.invoiceDateTime)
}
inline std::string* DeliveryReceipt::unsafe_arena_release_invoicedatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeliveryReceipt.invoiceDateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return invoicedatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeliveryReceipt::unsafe_arena_set_allocated_invoicedatetime(
    std::string* invoicedatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (invoicedatetime != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  invoicedatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      invoicedatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeliveryReceipt.invoiceDateTime)
}

// required float invoiceQuantity = 6;
inline bool DeliveryReceipt::_internal_has_invoicequantity() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_invoicequantity() const {
  return _internal_has_invoicequantity();
}
inline void DeliveryReceipt::clear_invoicequantity() {
  invoicequantity_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float DeliveryReceipt::_internal_invoicequantity() const {
  return invoicequantity_;
}
inline float DeliveryReceipt::invoicequantity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.invoiceQuantity)
  return _internal_invoicequantity();
}
inline void DeliveryReceipt::_internal_set_invoicequantity(float value) {
  _has_bits_[0] |= 0x00000080u;
  invoicequantity_ = value;
}
inline void DeliveryReceipt::set_invoicequantity(float value) {
  _internal_set_invoicequantity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.invoiceQuantity)
}

// required float invoiceAmount = 7;
inline bool DeliveryReceipt::_internal_has_invoiceamount() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_invoiceamount() const {
  return _internal_has_invoiceamount();
}
inline void DeliveryReceipt::clear_invoiceamount() {
  invoiceamount_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float DeliveryReceipt::_internal_invoiceamount() const {
  return invoiceamount_;
}
inline float DeliveryReceipt::invoiceamount() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.invoiceAmount)
  return _internal_invoiceamount();
}
inline void DeliveryReceipt::_internal_set_invoiceamount(float value) {
  _has_bits_[0] |= 0x00000100u;
  invoiceamount_ = value;
}
inline void DeliveryReceipt::set_invoiceamount(float value) {
  _internal_set_invoiceamount(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.invoiceAmount)
}

// required string truckNo = 8;
inline bool DeliveryReceipt::_internal_has_truckno() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_truckno() const {
  return _internal_has_truckno();
}
inline void DeliveryReceipt::clear_truckno() {
  truckno_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DeliveryReceipt::truckno() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.truckNo)
  return _internal_truckno();
}
inline void DeliveryReceipt::set_truckno(const std::string& value) {
  _internal_set_truckno(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.truckNo)
}
inline std::string* DeliveryReceipt::mutable_truckno() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeliveryReceipt.truckNo)
  return _internal_mutable_truckno();
}
inline const std::string& DeliveryReceipt::_internal_truckno() const {
  return truckno_.Get();
}
inline void DeliveryReceipt::_internal_set_truckno(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  truckno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeliveryReceipt::set_truckno(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  truckno_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeliveryReceipt.truckNo)
}
inline void DeliveryReceipt::set_truckno(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  truckno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeliveryReceipt.truckNo)
}
inline void DeliveryReceipt::set_truckno(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  truckno_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeliveryReceipt.truckNo)
}
inline std::string* DeliveryReceipt::_internal_mutable_truckno() {
  _has_bits_[0] |= 0x00000008u;
  return truckno_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeliveryReceipt::release_truckno() {
  // @@protoc_insertion_point(field_release:fccboscom.DeliveryReceipt.truckNo)
  if (!_internal_has_truckno()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return truckno_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryReceipt::set_allocated_truckno(std::string* truckno) {
  if (truckno != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  truckno_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), truckno,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeliveryReceipt.truckNo)
}
inline std::string* DeliveryReceipt::unsafe_arena_release_truckno() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeliveryReceipt.truckNo)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return truckno_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeliveryReceipt::unsafe_arena_set_allocated_truckno(
    std::string* truckno) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (truckno != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  truckno_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      truckno, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeliveryReceipt.truckNo)
}

// required uint32 compartmentNo = 9;
inline bool DeliveryReceipt::_internal_has_compartmentno() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_compartmentno() const {
  return _internal_has_compartmentno();
}
inline void DeliveryReceipt::clear_compartmentno() {
  compartmentno_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::_internal_compartmentno() const {
  return compartmentno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::compartmentno() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.compartmentNo)
  return _internal_compartmentno();
}
inline void DeliveryReceipt::_internal_set_compartmentno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  compartmentno_ = value;
}
inline void DeliveryReceipt::set_compartmentno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_compartmentno(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.compartmentNo)
}

// required float observedDensity = 10;
inline bool DeliveryReceipt::_internal_has_observeddensity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_observeddensity() const {
  return _internal_has_observeddensity();
}
inline void DeliveryReceipt::clear_observeddensity() {
  observeddensity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float DeliveryReceipt::_internal_observeddensity() const {
  return observeddensity_;
}
inline float DeliveryReceipt::observeddensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.observedDensity)
  return _internal_observeddensity();
}
inline void DeliveryReceipt::_internal_set_observeddensity(float value) {
  _has_bits_[0] |= 0x00000400u;
  observeddensity_ = value;
}
inline void DeliveryReceipt::set_observeddensity(float value) {
  _internal_set_observeddensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.observedDensity)
}

// required float invoiceDensity = 11;
inline bool DeliveryReceipt::_internal_has_invoicedensity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_invoicedensity() const {
  return _internal_has_invoicedensity();
}
inline void DeliveryReceipt::clear_invoicedensity() {
  invoicedensity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float DeliveryReceipt::_internal_invoicedensity() const {
  return invoicedensity_;
}
inline float DeliveryReceipt::invoicedensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.invoiceDensity)
  return _internal_invoicedensity();
}
inline void DeliveryReceipt::_internal_set_invoicedensity(float value) {
  _has_bits_[0] |= 0x00000800u;
  invoicedensity_ = value;
}
inline void DeliveryReceipt::set_invoicedensity(float value) {
  _internal_set_invoicedensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.invoiceDensity)
}

// required float observedTemperature = 12;
inline bool DeliveryReceipt::_internal_has_observedtemperature() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_observedtemperature() const {
  return _internal_has_observedtemperature();
}
inline void DeliveryReceipt::clear_observedtemperature() {
  observedtemperature_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float DeliveryReceipt::_internal_observedtemperature() const {
  return observedtemperature_;
}
inline float DeliveryReceipt::observedtemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.observedTemperature)
  return _internal_observedtemperature();
}
inline void DeliveryReceipt::_internal_set_observedtemperature(float value) {
  _has_bits_[0] |= 0x00001000u;
  observedtemperature_ = value;
}
inline void DeliveryReceipt::set_observedtemperature(float value) {
  _internal_set_observedtemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.observedTemperature)
}

// required string dataEntryTime = 13;
inline bool DeliveryReceipt::_internal_has_dataentrytime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_dataentrytime() const {
  return _internal_has_dataentrytime();
}
inline void DeliveryReceipt::clear_dataentrytime() {
  dataentrytime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DeliveryReceipt::dataentrytime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.dataEntryTime)
  return _internal_dataentrytime();
}
inline void DeliveryReceipt::set_dataentrytime(const std::string& value) {
  _internal_set_dataentrytime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.dataEntryTime)
}
inline std::string* DeliveryReceipt::mutable_dataentrytime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeliveryReceipt.dataEntryTime)
  return _internal_mutable_dataentrytime();
}
inline const std::string& DeliveryReceipt::_internal_dataentrytime() const {
  return dataentrytime_.Get();
}
inline void DeliveryReceipt::_internal_set_dataentrytime(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  dataentrytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeliveryReceipt::set_dataentrytime(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  dataentrytime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeliveryReceipt.dataEntryTime)
}
inline void DeliveryReceipt::set_dataentrytime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  dataentrytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeliveryReceipt.dataEntryTime)
}
inline void DeliveryReceipt::set_dataentrytime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  dataentrytime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeliveryReceipt.dataEntryTime)
}
inline std::string* DeliveryReceipt::_internal_mutable_dataentrytime() {
  _has_bits_[0] |= 0x00000010u;
  return dataentrytime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeliveryReceipt::release_dataentrytime() {
  // @@protoc_insertion_point(field_release:fccboscom.DeliveryReceipt.dataEntryTime)
  if (!_internal_has_dataentrytime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return dataentrytime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeliveryReceipt::set_allocated_dataentrytime(std::string* dataentrytime) {
  if (dataentrytime != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dataentrytime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), dataentrytime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeliveryReceipt.dataEntryTime)
}
inline std::string* DeliveryReceipt::unsafe_arena_release_dataentrytime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeliveryReceipt.dataEntryTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return dataentrytime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeliveryReceipt::unsafe_arena_set_allocated_dataentrytime(
    std::string* dataentrytime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (dataentrytime != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  dataentrytime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      dataentrytime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeliveryReceipt.dataEntryTime)
}

// required uint32 deliveryId = 14;
inline bool DeliveryReceipt::_internal_has_deliveryid() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DeliveryReceipt::has_deliveryid() const {
  return _internal_has_deliveryid();
}
inline void DeliveryReceipt::clear_deliveryid() {
  deliveryid_ = 0u;
  _has_bits_[0] &= ~0x00002000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::_internal_deliveryid() const {
  return deliveryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeliveryReceipt::deliveryid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeliveryReceipt.deliveryId)
  return _internal_deliveryid();
}
inline void DeliveryReceipt::_internal_set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00002000u;
  deliveryid_ = value;
}
inline void DeliveryReceipt::set_deliveryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deliveryid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeliveryReceipt.deliveryId)
}

// -------------------------------------------------------------------

// AlarmDetails

// required uint32 alarmId = 1;
inline bool AlarmDetails::_internal_has_alarmid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool AlarmDetails::has_alarmid() const {
  return _internal_has_alarmid();
}
inline void AlarmDetails::clear_alarmid() {
  alarmid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_alarmid() const {
  return alarmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::alarmid() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.alarmId)
  return _internal_alarmid();
}
inline void AlarmDetails::_internal_set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  alarmid_ = value;
}
inline void AlarmDetails::set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmid(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.alarmId)
}

// required uint32 alarmSequenceId = 2;
inline bool AlarmDetails::_internal_has_alarmsequenceid() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool AlarmDetails::has_alarmsequenceid() const {
  return _internal_has_alarmsequenceid();
}
inline void AlarmDetails::clear_alarmsequenceid() {
  alarmsequenceid_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_alarmsequenceid() const {
  return alarmsequenceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::alarmsequenceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.alarmSequenceId)
  return _internal_alarmsequenceid();
}
inline void AlarmDetails::_internal_set_alarmsequenceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  alarmsequenceid_ = value;
}
inline void AlarmDetails::set_alarmsequenceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmsequenceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.alarmSequenceId)
}

// required uint32 alarmTrxnCode = 3;
inline bool AlarmDetails::_internal_has_alarmtrxncode() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool AlarmDetails::has_alarmtrxncode() const {
  return _internal_has_alarmtrxncode();
}
inline void AlarmDetails::clear_alarmtrxncode() {
  alarmtrxncode_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_alarmtrxncode() const {
  return alarmtrxncode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::alarmtrxncode() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.alarmTrxnCode)
  return _internal_alarmtrxncode();
}
inline void AlarmDetails::_internal_set_alarmtrxncode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  alarmtrxncode_ = value;
}
inline void AlarmDetails::set_alarmtrxncode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmtrxncode(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.alarmTrxnCode)
}

// required uint32 deviceId = 4;
inline bool AlarmDetails::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool AlarmDetails::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void AlarmDetails::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.deviceId)
  return _internal_deviceid();
}
inline void AlarmDetails::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  deviceid_ = value;
}
inline void AlarmDetails::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.deviceId)
}

// optional uint32 nozzleId = 5;
inline bool AlarmDetails::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool AlarmDetails::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void AlarmDetails::clear_nozzleid() {
  nozzleid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.nozzleId)
  return _internal_nozzleid();
}
inline void AlarmDetails::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  nozzleid_ = value;
}
inline void AlarmDetails::set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.nozzleId)
}

// required string dateTime = 6;
inline bool AlarmDetails::_internal_has_datetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmDetails::has_datetime() const {
  return _internal_has_datetime();
}
inline void AlarmDetails::clear_datetime() {
  datetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlarmDetails::datetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.dateTime)
  return _internal_datetime();
}
inline void AlarmDetails::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.dateTime)
}
inline std::string* AlarmDetails::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.dateTime)
  return _internal_mutable_datetime();
}
inline const std::string& AlarmDetails::_internal_datetime() const {
  return datetime_.Get();
}
inline void AlarmDetails::_internal_set_datetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_datetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.dateTime)
}
inline void AlarmDetails::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.dateTime)
}
inline void AlarmDetails::set_datetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.dateTime)
}
inline std::string* AlarmDetails::_internal_mutable_datetime() {
  _has_bits_[0] |= 0x00000001u;
  return datetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_datetime() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.dateTime)
  if (!_internal_has_datetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.dateTime)
}
inline std::string* AlarmDetails::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.dateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_datetime(
    std::string* datetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.dateTime)
}

// required uint32 alarmState = 7;
inline bool AlarmDetails::_internal_has_alarmstate() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool AlarmDetails::has_alarmstate() const {
  return _internal_has_alarmstate();
}
inline void AlarmDetails::clear_alarmstate() {
  alarmstate_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::_internal_alarmstate() const {
  return alarmstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmDetails::alarmstate() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.alarmState)
  return _internal_alarmstate();
}
inline void AlarmDetails::_internal_set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  alarmstate_ = value;
}
inline void AlarmDetails::set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmstate(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.alarmState)
}

// optional string param1 = 8;
inline bool AlarmDetails::_internal_has_param1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlarmDetails::has_param1() const {
  return _internal_has_param1();
}
inline void AlarmDetails::clear_param1() {
  param1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlarmDetails::param1() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.param1)
  return _internal_param1();
}
inline void AlarmDetails::set_param1(const std::string& value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.param1)
}
inline std::string* AlarmDetails::mutable_param1() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.param1)
  return _internal_mutable_param1();
}
inline const std::string& AlarmDetails::_internal_param1() const {
  return param1_.Get();
}
inline void AlarmDetails::_internal_set_param1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_param1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.param1)
}
inline void AlarmDetails::set_param1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.param1)
}
inline void AlarmDetails::set_param1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.param1)
}
inline std::string* AlarmDetails::_internal_mutable_param1() {
  _has_bits_[0] |= 0x00000002u;
  return param1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_param1() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.param1)
  if (!_internal_has_param1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return param1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_param1(std::string* param1) {
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.param1)
}
inline std::string* AlarmDetails::unsafe_arena_release_param1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.param1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return param1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_param1(
    std::string* param1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.param1)
}

// optional string param2 = 9;
inline bool AlarmDetails::_internal_has_param2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmDetails::has_param2() const {
  return _internal_has_param2();
}
inline void AlarmDetails::clear_param2() {
  param2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& AlarmDetails::param2() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.param2)
  return _internal_param2();
}
inline void AlarmDetails::set_param2(const std::string& value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.param2)
}
inline std::string* AlarmDetails::mutable_param2() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.param2)
  return _internal_mutable_param2();
}
inline const std::string& AlarmDetails::_internal_param2() const {
  return param2_.Get();
}
inline void AlarmDetails::_internal_set_param2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_param2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  param2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.param2)
}
inline void AlarmDetails::set_param2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.param2)
}
inline void AlarmDetails::set_param2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.param2)
}
inline std::string* AlarmDetails::_internal_mutable_param2() {
  _has_bits_[0] |= 0x00000004u;
  return param2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_param2() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.param2)
  if (!_internal_has_param2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return param2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_param2(std::string* param2) {
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.param2)
}
inline std::string* AlarmDetails::unsafe_arena_release_param2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.param2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return param2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_param2(
    std::string* param2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.param2)
}

// optional string param3 = 10;
inline bool AlarmDetails::_internal_has_param3() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool AlarmDetails::has_param3() const {
  return _internal_has_param3();
}
inline void AlarmDetails::clear_param3() {
  param3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& AlarmDetails::param3() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.param3)
  return _internal_param3();
}
inline void AlarmDetails::set_param3(const std::string& value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.param3)
}
inline std::string* AlarmDetails::mutable_param3() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.param3)
  return _internal_mutable_param3();
}
inline const std::string& AlarmDetails::_internal_param3() const {
  return param3_.Get();
}
inline void AlarmDetails::_internal_set_param3(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_param3(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  param3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.param3)
}
inline void AlarmDetails::set_param3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.param3)
}
inline void AlarmDetails::set_param3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.param3)
}
inline std::string* AlarmDetails::_internal_mutable_param3() {
  _has_bits_[0] |= 0x00000008u;
  return param3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_param3() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.param3)
  if (!_internal_has_param3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return param3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_param3(std::string* param3) {
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.param3)
}
inline std::string* AlarmDetails::unsafe_arena_release_param3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.param3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return param3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_param3(
    std::string* param3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.param3)
}

// optional string param4 = 11;
inline bool AlarmDetails::_internal_has_param4() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool AlarmDetails::has_param4() const {
  return _internal_has_param4();
}
inline void AlarmDetails::clear_param4() {
  param4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& AlarmDetails::param4() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.param4)
  return _internal_param4();
}
inline void AlarmDetails::set_param4(const std::string& value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.param4)
}
inline std::string* AlarmDetails::mutable_param4() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.param4)
  return _internal_mutable_param4();
}
inline const std::string& AlarmDetails::_internal_param4() const {
  return param4_.Get();
}
inline void AlarmDetails::_internal_set_param4(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_param4(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  param4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.param4)
}
inline void AlarmDetails::set_param4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.param4)
}
inline void AlarmDetails::set_param4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.param4)
}
inline std::string* AlarmDetails::_internal_mutable_param4() {
  _has_bits_[0] |= 0x00000010u;
  return param4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_param4() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.param4)
  if (!_internal_has_param4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return param4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_param4(std::string* param4) {
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  param4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.param4)
}
inline std::string* AlarmDetails::unsafe_arena_release_param4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.param4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return param4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_param4(
    std::string* param4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  param4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.param4)
}

// optional string param5 = 12;
inline bool AlarmDetails::_internal_has_param5() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool AlarmDetails::has_param5() const {
  return _internal_has_param5();
}
inline void AlarmDetails::clear_param5() {
  param5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& AlarmDetails::param5() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmDetails.param5)
  return _internal_param5();
}
inline void AlarmDetails::set_param5(const std::string& value) {
  _internal_set_param5(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmDetails.param5)
}
inline std::string* AlarmDetails::mutable_param5() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmDetails.param5)
  return _internal_mutable_param5();
}
inline const std::string& AlarmDetails::_internal_param5() const {
  return param5_.Get();
}
inline void AlarmDetails::_internal_set_param5(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmDetails::set_param5(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  param5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmDetails.param5)
}
inline void AlarmDetails::set_param5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmDetails.param5)
}
inline void AlarmDetails::set_param5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmDetails.param5)
}
inline std::string* AlarmDetails::_internal_mutable_param5() {
  _has_bits_[0] |= 0x00000020u;
  return param5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmDetails::release_param5() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmDetails.param5)
  if (!_internal_has_param5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return param5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmDetails::set_allocated_param5(std::string* param5) {
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  param5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmDetails.param5)
}
inline std::string* AlarmDetails::unsafe_arena_release_param5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmDetails.param5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return param5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmDetails::unsafe_arena_set_allocated_param5(
    std::string* param5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  param5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmDetails.param5)
}

// -------------------------------------------------------------------

// DayEndDetails

// required uint32 dayId = 1;
inline bool DayEndDetails::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DayEndDetails::has_dayid() const {
  return _internal_has_dayid();
}
inline void DayEndDetails::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndDetails::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndDetails::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndDetails.dayId)
  return _internal_dayid();
}
inline void DayEndDetails::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  dayid_ = value;
}
inline void DayEndDetails::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndDetails.dayId)
}

// optional string openTime = 2;
inline bool DayEndDetails::_internal_has_opentime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DayEndDetails::has_opentime() const {
  return _internal_has_opentime();
}
inline void DayEndDetails::clear_opentime() {
  opentime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DayEndDetails::opentime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndDetails.openTime)
  return _internal_opentime();
}
inline void DayEndDetails::set_opentime(const std::string& value) {
  _internal_set_opentime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndDetails.openTime)
}
inline std::string* DayEndDetails::mutable_opentime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DayEndDetails.openTime)
  return _internal_mutable_opentime();
}
inline const std::string& DayEndDetails::_internal_opentime() const {
  return opentime_.Get();
}
inline void DayEndDetails::_internal_set_opentime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DayEndDetails::set_opentime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DayEndDetails.openTime)
}
inline void DayEndDetails::set_opentime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DayEndDetails.openTime)
}
inline void DayEndDetails::set_opentime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DayEndDetails.openTime)
}
inline std::string* DayEndDetails::_internal_mutable_opentime() {
  _has_bits_[0] |= 0x00000001u;
  return opentime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DayEndDetails::release_opentime() {
  // @@protoc_insertion_point(field_release:fccboscom.DayEndDetails.openTime)
  if (!_internal_has_opentime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opentime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DayEndDetails::set_allocated_opentime(std::string* opentime) {
  if (opentime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opentime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opentime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DayEndDetails.openTime)
}
inline std::string* DayEndDetails::unsafe_arena_release_opentime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DayEndDetails.openTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return opentime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DayEndDetails::unsafe_arena_set_allocated_opentime(
    std::string* opentime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (opentime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opentime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      opentime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DayEndDetails.openTime)
}

// optional string closeTime = 3;
inline bool DayEndDetails::_internal_has_closetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DayEndDetails::has_closetime() const {
  return _internal_has_closetime();
}
inline void DayEndDetails::clear_closetime() {
  closetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DayEndDetails::closetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndDetails.closeTime)
  return _internal_closetime();
}
inline void DayEndDetails::set_closetime(const std::string& value) {
  _internal_set_closetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndDetails.closeTime)
}
inline std::string* DayEndDetails::mutable_closetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DayEndDetails.closeTime)
  return _internal_mutable_closetime();
}
inline const std::string& DayEndDetails::_internal_closetime() const {
  return closetime_.Get();
}
inline void DayEndDetails::_internal_set_closetime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DayEndDetails::set_closetime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DayEndDetails.closeTime)
}
inline void DayEndDetails::set_closetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DayEndDetails.closeTime)
}
inline void DayEndDetails::set_closetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DayEndDetails.closeTime)
}
inline std::string* DayEndDetails::_internal_mutable_closetime() {
  _has_bits_[0] |= 0x00000002u;
  return closetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DayEndDetails::release_closetime() {
  // @@protoc_insertion_point(field_release:fccboscom.DayEndDetails.closeTime)
  if (!_internal_has_closetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return closetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DayEndDetails::set_allocated_closetime(std::string* closetime) {
  if (closetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  closetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DayEndDetails.closeTime)
}
inline std::string* DayEndDetails::unsafe_arena_release_closetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DayEndDetails.closeTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return closetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DayEndDetails::unsafe_arena_set_allocated_closetime(
    std::string* closetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (closetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  closetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      closetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DayEndDetails.closeTime)
}

// required uint32 status = 4;
inline bool DayEndDetails::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DayEndDetails::has_status() const {
  return _internal_has_status();
}
inline void DayEndDetails::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndDetails::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndDetails::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndDetails.status)
  return _internal_status();
}
inline void DayEndDetails::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void DayEndDetails::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndDetails.status)
}

// -------------------------------------------------------------------

// DayEndTotalizer

// required uint32 dayId = 1;
inline bool DayEndTotalizer::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_dayid() const {
  return _internal_has_dayid();
}
inline void DayEndTotalizer::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.dayId)
  return _internal_dayid();
}
inline void DayEndTotalizer::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dayid_ = value;
}
inline void DayEndTotalizer::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.dayId)
}

// required uint32 nozzleUid = 2;
inline bool DayEndTotalizer::_internal_has_nozzleuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_nozzleuid() const {
  return _internal_has_nozzleuid();
}
inline void DayEndTotalizer::clear_nozzleuid() {
  nozzleuid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::_internal_nozzleuid() const {
  return nozzleuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::nozzleuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.nozzleUid)
  return _internal_nozzleuid();
}
inline void DayEndTotalizer::_internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  nozzleuid_ = value;
}
inline void DayEndTotalizer::set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.nozzleUid)
}

// required double startTotalizer = 3;
inline bool DayEndTotalizer::_internal_has_starttotalizer() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_starttotalizer() const {
  return _internal_has_starttotalizer();
}
inline void DayEndTotalizer::clear_starttotalizer() {
  starttotalizer_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline double DayEndTotalizer::_internal_starttotalizer() const {
  return starttotalizer_;
}
inline double DayEndTotalizer::starttotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.startTotalizer)
  return _internal_starttotalizer();
}
inline void DayEndTotalizer::_internal_set_starttotalizer(double value) {
  _has_bits_[0] |= 0x00000004u;
  starttotalizer_ = value;
}
inline void DayEndTotalizer::set_starttotalizer(double value) {
  _internal_set_starttotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.startTotalizer)
}

// optional double endTotalizer = 4;
inline bool DayEndTotalizer::_internal_has_endtotalizer() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_endtotalizer() const {
  return _internal_has_endtotalizer();
}
inline void DayEndTotalizer::clear_endtotalizer() {
  endtotalizer_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline double DayEndTotalizer::_internal_endtotalizer() const {
  return endtotalizer_;
}
inline double DayEndTotalizer::endtotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.endTotalizer)
  return _internal_endtotalizer();
}
inline void DayEndTotalizer::_internal_set_endtotalizer(double value) {
  _has_bits_[0] |= 0x00000008u;
  endtotalizer_ = value;
}
inline void DayEndTotalizer::set_endtotalizer(double value) {
  _internal_set_endtotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.endTotalizer)
}

// optional double totalSaleVolume = 5;
inline bool DayEndTotalizer::_internal_has_totalsalevolume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_totalsalevolume() const {
  return _internal_has_totalsalevolume();
}
inline void DayEndTotalizer::clear_totalsalevolume() {
  totalsalevolume_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline double DayEndTotalizer::_internal_totalsalevolume() const {
  return totalsalevolume_;
}
inline double DayEndTotalizer::totalsalevolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.totalSaleVolume)
  return _internal_totalsalevolume();
}
inline void DayEndTotalizer::_internal_set_totalsalevolume(double value) {
  _has_bits_[0] |= 0x00000010u;
  totalsalevolume_ = value;
}
inline void DayEndTotalizer::set_totalsalevolume(double value) {
  _internal_set_totalsalevolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.totalSaleVolume)
}

// required uint32 recordId = 6;
inline bool DayEndTotalizer::_internal_has_recordid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_recordid() const {
  return _internal_has_recordid();
}
inline void DayEndTotalizer::clear_recordid() {
  recordid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::_internal_recordid() const {
  return recordid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::recordid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.recordId)
  return _internal_recordid();
}
inline void DayEndTotalizer::_internal_set_recordid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  recordid_ = value;
}
inline void DayEndTotalizer::set_recordid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recordid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.recordId)
}

// required uint32 status = 7;
inline bool DayEndTotalizer::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DayEndTotalizer::has_status() const {
  return _internal_has_status();
}
inline void DayEndTotalizer::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndTotalizer::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndTotalizer.status)
  return _internal_status();
}
inline void DayEndTotalizer::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  status_ = value;
}
inline void DayEndTotalizer::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndTotalizer.status)
}

// -------------------------------------------------------------------

// DayEndInventory

// required uint32 dayId = 1;
inline bool DayEndInventory::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DayEndInventory::has_dayid() const {
  return _internal_has_dayid();
}
inline void DayEndInventory::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.dayId)
  return _internal_dayid();
}
inline void DayEndInventory::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  dayid_ = value;
}
inline void DayEndInventory::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.dayId)
}

// required uint32 tankUid = 2;
inline bool DayEndInventory::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DayEndInventory::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void DayEndInventory::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.tankUid)
  return _internal_tankuid();
}
inline void DayEndInventory::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  tankuid_ = value;
}
inline void DayEndInventory::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.tankUid)
}

// required float startProductLevel = 3;
inline bool DayEndInventory::_internal_has_startproductlevel() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DayEndInventory::has_startproductlevel() const {
  return _internal_has_startproductlevel();
}
inline void DayEndInventory::clear_startproductlevel() {
  startproductlevel_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline float DayEndInventory::_internal_startproductlevel() const {
  return startproductlevel_;
}
inline float DayEndInventory::startproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startProductLevel)
  return _internal_startproductlevel();
}
inline void DayEndInventory::_internal_set_startproductlevel(float value) {
  _has_bits_[0] |= 0x00000004u;
  startproductlevel_ = value;
}
inline void DayEndInventory::set_startproductlevel(float value) {
  _internal_set_startproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startProductLevel)
}

// required float startWaterLevel = 4;
inline bool DayEndInventory::_internal_has_startwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DayEndInventory::has_startwaterlevel() const {
  return _internal_has_startwaterlevel();
}
inline void DayEndInventory::clear_startwaterlevel() {
  startwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline float DayEndInventory::_internal_startwaterlevel() const {
  return startwaterlevel_;
}
inline float DayEndInventory::startwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startWaterLevel)
  return _internal_startwaterlevel();
}
inline void DayEndInventory::_internal_set_startwaterlevel(float value) {
  _has_bits_[0] |= 0x00000008u;
  startwaterlevel_ = value;
}
inline void DayEndInventory::set_startwaterlevel(float value) {
  _internal_set_startwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startWaterLevel)
}

// required float startProductVolume = 5;
inline bool DayEndInventory::_internal_has_startproductvolume() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DayEndInventory::has_startproductvolume() const {
  return _internal_has_startproductvolume();
}
inline void DayEndInventory::clear_startproductvolume() {
  startproductvolume_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float DayEndInventory::_internal_startproductvolume() const {
  return startproductvolume_;
}
inline float DayEndInventory::startproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startProductVolume)
  return _internal_startproductvolume();
}
inline void DayEndInventory::_internal_set_startproductvolume(float value) {
  _has_bits_[0] |= 0x00000010u;
  startproductvolume_ = value;
}
inline void DayEndInventory::set_startproductvolume(float value) {
  _internal_set_startproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startProductVolume)
}

// required float startWaterVolume = 6;
inline bool DayEndInventory::_internal_has_startwatervolume() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DayEndInventory::has_startwatervolume() const {
  return _internal_has_startwatervolume();
}
inline void DayEndInventory::clear_startwatervolume() {
  startwatervolume_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float DayEndInventory::_internal_startwatervolume() const {
  return startwatervolume_;
}
inline float DayEndInventory::startwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startWaterVolume)
  return _internal_startwatervolume();
}
inline void DayEndInventory::_internal_set_startwatervolume(float value) {
  _has_bits_[0] |= 0x00000020u;
  startwatervolume_ = value;
}
inline void DayEndInventory::set_startwatervolume(float value) {
  _internal_set_startwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startWaterVolume)
}

// required float startProductTcVolume = 7;
inline bool DayEndInventory::_internal_has_startproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DayEndInventory::has_startproducttcvolume() const {
  return _internal_has_startproducttcvolume();
}
inline void DayEndInventory::clear_startproducttcvolume() {
  startproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float DayEndInventory::_internal_startproducttcvolume() const {
  return startproducttcvolume_;
}
inline float DayEndInventory::startproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startProductTcVolume)
  return _internal_startproducttcvolume();
}
inline void DayEndInventory::_internal_set_startproducttcvolume(float value) {
  _has_bits_[0] |= 0x00000040u;
  startproducttcvolume_ = value;
}
inline void DayEndInventory::set_startproducttcvolume(float value) {
  _internal_set_startproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startProductTcVolume)
}

// required float startTemperature = 8;
inline bool DayEndInventory::_internal_has_starttemperature() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DayEndInventory::has_starttemperature() const {
  return _internal_has_starttemperature();
}
inline void DayEndInventory::clear_starttemperature() {
  starttemperature_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float DayEndInventory::_internal_starttemperature() const {
  return starttemperature_;
}
inline float DayEndInventory::starttemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startTemperature)
  return _internal_starttemperature();
}
inline void DayEndInventory::_internal_set_starttemperature(float value) {
  _has_bits_[0] |= 0x00000080u;
  starttemperature_ = value;
}
inline void DayEndInventory::set_starttemperature(float value) {
  _internal_set_starttemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startTemperature)
}

// optional float startProductDensity = 9;
inline bool DayEndInventory::_internal_has_startproductdensity() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DayEndInventory::has_startproductdensity() const {
  return _internal_has_startproductdensity();
}
inline void DayEndInventory::clear_startproductdensity() {
  startproductdensity_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float DayEndInventory::_internal_startproductdensity() const {
  return startproductdensity_;
}
inline float DayEndInventory::startproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startProductDensity)
  return _internal_startproductdensity();
}
inline void DayEndInventory::_internal_set_startproductdensity(float value) {
  _has_bits_[0] |= 0x00000100u;
  startproductdensity_ = value;
}
inline void DayEndInventory::set_startproductdensity(float value) {
  _internal_set_startproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startProductDensity)
}

// optional float startProductTcDensity = 10;
inline bool DayEndInventory::_internal_has_startproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DayEndInventory::has_startproducttcdensity() const {
  return _internal_has_startproducttcdensity();
}
inline void DayEndInventory::clear_startproducttcdensity() {
  startproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float DayEndInventory::_internal_startproducttcdensity() const {
  return startproducttcdensity_;
}
inline float DayEndInventory::startproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startProductTcDensity)
  return _internal_startproducttcdensity();
}
inline void DayEndInventory::_internal_set_startproducttcdensity(float value) {
  _has_bits_[0] |= 0x00000200u;
  startproducttcdensity_ = value;
}
inline void DayEndInventory::set_startproducttcdensity(float value) {
  _internal_set_startproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startProductTcDensity)
}

// required float startUllage = 11;
inline bool DayEndInventory::_internal_has_startullage() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DayEndInventory::has_startullage() const {
  return _internal_has_startullage();
}
inline void DayEndInventory::clear_startullage() {
  startullage_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float DayEndInventory::_internal_startullage() const {
  return startullage_;
}
inline float DayEndInventory::startullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.startUllage)
  return _internal_startullage();
}
inline void DayEndInventory::_internal_set_startullage(float value) {
  _has_bits_[0] |= 0x00000400u;
  startullage_ = value;
}
inline void DayEndInventory::set_startullage(float value) {
  _internal_set_startullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.startUllage)
}

// optional float endProductLevel = 12;
inline bool DayEndInventory::_internal_has_endproductlevel() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DayEndInventory::has_endproductlevel() const {
  return _internal_has_endproductlevel();
}
inline void DayEndInventory::clear_endproductlevel() {
  endproductlevel_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float DayEndInventory::_internal_endproductlevel() const {
  return endproductlevel_;
}
inline float DayEndInventory::endproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endProductLevel)
  return _internal_endproductlevel();
}
inline void DayEndInventory::_internal_set_endproductlevel(float value) {
  _has_bits_[0] |= 0x00000800u;
  endproductlevel_ = value;
}
inline void DayEndInventory::set_endproductlevel(float value) {
  _internal_set_endproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endProductLevel)
}

// optional float endWaterLevel = 13;
inline bool DayEndInventory::_internal_has_endwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endwaterlevel() const {
  return _internal_has_endwaterlevel();
}
inline void DayEndInventory::clear_endwaterlevel() {
  endwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float DayEndInventory::_internal_endwaterlevel() const {
  return endwaterlevel_;
}
inline float DayEndInventory::endwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endWaterLevel)
  return _internal_endwaterlevel();
}
inline void DayEndInventory::_internal_set_endwaterlevel(float value) {
  _has_bits_[0] |= 0x00001000u;
  endwaterlevel_ = value;
}
inline void DayEndInventory::set_endwaterlevel(float value) {
  _internal_set_endwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endWaterLevel)
}

// optional float endProductVolume = 14;
inline bool DayEndInventory::_internal_has_endproductvolume() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endproductvolume() const {
  return _internal_has_endproductvolume();
}
inline void DayEndInventory::clear_endproductvolume() {
  endproductvolume_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float DayEndInventory::_internal_endproductvolume() const {
  return endproductvolume_;
}
inline float DayEndInventory::endproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endProductVolume)
  return _internal_endproductvolume();
}
inline void DayEndInventory::_internal_set_endproductvolume(float value) {
  _has_bits_[0] |= 0x00002000u;
  endproductvolume_ = value;
}
inline void DayEndInventory::set_endproductvolume(float value) {
  _internal_set_endproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endProductVolume)
}

// optional float endWaterVolume = 15;
inline bool DayEndInventory::_internal_has_endwatervolume() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endwatervolume() const {
  return _internal_has_endwatervolume();
}
inline void DayEndInventory::clear_endwatervolume() {
  endwatervolume_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float DayEndInventory::_internal_endwatervolume() const {
  return endwatervolume_;
}
inline float DayEndInventory::endwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endWaterVolume)
  return _internal_endwatervolume();
}
inline void DayEndInventory::_internal_set_endwatervolume(float value) {
  _has_bits_[0] |= 0x00004000u;
  endwatervolume_ = value;
}
inline void DayEndInventory::set_endwatervolume(float value) {
  _internal_set_endwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endWaterVolume)
}

// optional float endProductTcVolume = 16;
inline bool DayEndInventory::_internal_has_endproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endproducttcvolume() const {
  return _internal_has_endproducttcvolume();
}
inline void DayEndInventory::clear_endproducttcvolume() {
  endproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float DayEndInventory::_internal_endproducttcvolume() const {
  return endproducttcvolume_;
}
inline float DayEndInventory::endproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endProductTcVolume)
  return _internal_endproducttcvolume();
}
inline void DayEndInventory::_internal_set_endproducttcvolume(float value) {
  _has_bits_[0] |= 0x00008000u;
  endproducttcvolume_ = value;
}
inline void DayEndInventory::set_endproducttcvolume(float value) {
  _internal_set_endproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endProductTcVolume)
}

// optional float endTemperature = 17;
inline bool DayEndInventory::_internal_has_endtemperature() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endtemperature() const {
  return _internal_has_endtemperature();
}
inline void DayEndInventory::clear_endtemperature() {
  endtemperature_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float DayEndInventory::_internal_endtemperature() const {
  return endtemperature_;
}
inline float DayEndInventory::endtemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endTemperature)
  return _internal_endtemperature();
}
inline void DayEndInventory::_internal_set_endtemperature(float value) {
  _has_bits_[0] |= 0x00010000u;
  endtemperature_ = value;
}
inline void DayEndInventory::set_endtemperature(float value) {
  _internal_set_endtemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endTemperature)
}

// optional float endProductDensity = 18;
inline bool DayEndInventory::_internal_has_endproductdensity() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endproductdensity() const {
  return _internal_has_endproductdensity();
}
inline void DayEndInventory::clear_endproductdensity() {
  endproductdensity_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float DayEndInventory::_internal_endproductdensity() const {
  return endproductdensity_;
}
inline float DayEndInventory::endproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endProductDensity)
  return _internal_endproductdensity();
}
inline void DayEndInventory::_internal_set_endproductdensity(float value) {
  _has_bits_[0] |= 0x00020000u;
  endproductdensity_ = value;
}
inline void DayEndInventory::set_endproductdensity(float value) {
  _internal_set_endproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endProductDensity)
}

// optional float endProductTcDensity = 19;
inline bool DayEndInventory::_internal_has_endproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endproducttcdensity() const {
  return _internal_has_endproducttcdensity();
}
inline void DayEndInventory::clear_endproducttcdensity() {
  endproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float DayEndInventory::_internal_endproducttcdensity() const {
  return endproducttcdensity_;
}
inline float DayEndInventory::endproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endProductTcDensity)
  return _internal_endproducttcdensity();
}
inline void DayEndInventory::_internal_set_endproducttcdensity(float value) {
  _has_bits_[0] |= 0x00040000u;
  endproducttcdensity_ = value;
}
inline void DayEndInventory::set_endproducttcdensity(float value) {
  _internal_set_endproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endProductTcDensity)
}

// optional float endUllage = 20;
inline bool DayEndInventory::_internal_has_endullage() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DayEndInventory::has_endullage() const {
  return _internal_has_endullage();
}
inline void DayEndInventory::clear_endullage() {
  endullage_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float DayEndInventory::_internal_endullage() const {
  return endullage_;
}
inline float DayEndInventory::endullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.endUllage)
  return _internal_endullage();
}
inline void DayEndInventory::_internal_set_endullage(float value) {
  _has_bits_[0] |= 0x00080000u;
  endullage_ = value;
}
inline void DayEndInventory::set_endullage(float value) {
  _internal_set_endullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.endUllage)
}

// optional double totalSaleVolume = 21;
inline bool DayEndInventory::_internal_has_totalsalevolume() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DayEndInventory::has_totalsalevolume() const {
  return _internal_has_totalsalevolume();
}
inline void DayEndInventory::clear_totalsalevolume() {
  totalsalevolume_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline double DayEndInventory::_internal_totalsalevolume() const {
  return totalsalevolume_;
}
inline double DayEndInventory::totalsalevolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.totalSaleVolume)
  return _internal_totalsalevolume();
}
inline void DayEndInventory::_internal_set_totalsalevolume(double value) {
  _has_bits_[0] |= 0x00100000u;
  totalsalevolume_ = value;
}
inline void DayEndInventory::set_totalsalevolume(double value) {
  _internal_set_totalsalevolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.totalSaleVolume)
}

// optional uint32 inventoryId = 22;
inline bool DayEndInventory::_internal_has_inventoryid() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DayEndInventory::has_inventoryid() const {
  return _internal_has_inventoryid();
}
inline void DayEndInventory::clear_inventoryid() {
  inventoryid_ = 0u;
  _has_bits_[0] &= ~0x00200000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_inventoryid() const {
  return inventoryid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::inventoryid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.inventoryId)
  return _internal_inventoryid();
}
inline void DayEndInventory::_internal_set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00200000u;
  inventoryid_ = value;
}
inline void DayEndInventory::set_inventoryid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventoryid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.inventoryId)
}

// optional uint32 tankStatus = 23;
inline bool DayEndInventory::_internal_has_tankstatus() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DayEndInventory::has_tankstatus() const {
  return _internal_has_tankstatus();
}
inline void DayEndInventory::clear_tankstatus() {
  tankstatus_ = 0u;
  _has_bits_[0] &= ~0x00400000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_tankstatus() const {
  return tankstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::tankstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.tankStatus)
  return _internal_tankstatus();
}
inline void DayEndInventory::_internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00400000u;
  tankstatus_ = value;
}
inline void DayEndInventory::set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.tankStatus)
}

// required uint32 recordUid = 24;
inline bool DayEndInventory::_internal_has_recorduid() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DayEndInventory::has_recorduid() const {
  return _internal_has_recorduid();
}
inline void DayEndInventory::clear_recorduid() {
  recorduid_ = 0u;
  _has_bits_[0] &= ~0x00800000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_recorduid() const {
  return recorduid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::recorduid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.recordUid)
  return _internal_recorduid();
}
inline void DayEndInventory::_internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00800000u;
  recorduid_ = value;
}
inline void DayEndInventory::set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recorduid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.recordUid)
}

// required uint32 status = 25;
inline bool DayEndInventory::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DayEndInventory::has_status() const {
  return _internal_has_status();
}
inline void DayEndInventory::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DayEndInventory::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.DayEndInventory.status)
  return _internal_status();
}
inline void DayEndInventory::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  status_ = value;
}
inline void DayEndInventory::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.DayEndInventory.status)
}

// -------------------------------------------------------------------

// ShiftEndDetails

// required uint32 shiftId = 1;
inline bool ShiftEndDetails::_internal_has_shiftid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_shiftid() const {
  return _internal_has_shiftid();
}
inline void ShiftEndDetails::clear_shiftid() {
  shiftid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::_internal_shiftid() const {
  return shiftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::shiftid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.shiftId)
  return _internal_shiftid();
}
inline void ShiftEndDetails::_internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  shiftid_ = value;
}
inline void ShiftEndDetails::set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shiftid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.shiftId)
}

// required uint32 shiftType = 2;
inline bool ShiftEndDetails::_internal_has_shifttype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_shifttype() const {
  return _internal_has_shifttype();
}
inline void ShiftEndDetails::clear_shifttype() {
  shifttype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::_internal_shifttype() const {
  return shifttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::shifttype() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.shiftType)
  return _internal_shifttype();
}
inline void ShiftEndDetails::_internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  shifttype_ = value;
}
inline void ShiftEndDetails::set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shifttype(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.shiftType)
}

// required uint32 dayId = 3;
inline bool ShiftEndDetails::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_dayid() const {
  return _internal_has_dayid();
}
inline void ShiftEndDetails::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.dayId)
  return _internal_dayid();
}
inline void ShiftEndDetails::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  dayid_ = value;
}
inline void ShiftEndDetails::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.dayId)
}

// optional string openTime = 4;
inline bool ShiftEndDetails::_internal_has_opentime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_opentime() const {
  return _internal_has_opentime();
}
inline void ShiftEndDetails::clear_opentime() {
  opentime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShiftEndDetails::opentime() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.openTime)
  return _internal_opentime();
}
inline void ShiftEndDetails::set_opentime(const std::string& value) {
  _internal_set_opentime(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.openTime)
}
inline std::string* ShiftEndDetails::mutable_opentime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ShiftEndDetails.openTime)
  return _internal_mutable_opentime();
}
inline const std::string& ShiftEndDetails::_internal_opentime() const {
  return opentime_.Get();
}
inline void ShiftEndDetails::_internal_set_opentime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShiftEndDetails::set_opentime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ShiftEndDetails.openTime)
}
inline void ShiftEndDetails::set_opentime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ShiftEndDetails.openTime)
}
inline void ShiftEndDetails::set_opentime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  opentime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ShiftEndDetails.openTime)
}
inline std::string* ShiftEndDetails::_internal_mutable_opentime() {
  _has_bits_[0] |= 0x00000001u;
  return opentime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShiftEndDetails::release_opentime() {
  // @@protoc_insertion_point(field_release:fccboscom.ShiftEndDetails.openTime)
  if (!_internal_has_opentime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return opentime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShiftEndDetails::set_allocated_opentime(std::string* opentime) {
  if (opentime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opentime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), opentime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ShiftEndDetails.openTime)
}
inline std::string* ShiftEndDetails::unsafe_arena_release_opentime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ShiftEndDetails.openTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return opentime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShiftEndDetails::unsafe_arena_set_allocated_opentime(
    std::string* opentime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (opentime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  opentime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      opentime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ShiftEndDetails.openTime)
}

// optional string closeTime = 5;
inline bool ShiftEndDetails::_internal_has_closetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_closetime() const {
  return _internal_has_closetime();
}
inline void ShiftEndDetails::clear_closetime() {
  closetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ShiftEndDetails::closetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.closeTime)
  return _internal_closetime();
}
inline void ShiftEndDetails::set_closetime(const std::string& value) {
  _internal_set_closetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.closeTime)
}
inline std::string* ShiftEndDetails::mutable_closetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ShiftEndDetails.closeTime)
  return _internal_mutable_closetime();
}
inline const std::string& ShiftEndDetails::_internal_closetime() const {
  return closetime_.Get();
}
inline void ShiftEndDetails::_internal_set_closetime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShiftEndDetails::set_closetime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ShiftEndDetails.closeTime)
}
inline void ShiftEndDetails::set_closetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ShiftEndDetails.closeTime)
}
inline void ShiftEndDetails::set_closetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  closetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ShiftEndDetails.closeTime)
}
inline std::string* ShiftEndDetails::_internal_mutable_closetime() {
  _has_bits_[0] |= 0x00000002u;
  return closetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShiftEndDetails::release_closetime() {
  // @@protoc_insertion_point(field_release:fccboscom.ShiftEndDetails.closeTime)
  if (!_internal_has_closetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return closetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShiftEndDetails::set_allocated_closetime(std::string* closetime) {
  if (closetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  closetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), closetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ShiftEndDetails.closeTime)
}
inline std::string* ShiftEndDetails::unsafe_arena_release_closetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ShiftEndDetails.closeTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return closetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShiftEndDetails::unsafe_arena_set_allocated_closetime(
    std::string* closetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (closetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  closetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      closetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ShiftEndDetails.closeTime)
}

// required uint32 status = 6;
inline bool ShiftEndDetails::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_status() const {
  return _internal_has_status();
}
inline void ShiftEndDetails::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.status)
  return _internal_status();
}
inline void ShiftEndDetails::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  status_ = value;
}
inline void ShiftEndDetails::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.status)
}

// required uint32 recordUid = 7;
inline bool ShiftEndDetails::_internal_has_recorduid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShiftEndDetails::has_recorduid() const {
  return _internal_has_recorduid();
}
inline void ShiftEndDetails::clear_recorduid() {
  recorduid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::_internal_recorduid() const {
  return recorduid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndDetails::recorduid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndDetails.recordUid)
  return _internal_recorduid();
}
inline void ShiftEndDetails::_internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  recorduid_ = value;
}
inline void ShiftEndDetails::set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recorduid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndDetails.recordUid)
}

// -------------------------------------------------------------------

// ShiftEndTotalizer

// required uint32 shiftId = 1;
inline bool ShiftEndTotalizer::_internal_has_shiftid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_shiftid() const {
  return _internal_has_shiftid();
}
inline void ShiftEndTotalizer::clear_shiftid() {
  shiftid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_shiftid() const {
  return shiftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::shiftid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.shiftId)
  return _internal_shiftid();
}
inline void ShiftEndTotalizer::_internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  shiftid_ = value;
}
inline void ShiftEndTotalizer::set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shiftid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.shiftId)
}

// required uint32 shiftType = 2;
inline bool ShiftEndTotalizer::_internal_has_shifttype() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_shifttype() const {
  return _internal_has_shifttype();
}
inline void ShiftEndTotalizer::clear_shifttype() {
  shifttype_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_shifttype() const {
  return shifttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::shifttype() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.shiftType)
  return _internal_shifttype();
}
inline void ShiftEndTotalizer::_internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  shifttype_ = value;
}
inline void ShiftEndTotalizer::set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shifttype(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.shiftType)
}

// required uint32 dayId = 3;
inline bool ShiftEndTotalizer::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_dayid() const {
  return _internal_has_dayid();
}
inline void ShiftEndTotalizer::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.dayId)
  return _internal_dayid();
}
inline void ShiftEndTotalizer::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  dayid_ = value;
}
inline void ShiftEndTotalizer::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.dayId)
}

// required uint32 recordUid = 4;
inline bool ShiftEndTotalizer::_internal_has_recorduid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_recorduid() const {
  return _internal_has_recorduid();
}
inline void ShiftEndTotalizer::clear_recorduid() {
  recorduid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_recorduid() const {
  return recorduid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::recorduid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.recordUid)
  return _internal_recorduid();
}
inline void ShiftEndTotalizer::_internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  recorduid_ = value;
}
inline void ShiftEndTotalizer::set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recorduid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.recordUid)
}

// required uint32 nozzleUid = 5;
inline bool ShiftEndTotalizer::_internal_has_nozzleuid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_nozzleuid() const {
  return _internal_has_nozzleuid();
}
inline void ShiftEndTotalizer::clear_nozzleuid() {
  nozzleuid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_nozzleuid() const {
  return nozzleuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::nozzleuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.nozzleUid)
  return _internal_nozzleuid();
}
inline void ShiftEndTotalizer::_internal_set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  nozzleuid_ = value;
}
inline void ShiftEndTotalizer::set_nozzleuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.nozzleUid)
}

// required uint32 tankNo = 6;
inline bool ShiftEndTotalizer::_internal_has_tankno() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_tankno() const {
  return _internal_has_tankno();
}
inline void ShiftEndTotalizer::clear_tankno() {
  tankno_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_tankno() const {
  return tankno_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::tankno() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.tankNo)
  return _internal_tankno();
}
inline void ShiftEndTotalizer::_internal_set_tankno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  tankno_ = value;
}
inline void ShiftEndTotalizer::set_tankno(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankno(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.tankNo)
}

// required double startTotalizer = 7;
inline bool ShiftEndTotalizer::_internal_has_starttotalizer() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_starttotalizer() const {
  return _internal_has_starttotalizer();
}
inline void ShiftEndTotalizer::clear_starttotalizer() {
  starttotalizer_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline double ShiftEndTotalizer::_internal_starttotalizer() const {
  return starttotalizer_;
}
inline double ShiftEndTotalizer::starttotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.startTotalizer)
  return _internal_starttotalizer();
}
inline void ShiftEndTotalizer::_internal_set_starttotalizer(double value) {
  _has_bits_[0] |= 0x00000080u;
  starttotalizer_ = value;
}
inline void ShiftEndTotalizer::set_starttotalizer(double value) {
  _internal_set_starttotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.startTotalizer)
}

// optional double endTotalizer = 8;
inline bool ShiftEndTotalizer::_internal_has_endtotalizer() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_endtotalizer() const {
  return _internal_has_endtotalizer();
}
inline void ShiftEndTotalizer::clear_endtotalizer() {
  endtotalizer_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline double ShiftEndTotalizer::_internal_endtotalizer() const {
  return endtotalizer_;
}
inline double ShiftEndTotalizer::endtotalizer() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.endTotalizer)
  return _internal_endtotalizer();
}
inline void ShiftEndTotalizer::_internal_set_endtotalizer(double value) {
  _has_bits_[0] |= 0x00000100u;
  endtotalizer_ = value;
}
inline void ShiftEndTotalizer::set_endtotalizer(double value) {
  _internal_set_endtotalizer(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.endTotalizer)
}

// optional double totalSaleVolume = 9;
inline bool ShiftEndTotalizer::_internal_has_totalsalevolume() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_totalsalevolume() const {
  return _internal_has_totalsalevolume();
}
inline void ShiftEndTotalizer::clear_totalsalevolume() {
  totalsalevolume_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline double ShiftEndTotalizer::_internal_totalsalevolume() const {
  return totalsalevolume_;
}
inline double ShiftEndTotalizer::totalsalevolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.totalSaleVolume)
  return _internal_totalsalevolume();
}
inline void ShiftEndTotalizer::_internal_set_totalsalevolume(double value) {
  _has_bits_[0] |= 0x00000200u;
  totalsalevolume_ = value;
}
inline void ShiftEndTotalizer::set_totalsalevolume(double value) {
  _internal_set_totalsalevolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.totalSaleVolume)
}

// optional uint32 lastTrxnId = 10;
inline bool ShiftEndTotalizer::_internal_has_lasttrxnid() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_lasttrxnid() const {
  return _internal_has_lasttrxnid();
}
inline void ShiftEndTotalizer::clear_lasttrxnid() {
  lasttrxnid_ = 0u;
  _has_bits_[0] &= ~0x00000400u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_lasttrxnid() const {
  return lasttrxnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::lasttrxnid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.lastTrxnId)
  return _internal_lasttrxnid();
}
inline void ShiftEndTotalizer::_internal_set_lasttrxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000400u;
  lasttrxnid_ = value;
}
inline void ShiftEndTotalizer::set_lasttrxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_lasttrxnid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.lastTrxnId)
}

// optional string nozzleStatus = 11;
inline bool ShiftEndTotalizer::_internal_has_nozzlestatus() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_nozzlestatus() const {
  return _internal_has_nozzlestatus();
}
inline void ShiftEndTotalizer::clear_nozzlestatus() {
  nozzlestatus_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ShiftEndTotalizer::nozzlestatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.nozzleStatus)
  return _internal_nozzlestatus();
}
inline void ShiftEndTotalizer::set_nozzlestatus(const std::string& value) {
  _internal_set_nozzlestatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.nozzleStatus)
}
inline std::string* ShiftEndTotalizer::mutable_nozzlestatus() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ShiftEndTotalizer.nozzleStatus)
  return _internal_mutable_nozzlestatus();
}
inline const std::string& ShiftEndTotalizer::_internal_nozzlestatus() const {
  return nozzlestatus_.Get();
}
inline void ShiftEndTotalizer::_internal_set_nozzlestatus(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  nozzlestatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ShiftEndTotalizer::set_nozzlestatus(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  nozzlestatus_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ShiftEndTotalizer.nozzleStatus)
}
inline void ShiftEndTotalizer::set_nozzlestatus(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  nozzlestatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ShiftEndTotalizer.nozzleStatus)
}
inline void ShiftEndTotalizer::set_nozzlestatus(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  nozzlestatus_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ShiftEndTotalizer.nozzleStatus)
}
inline std::string* ShiftEndTotalizer::_internal_mutable_nozzlestatus() {
  _has_bits_[0] |= 0x00000001u;
  return nozzlestatus_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ShiftEndTotalizer::release_nozzlestatus() {
  // @@protoc_insertion_point(field_release:fccboscom.ShiftEndTotalizer.nozzleStatus)
  if (!_internal_has_nozzlestatus()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return nozzlestatus_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ShiftEndTotalizer::set_allocated_nozzlestatus(std::string* nozzlestatus) {
  if (nozzlestatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nozzlestatus_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), nozzlestatus,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ShiftEndTotalizer.nozzleStatus)
}
inline std::string* ShiftEndTotalizer::unsafe_arena_release_nozzlestatus() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ShiftEndTotalizer.nozzleStatus)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return nozzlestatus_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ShiftEndTotalizer::unsafe_arena_set_allocated_nozzlestatus(
    std::string* nozzlestatus) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (nozzlestatus != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  nozzlestatus_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      nozzlestatus, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ShiftEndTotalizer.nozzleStatus)
}

// required uint32 status = 12;
inline bool ShiftEndTotalizer::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShiftEndTotalizer::has_status() const {
  return _internal_has_status();
}
inline void ShiftEndTotalizer::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000800u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndTotalizer::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndTotalizer.status)
  return _internal_status();
}
inline void ShiftEndTotalizer::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000800u;
  status_ = value;
}
inline void ShiftEndTotalizer::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndTotalizer.status)
}

// -------------------------------------------------------------------

// ShiftEndInventory

// required uint32 shiftId = 1;
inline bool ShiftEndInventory::_internal_has_shiftid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_shiftid() const {
  return _internal_has_shiftid();
}
inline void ShiftEndInventory::clear_shiftid() {
  shiftid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_shiftid() const {
  return shiftid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::shiftid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.shiftId)
  return _internal_shiftid();
}
inline void ShiftEndInventory::_internal_set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  shiftid_ = value;
}
inline void ShiftEndInventory::set_shiftid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shiftid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.shiftId)
}

// required uint32 shiftType = 2;
inline bool ShiftEndInventory::_internal_has_shifttype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_shifttype() const {
  return _internal_has_shifttype();
}
inline void ShiftEndInventory::clear_shifttype() {
  shifttype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_shifttype() const {
  return shifttype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::shifttype() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.shiftType)
  return _internal_shifttype();
}
inline void ShiftEndInventory::_internal_set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  shifttype_ = value;
}
inline void ShiftEndInventory::set_shifttype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_shifttype(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.shiftType)
}

// required uint32 recordUid = 3;
inline bool ShiftEndInventory::_internal_has_recorduid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_recorduid() const {
  return _internal_has_recorduid();
}
inline void ShiftEndInventory::clear_recorduid() {
  recorduid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_recorduid() const {
  return recorduid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::recorduid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.recordUid)
  return _internal_recorduid();
}
inline void ShiftEndInventory::_internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  recorduid_ = value;
}
inline void ShiftEndInventory::set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recorduid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.recordUid)
}

// required uint32 dayId = 4;
inline bool ShiftEndInventory::_internal_has_dayid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_dayid() const {
  return _internal_has_dayid();
}
inline void ShiftEndInventory::clear_dayid() {
  dayid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_dayid() const {
  return dayid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::dayid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.dayId)
  return _internal_dayid();
}
inline void ShiftEndInventory::_internal_set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  dayid_ = value;
}
inline void ShiftEndInventory::set_dayid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_dayid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.dayId)
}

// required uint32 tankUid = 5;
inline bool ShiftEndInventory::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void ShiftEndInventory::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.tankUid)
  return _internal_tankuid();
}
inline void ShiftEndInventory::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  tankuid_ = value;
}
inline void ShiftEndInventory::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.tankUid)
}

// required float startProductLevel = 6;
inline bool ShiftEndInventory::_internal_has_startproductlevel() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startproductlevel() const {
  return _internal_has_startproductlevel();
}
inline void ShiftEndInventory::clear_startproductlevel() {
  startproductlevel_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float ShiftEndInventory::_internal_startproductlevel() const {
  return startproductlevel_;
}
inline float ShiftEndInventory::startproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startProductLevel)
  return _internal_startproductlevel();
}
inline void ShiftEndInventory::_internal_set_startproductlevel(float value) {
  _has_bits_[0] |= 0x00000020u;
  startproductlevel_ = value;
}
inline void ShiftEndInventory::set_startproductlevel(float value) {
  _internal_set_startproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startProductLevel)
}

// required float startWaterLevel = 7;
inline bool ShiftEndInventory::_internal_has_startwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startwaterlevel() const {
  return _internal_has_startwaterlevel();
}
inline void ShiftEndInventory::clear_startwaterlevel() {
  startwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00000040u;
}
inline float ShiftEndInventory::_internal_startwaterlevel() const {
  return startwaterlevel_;
}
inline float ShiftEndInventory::startwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startWaterLevel)
  return _internal_startwaterlevel();
}
inline void ShiftEndInventory::_internal_set_startwaterlevel(float value) {
  _has_bits_[0] |= 0x00000040u;
  startwaterlevel_ = value;
}
inline void ShiftEndInventory::set_startwaterlevel(float value) {
  _internal_set_startwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startWaterLevel)
}

// required float startProductVolume = 8;
inline bool ShiftEndInventory::_internal_has_startproductvolume() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startproductvolume() const {
  return _internal_has_startproductvolume();
}
inline void ShiftEndInventory::clear_startproductvolume() {
  startproductvolume_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ShiftEndInventory::_internal_startproductvolume() const {
  return startproductvolume_;
}
inline float ShiftEndInventory::startproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startProductVolume)
  return _internal_startproductvolume();
}
inline void ShiftEndInventory::_internal_set_startproductvolume(float value) {
  _has_bits_[0] |= 0x00000080u;
  startproductvolume_ = value;
}
inline void ShiftEndInventory::set_startproductvolume(float value) {
  _internal_set_startproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startProductVolume)
}

// required float startWaterVolume = 9;
inline bool ShiftEndInventory::_internal_has_startwatervolume() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startwatervolume() const {
  return _internal_has_startwatervolume();
}
inline void ShiftEndInventory::clear_startwatervolume() {
  startwatervolume_ = 0;
  _has_bits_[0] &= ~0x00000100u;
}
inline float ShiftEndInventory::_internal_startwatervolume() const {
  return startwatervolume_;
}
inline float ShiftEndInventory::startwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startWaterVolume)
  return _internal_startwatervolume();
}
inline void ShiftEndInventory::_internal_set_startwatervolume(float value) {
  _has_bits_[0] |= 0x00000100u;
  startwatervolume_ = value;
}
inline void ShiftEndInventory::set_startwatervolume(float value) {
  _internal_set_startwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startWaterVolume)
}

// required float startProductTcVolume = 10;
inline bool ShiftEndInventory::_internal_has_startproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startproducttcvolume() const {
  return _internal_has_startproducttcvolume();
}
inline void ShiftEndInventory::clear_startproducttcvolume() {
  startproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00000200u;
}
inline float ShiftEndInventory::_internal_startproducttcvolume() const {
  return startproducttcvolume_;
}
inline float ShiftEndInventory::startproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startProductTcVolume)
  return _internal_startproducttcvolume();
}
inline void ShiftEndInventory::_internal_set_startproducttcvolume(float value) {
  _has_bits_[0] |= 0x00000200u;
  startproducttcvolume_ = value;
}
inline void ShiftEndInventory::set_startproducttcvolume(float value) {
  _internal_set_startproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startProductTcVolume)
}

// optional float startProductDensity = 11;
inline bool ShiftEndInventory::_internal_has_startproductdensity() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startproductdensity() const {
  return _internal_has_startproductdensity();
}
inline void ShiftEndInventory::clear_startproductdensity() {
  startproductdensity_ = 0;
  _has_bits_[0] &= ~0x00000400u;
}
inline float ShiftEndInventory::_internal_startproductdensity() const {
  return startproductdensity_;
}
inline float ShiftEndInventory::startproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startProductDensity)
  return _internal_startproductdensity();
}
inline void ShiftEndInventory::_internal_set_startproductdensity(float value) {
  _has_bits_[0] |= 0x00000400u;
  startproductdensity_ = value;
}
inline void ShiftEndInventory::set_startproductdensity(float value) {
  _internal_set_startproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startProductDensity)
}

// optional float startProductTcDensity = 12;
inline bool ShiftEndInventory::_internal_has_startproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startproducttcdensity() const {
  return _internal_has_startproducttcdensity();
}
inline void ShiftEndInventory::clear_startproducttcdensity() {
  startproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00000800u;
}
inline float ShiftEndInventory::_internal_startproducttcdensity() const {
  return startproducttcdensity_;
}
inline float ShiftEndInventory::startproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startProductTcDensity)
  return _internal_startproducttcdensity();
}
inline void ShiftEndInventory::_internal_set_startproducttcdensity(float value) {
  _has_bits_[0] |= 0x00000800u;
  startproducttcdensity_ = value;
}
inline void ShiftEndInventory::set_startproducttcdensity(float value) {
  _internal_set_startproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startProductTcDensity)
}

// required float startUllage = 13;
inline bool ShiftEndInventory::_internal_has_startullage() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_startullage() const {
  return _internal_has_startullage();
}
inline void ShiftEndInventory::clear_startullage() {
  startullage_ = 0;
  _has_bits_[0] &= ~0x00001000u;
}
inline float ShiftEndInventory::_internal_startullage() const {
  return startullage_;
}
inline float ShiftEndInventory::startullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startUllage)
  return _internal_startullage();
}
inline void ShiftEndInventory::_internal_set_startullage(float value) {
  _has_bits_[0] |= 0x00001000u;
  startullage_ = value;
}
inline void ShiftEndInventory::set_startullage(float value) {
  _internal_set_startullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startUllage)
}

// required float startTemperature = 14;
inline bool ShiftEndInventory::_internal_has_starttemperature() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_starttemperature() const {
  return _internal_has_starttemperature();
}
inline void ShiftEndInventory::clear_starttemperature() {
  starttemperature_ = 0;
  _has_bits_[0] &= ~0x00002000u;
}
inline float ShiftEndInventory::_internal_starttemperature() const {
  return starttemperature_;
}
inline float ShiftEndInventory::starttemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.startTemperature)
  return _internal_starttemperature();
}
inline void ShiftEndInventory::_internal_set_starttemperature(float value) {
  _has_bits_[0] |= 0x00002000u;
  starttemperature_ = value;
}
inline void ShiftEndInventory::set_starttemperature(float value) {
  _internal_set_starttemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.startTemperature)
}

// optional float endProductLevel = 15;
inline bool ShiftEndInventory::_internal_has_endproductlevel() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endproductlevel() const {
  return _internal_has_endproductlevel();
}
inline void ShiftEndInventory::clear_endproductlevel() {
  endproductlevel_ = 0;
  _has_bits_[0] &= ~0x00004000u;
}
inline float ShiftEndInventory::_internal_endproductlevel() const {
  return endproductlevel_;
}
inline float ShiftEndInventory::endproductlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endProductLevel)
  return _internal_endproductlevel();
}
inline void ShiftEndInventory::_internal_set_endproductlevel(float value) {
  _has_bits_[0] |= 0x00004000u;
  endproductlevel_ = value;
}
inline void ShiftEndInventory::set_endproductlevel(float value) {
  _internal_set_endproductlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endProductLevel)
}

// optional float endWaterLevel = 16;
inline bool ShiftEndInventory::_internal_has_endwaterlevel() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endwaterlevel() const {
  return _internal_has_endwaterlevel();
}
inline void ShiftEndInventory::clear_endwaterlevel() {
  endwaterlevel_ = 0;
  _has_bits_[0] &= ~0x00008000u;
}
inline float ShiftEndInventory::_internal_endwaterlevel() const {
  return endwaterlevel_;
}
inline float ShiftEndInventory::endwaterlevel() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endWaterLevel)
  return _internal_endwaterlevel();
}
inline void ShiftEndInventory::_internal_set_endwaterlevel(float value) {
  _has_bits_[0] |= 0x00008000u;
  endwaterlevel_ = value;
}
inline void ShiftEndInventory::set_endwaterlevel(float value) {
  _internal_set_endwaterlevel(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endWaterLevel)
}

// optional float endProductVolume = 17;
inline bool ShiftEndInventory::_internal_has_endproductvolume() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endproductvolume() const {
  return _internal_has_endproductvolume();
}
inline void ShiftEndInventory::clear_endproductvolume() {
  endproductvolume_ = 0;
  _has_bits_[0] &= ~0x00010000u;
}
inline float ShiftEndInventory::_internal_endproductvolume() const {
  return endproductvolume_;
}
inline float ShiftEndInventory::endproductvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endProductVolume)
  return _internal_endproductvolume();
}
inline void ShiftEndInventory::_internal_set_endproductvolume(float value) {
  _has_bits_[0] |= 0x00010000u;
  endproductvolume_ = value;
}
inline void ShiftEndInventory::set_endproductvolume(float value) {
  _internal_set_endproductvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endProductVolume)
}

// optional float endWaterVolume = 18;
inline bool ShiftEndInventory::_internal_has_endwatervolume() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endwatervolume() const {
  return _internal_has_endwatervolume();
}
inline void ShiftEndInventory::clear_endwatervolume() {
  endwatervolume_ = 0;
  _has_bits_[0] &= ~0x00020000u;
}
inline float ShiftEndInventory::_internal_endwatervolume() const {
  return endwatervolume_;
}
inline float ShiftEndInventory::endwatervolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endWaterVolume)
  return _internal_endwatervolume();
}
inline void ShiftEndInventory::_internal_set_endwatervolume(float value) {
  _has_bits_[0] |= 0x00020000u;
  endwatervolume_ = value;
}
inline void ShiftEndInventory::set_endwatervolume(float value) {
  _internal_set_endwatervolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endWaterVolume)
}

// optional float endProductTcVolume = 19;
inline bool ShiftEndInventory::_internal_has_endproducttcvolume() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endproducttcvolume() const {
  return _internal_has_endproducttcvolume();
}
inline void ShiftEndInventory::clear_endproducttcvolume() {
  endproducttcvolume_ = 0;
  _has_bits_[0] &= ~0x00040000u;
}
inline float ShiftEndInventory::_internal_endproducttcvolume() const {
  return endproducttcvolume_;
}
inline float ShiftEndInventory::endproducttcvolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endProductTcVolume)
  return _internal_endproducttcvolume();
}
inline void ShiftEndInventory::_internal_set_endproducttcvolume(float value) {
  _has_bits_[0] |= 0x00040000u;
  endproducttcvolume_ = value;
}
inline void ShiftEndInventory::set_endproducttcvolume(float value) {
  _internal_set_endproducttcvolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endProductTcVolume)
}

// optional float endProductDensity = 20;
inline bool ShiftEndInventory::_internal_has_endproductdensity() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endproductdensity() const {
  return _internal_has_endproductdensity();
}
inline void ShiftEndInventory::clear_endproductdensity() {
  endproductdensity_ = 0;
  _has_bits_[0] &= ~0x00080000u;
}
inline float ShiftEndInventory::_internal_endproductdensity() const {
  return endproductdensity_;
}
inline float ShiftEndInventory::endproductdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endProductDensity)
  return _internal_endproductdensity();
}
inline void ShiftEndInventory::_internal_set_endproductdensity(float value) {
  _has_bits_[0] |= 0x00080000u;
  endproductdensity_ = value;
}
inline void ShiftEndInventory::set_endproductdensity(float value) {
  _internal_set_endproductdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endProductDensity)
}

// optional float endProductTcDensity = 21;
inline bool ShiftEndInventory::_internal_has_endproducttcdensity() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endproducttcdensity() const {
  return _internal_has_endproducttcdensity();
}
inline void ShiftEndInventory::clear_endproducttcdensity() {
  endproducttcdensity_ = 0;
  _has_bits_[0] &= ~0x00100000u;
}
inline float ShiftEndInventory::_internal_endproducttcdensity() const {
  return endproducttcdensity_;
}
inline float ShiftEndInventory::endproducttcdensity() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endProductTcDensity)
  return _internal_endproducttcdensity();
}
inline void ShiftEndInventory::_internal_set_endproducttcdensity(float value) {
  _has_bits_[0] |= 0x00100000u;
  endproducttcdensity_ = value;
}
inline void ShiftEndInventory::set_endproducttcdensity(float value) {
  _internal_set_endproducttcdensity(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endProductTcDensity)
}

// optional float endUllage = 22;
inline bool ShiftEndInventory::_internal_has_endullage() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endullage() const {
  return _internal_has_endullage();
}
inline void ShiftEndInventory::clear_endullage() {
  endullage_ = 0;
  _has_bits_[0] &= ~0x00200000u;
}
inline float ShiftEndInventory::_internal_endullage() const {
  return endullage_;
}
inline float ShiftEndInventory::endullage() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endUllage)
  return _internal_endullage();
}
inline void ShiftEndInventory::_internal_set_endullage(float value) {
  _has_bits_[0] |= 0x00200000u;
  endullage_ = value;
}
inline void ShiftEndInventory::set_endullage(float value) {
  _internal_set_endullage(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endUllage)
}

// optional float endTemperature = 23;
inline bool ShiftEndInventory::_internal_has_endtemperature() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_endtemperature() const {
  return _internal_has_endtemperature();
}
inline void ShiftEndInventory::clear_endtemperature() {
  endtemperature_ = 0;
  _has_bits_[0] &= ~0x00800000u;
}
inline float ShiftEndInventory::_internal_endtemperature() const {
  return endtemperature_;
}
inline float ShiftEndInventory::endtemperature() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.endTemperature)
  return _internal_endtemperature();
}
inline void ShiftEndInventory::_internal_set_endtemperature(float value) {
  _has_bits_[0] |= 0x00800000u;
  endtemperature_ = value;
}
inline void ShiftEndInventory::set_endtemperature(float value) {
  _internal_set_endtemperature(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.endTemperature)
}

// optional double totalSaleVolume = 24;
inline bool ShiftEndInventory::_internal_has_totalsalevolume() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_totalsalevolume() const {
  return _internal_has_totalsalevolume();
}
inline void ShiftEndInventory::clear_totalsalevolume() {
  totalsalevolume_ = 0;
  _has_bits_[0] &= ~0x00400000u;
}
inline double ShiftEndInventory::_internal_totalsalevolume() const {
  return totalsalevolume_;
}
inline double ShiftEndInventory::totalsalevolume() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.totalSaleVolume)
  return _internal_totalsalevolume();
}
inline void ShiftEndInventory::_internal_set_totalsalevolume(double value) {
  _has_bits_[0] |= 0x00400000u;
  totalsalevolume_ = value;
}
inline void ShiftEndInventory::set_totalsalevolume(double value) {
  _internal_set_totalsalevolume(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.totalSaleVolume)
}

// optional uint32 inventoryUid = 25;
inline bool ShiftEndInventory::_internal_has_inventoryuid() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_inventoryuid() const {
  return _internal_has_inventoryuid();
}
inline void ShiftEndInventory::clear_inventoryuid() {
  inventoryuid_ = 0u;
  _has_bits_[0] &= ~0x01000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_inventoryuid() const {
  return inventoryuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::inventoryuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.inventoryUid)
  return _internal_inventoryuid();
}
inline void ShiftEndInventory::_internal_set_inventoryuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x01000000u;
  inventoryuid_ = value;
}
inline void ShiftEndInventory::set_inventoryuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_inventoryuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.inventoryUid)
}

// optional uint32 tankStatus = 26;
inline bool ShiftEndInventory::_internal_has_tankstatus() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_tankstatus() const {
  return _internal_has_tankstatus();
}
inline void ShiftEndInventory::clear_tankstatus() {
  tankstatus_ = 0u;
  _has_bits_[0] &= ~0x02000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_tankstatus() const {
  return tankstatus_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::tankstatus() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.tankStatus)
  return _internal_tankstatus();
}
inline void ShiftEndInventory::_internal_set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x02000000u;
  tankstatus_ = value;
}
inline void ShiftEndInventory::set_tankstatus(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankstatus(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.tankStatus)
}

// required uint32 status = 27;
inline bool ShiftEndInventory::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool ShiftEndInventory::has_status() const {
  return _internal_has_status();
}
inline void ShiftEndInventory::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x04000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ShiftEndInventory::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.ShiftEndInventory.status)
  return _internal_status();
}
inline void ShiftEndInventory::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x04000000u;
  status_ = value;
}
inline void ShiftEndInventory::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.ShiftEndInventory.status)
}

// -------------------------------------------------------------------

// PumpControl

// required uint32 pumpUid = 1;
inline bool PumpControl::_internal_has_pumpuid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PumpControl::has_pumpuid() const {
  return _internal_has_pumpuid();
}
inline void PumpControl::clear_pumpuid() {
  pumpuid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_pumpuid() const {
  return pumpuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::pumpuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.pumpUid)
  return _internal_pumpuid();
}
inline void PumpControl::_internal_set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  pumpuid_ = value;
}
inline void PumpControl::set_pumpuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.pumpUid)
}

// required uint32 nozzleId = 2;
inline bool PumpControl::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PumpControl::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void PumpControl::clear_nozzleid() {
  nozzleid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.nozzleId)
  return _internal_nozzleid();
}
inline void PumpControl::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  nozzleid_ = value;
}
inline void PumpControl::set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.nozzleId)
}

// required uint32 controlId = 3;
inline bool PumpControl::_internal_has_controlid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PumpControl::has_controlid() const {
  return _internal_has_controlid();
}
inline void PumpControl::clear_controlid() {
  controlid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_controlid() const {
  return controlid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::controlid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.controlId)
  return _internal_controlid();
}
inline void PumpControl::_internal_set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  controlid_ = value;
}
inline void PumpControl::set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controlid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.controlId)
}

// optional uint32 presetType = 4;
inline bool PumpControl::_internal_has_presettype() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PumpControl::has_presettype() const {
  return _internal_has_presettype();
}
inline void PumpControl::clear_presettype() {
  presettype_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_presettype() const {
  return presettype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::presettype() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.presetType)
  return _internal_presettype();
}
inline void PumpControl::_internal_set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  presettype_ = value;
}
inline void PumpControl::set_presettype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_presettype(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.presetType)
}

// optional float presetValue = 5;
inline bool PumpControl::_internal_has_presetvalue() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PumpControl::has_presetvalue() const {
  return _internal_has_presetvalue();
}
inline void PumpControl::clear_presetvalue() {
  presetvalue_ = 0;
  _has_bits_[0] &= ~0x00000020u;
}
inline float PumpControl::_internal_presetvalue() const {
  return presetvalue_;
}
inline float PumpControl::presetvalue() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.presetValue)
  return _internal_presetvalue();
}
inline void PumpControl::_internal_set_presetvalue(float value) {
  _has_bits_[0] |= 0x00000020u;
  presetvalue_ = value;
}
inline void PumpControl::set_presetvalue(float value) {
  _internal_set_presetvalue(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.presetValue)
}

// optional uint32 presetMop = 6;
inline bool PumpControl::_internal_has_presetmop() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool PumpControl::has_presetmop() const {
  return _internal_has_presetmop();
}
inline void PumpControl::clear_presetmop() {
  presetmop_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_presetmop() const {
  return presetmop_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::presetmop() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.presetMop)
  return _internal_presetmop();
}
inline void PumpControl::_internal_set_presetmop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  presetmop_ = value;
}
inline void PumpControl::set_presetmop(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_presetmop(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.presetMop)
}

// optional uint32 pumpMode = 7;
inline bool PumpControl::_internal_has_pumpmode() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool PumpControl::has_pumpmode() const {
  return _internal_has_pumpmode();
}
inline void PumpControl::clear_pumpmode() {
  pumpmode_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::_internal_pumpmode() const {
  return pumpmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PumpControl::pumpmode() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.pumpMode)
  return _internal_pumpmode();
}
inline void PumpControl::_internal_set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  pumpmode_ = value;
}
inline void PumpControl::set_pumpmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_pumpmode(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.pumpMode)
}

// optional string presetRefId = 8;
inline bool PumpControl::_internal_has_presetrefid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PumpControl::has_presetrefid() const {
  return _internal_has_presetrefid();
}
inline void PumpControl::clear_presetrefid() {
  presetrefid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PumpControl::presetrefid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PumpControl.presetRefId)
  return _internal_presetrefid();
}
inline void PumpControl::set_presetrefid(const std::string& value) {
  _internal_set_presetrefid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PumpControl.presetRefId)
}
inline std::string* PumpControl::mutable_presetrefid() {
  // @@protoc_insertion_point(field_mutable:fccboscom.PumpControl.presetRefId)
  return _internal_mutable_presetrefid();
}
inline const std::string& PumpControl::_internal_presetrefid() const {
  return presetrefid_.Get();
}
inline void PumpControl::_internal_set_presetrefid(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  presetrefid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PumpControl::set_presetrefid(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  presetrefid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.PumpControl.presetRefId)
}
inline void PumpControl::set_presetrefid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  presetrefid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.PumpControl.presetRefId)
}
inline void PumpControl::set_presetrefid(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  presetrefid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.PumpControl.presetRefId)
}
inline std::string* PumpControl::_internal_mutable_presetrefid() {
  _has_bits_[0] |= 0x00000001u;
  return presetrefid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PumpControl::release_presetrefid() {
  // @@protoc_insertion_point(field_release:fccboscom.PumpControl.presetRefId)
  if (!_internal_has_presetrefid()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return presetrefid_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PumpControl::set_allocated_presetrefid(std::string* presetrefid) {
  if (presetrefid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  presetrefid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), presetrefid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.PumpControl.presetRefId)
}
inline std::string* PumpControl::unsafe_arena_release_presetrefid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.PumpControl.presetRefId)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return presetrefid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PumpControl::unsafe_arena_set_allocated_presetrefid(
    std::string* presetrefid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (presetrefid != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  presetrefid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      presetrefid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.PumpControl.presetRefId)
}

// -------------------------------------------------------------------

// TankControl

// required uint32 tankUid = 1;
inline bool TankControl::_internal_has_tankuid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TankControl::has_tankuid() const {
  return _internal_has_tankuid();
}
inline void TankControl::clear_tankuid() {
  tankuid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankControl::_internal_tankuid() const {
  return tankuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankControl::tankuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankControl.tankUid)
  return _internal_tankuid();
}
inline void TankControl::_internal_set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  tankuid_ = value;
}
inline void TankControl::set_tankuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_tankuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankControl.tankUid)
}

// required uint32 controlId = 2;
inline bool TankControl::_internal_has_controlid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TankControl::has_controlid() const {
  return _internal_has_controlid();
}
inline void TankControl::clear_controlid() {
  controlid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankControl::_internal_controlid() const {
  return controlid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TankControl::controlid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TankControl.controlId)
  return _internal_controlid();
}
inline void TankControl::_internal_set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  controlid_ = value;
}
inline void TankControl::set_controlid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_controlid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TankControl.controlId)
}

// -------------------------------------------------------------------

// ProductPriceChange

// required uint32 priceIdentifier = 1;
inline bool ProductPriceChange::_internal_has_priceidentifier() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool ProductPriceChange::has_priceidentifier() const {
  return _internal_has_priceidentifier();
}
inline void ProductPriceChange::clear_priceidentifier() {
  priceidentifier_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::_internal_priceidentifier() const {
  return priceidentifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::priceidentifier() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.priceIdentifier)
  return _internal_priceidentifier();
}
inline void ProductPriceChange::_internal_set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  priceidentifier_ = value;
}
inline void ProductPriceChange::set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priceidentifier(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.priceIdentifier)
}

// required uint32 gradeUid = 2;
inline bool ProductPriceChange::_internal_has_gradeuid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool ProductPriceChange::has_gradeuid() const {
  return _internal_has_gradeuid();
}
inline void ProductPriceChange::clear_gradeuid() {
  gradeuid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::_internal_gradeuid() const {
  return gradeuid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::gradeuid() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.gradeUid)
  return _internal_gradeuid();
}
inline void ProductPriceChange::_internal_set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  gradeuid_ = value;
}
inline void ProductPriceChange::set_gradeuid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_gradeuid(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.gradeUid)
}

// required float gradeRate = 3;
inline bool ProductPriceChange::_internal_has_graderate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool ProductPriceChange::has_graderate() const {
  return _internal_has_graderate();
}
inline void ProductPriceChange::clear_graderate() {
  graderate_ = 0;
  _has_bits_[0] &= ~0x00000080u;
}
inline float ProductPriceChange::_internal_graderate() const {
  return graderate_;
}
inline float ProductPriceChange::graderate() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.gradeRate)
  return _internal_graderate();
}
inline void ProductPriceChange::_internal_set_graderate(float value) {
  _has_bits_[0] |= 0x00000080u;
  graderate_ = value;
}
inline void ProductPriceChange::set_graderate(float value) {
  _internal_set_graderate(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.gradeRate)
}

// required string effectiveTime = 4;
inline bool ProductPriceChange::_internal_has_effectivetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool ProductPriceChange::has_effectivetime() const {
  return _internal_has_effectivetime();
}
inline void ProductPriceChange::clear_effectivetime() {
  effectivetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& ProductPriceChange::effectivetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.effectiveTime)
  return _internal_effectivetime();
}
inline void ProductPriceChange::set_effectivetime(const std::string& value) {
  _internal_set_effectivetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.effectiveTime)
}
inline std::string* ProductPriceChange::mutable_effectivetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ProductPriceChange.effectiveTime)
  return _internal_mutable_effectivetime();
}
inline const std::string& ProductPriceChange::_internal_effectivetime() const {
  return effectivetime_.Get();
}
inline void ProductPriceChange::_internal_set_effectivetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProductPriceChange::set_effectivetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ProductPriceChange.effectiveTime)
}
inline void ProductPriceChange::set_effectivetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ProductPriceChange.effectiveTime)
}
inline void ProductPriceChange::set_effectivetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ProductPriceChange.effectiveTime)
}
inline std::string* ProductPriceChange::_internal_mutable_effectivetime() {
  _has_bits_[0] |= 0x00000001u;
  return effectivetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProductPriceChange::release_effectivetime() {
  // @@protoc_insertion_point(field_release:fccboscom.ProductPriceChange.effectiveTime)
  if (!_internal_has_effectivetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return effectivetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductPriceChange::set_allocated_effectivetime(std::string* effectivetime) {
  if (effectivetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effectivetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ProductPriceChange.effectiveTime)
}
inline std::string* ProductPriceChange::unsafe_arena_release_effectivetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ProductPriceChange.effectiveTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return effectivetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProductPriceChange::unsafe_arena_set_allocated_effectivetime(
    std::string* effectivetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (effectivetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effectivetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      effectivetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ProductPriceChange.effectiveTime)
}

// optional string updateTime = 5;
inline bool ProductPriceChange::_internal_has_updatetime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool ProductPriceChange::has_updatetime() const {
  return _internal_has_updatetime();
}
inline void ProductPriceChange::clear_updatetime() {
  updatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& ProductPriceChange::updatetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.updateTime)
  return _internal_updatetime();
}
inline void ProductPriceChange::set_updatetime(const std::string& value) {
  _internal_set_updatetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.updateTime)
}
inline std::string* ProductPriceChange::mutable_updatetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ProductPriceChange.updateTime)
  return _internal_mutable_updatetime();
}
inline const std::string& ProductPriceChange::_internal_updatetime() const {
  return updatetime_.Get();
}
inline void ProductPriceChange::_internal_set_updatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProductPriceChange::set_updatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  updatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ProductPriceChange.updateTime)
}
inline void ProductPriceChange::set_updatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ProductPriceChange.updateTime)
}
inline void ProductPriceChange::set_updatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  updatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ProductPriceChange.updateTime)
}
inline std::string* ProductPriceChange::_internal_mutable_updatetime() {
  _has_bits_[0] |= 0x00000002u;
  return updatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProductPriceChange::release_updatetime() {
  // @@protoc_insertion_point(field_release:fccboscom.ProductPriceChange.updateTime)
  if (!_internal_has_updatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return updatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductPriceChange::set_allocated_updatetime(std::string* updatetime) {
  if (updatetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  updatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ProductPriceChange.updateTime)
}
inline std::string* ProductPriceChange::unsafe_arena_release_updatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ProductPriceChange.updateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return updatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProductPriceChange::unsafe_arena_set_allocated_updatetime(
    std::string* updatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updatetime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  updatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ProductPriceChange.updateTime)
}

// optional uint32 updateFlag = 6;
inline bool ProductPriceChange::_internal_has_updateflag() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool ProductPriceChange::has_updateflag() const {
  return _internal_has_updateflag();
}
inline void ProductPriceChange::clear_updateflag() {
  updateflag_ = 0u;
  _has_bits_[0] &= ~0x00000100u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::_internal_updateflag() const {
  return updateflag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::updateflag() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.updateFlag)
  return _internal_updateflag();
}
inline void ProductPriceChange::_internal_set_updateflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000100u;
  updateflag_ = value;
}
inline void ProductPriceChange::set_updateflag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_updateflag(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.updateFlag)
}

// optional string updateBy = 7;
inline bool ProductPriceChange::_internal_has_updateby() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool ProductPriceChange::has_updateby() const {
  return _internal_has_updateby();
}
inline void ProductPriceChange::clear_updateby() {
  updateby_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& ProductPriceChange::updateby() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.updateBy)
  return _internal_updateby();
}
inline void ProductPriceChange::set_updateby(const std::string& value) {
  _internal_set_updateby(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.updateBy)
}
inline std::string* ProductPriceChange::mutable_updateby() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ProductPriceChange.updateBy)
  return _internal_mutable_updateby();
}
inline const std::string& ProductPriceChange::_internal_updateby() const {
  return updateby_.Get();
}
inline void ProductPriceChange::_internal_set_updateby(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProductPriceChange::set_updateby(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  updateby_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ProductPriceChange.updateBy)
}
inline void ProductPriceChange::set_updateby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ProductPriceChange.updateBy)
}
inline void ProductPriceChange::set_updateby(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ProductPriceChange.updateBy)
}
inline std::string* ProductPriceChange::_internal_mutable_updateby() {
  _has_bits_[0] |= 0x00000004u;
  return updateby_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProductPriceChange::release_updateby() {
  // @@protoc_insertion_point(field_release:fccboscom.ProductPriceChange.updateBy)
  if (!_internal_has_updateby()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return updateby_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductPriceChange::set_allocated_updateby(std::string* updateby) {
  if (updateby != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  updateby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updateby,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ProductPriceChange.updateBy)
}
inline std::string* ProductPriceChange::unsafe_arena_release_updateby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ProductPriceChange.updateBy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return updateby_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProductPriceChange::unsafe_arena_set_allocated_updateby(
    std::string* updateby) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updateby != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  updateby_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updateby, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ProductPriceChange.updateBy)
}

// optional string effectiveType = 8;
inline bool ProductPriceChange::_internal_has_effectivetype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool ProductPriceChange::has_effectivetype() const {
  return _internal_has_effectivetype();
}
inline void ProductPriceChange::clear_effectivetype() {
  effectivetype_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& ProductPriceChange::effectivetype() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.effectiveType)
  return _internal_effectivetype();
}
inline void ProductPriceChange::set_effectivetype(const std::string& value) {
  _internal_set_effectivetype(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.effectiveType)
}
inline std::string* ProductPriceChange::mutable_effectivetype() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ProductPriceChange.effectiveType)
  return _internal_mutable_effectivetype();
}
inline const std::string& ProductPriceChange::_internal_effectivetype() const {
  return effectivetype_.Get();
}
inline void ProductPriceChange::_internal_set_effectivetype(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  effectivetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProductPriceChange::set_effectivetype(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  effectivetype_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ProductPriceChange.effectiveType)
}
inline void ProductPriceChange::set_effectivetype(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  effectivetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ProductPriceChange.effectiveType)
}
inline void ProductPriceChange::set_effectivetype(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  effectivetype_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ProductPriceChange.effectiveType)
}
inline std::string* ProductPriceChange::_internal_mutable_effectivetype() {
  _has_bits_[0] |= 0x00000008u;
  return effectivetype_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProductPriceChange::release_effectivetype() {
  // @@protoc_insertion_point(field_release:fccboscom.ProductPriceChange.effectiveType)
  if (!_internal_has_effectivetype()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return effectivetype_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductPriceChange::set_allocated_effectivetype(std::string* effectivetype) {
  if (effectivetype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  effectivetype_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivetype,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ProductPriceChange.effectiveType)
}
inline std::string* ProductPriceChange::unsafe_arena_release_effectivetype() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ProductPriceChange.effectiveType)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return effectivetype_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProductPriceChange::unsafe_arena_set_allocated_effectivetype(
    std::string* effectivetype) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (effectivetype != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  effectivetype_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      effectivetype, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ProductPriceChange.effectiveType)
}

// required string endDatetime = 9;
inline bool ProductPriceChange::_internal_has_enddatetime() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool ProductPriceChange::has_enddatetime() const {
  return _internal_has_enddatetime();
}
inline void ProductPriceChange::clear_enddatetime() {
  enddatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& ProductPriceChange::enddatetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.endDatetime)
  return _internal_enddatetime();
}
inline void ProductPriceChange::set_enddatetime(const std::string& value) {
  _internal_set_enddatetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.endDatetime)
}
inline std::string* ProductPriceChange::mutable_enddatetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.ProductPriceChange.endDatetime)
  return _internal_mutable_enddatetime();
}
inline const std::string& ProductPriceChange::_internal_enddatetime() const {
  return enddatetime_.Get();
}
inline void ProductPriceChange::_internal_set_enddatetime(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void ProductPriceChange::set_enddatetime(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  enddatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.ProductPriceChange.endDatetime)
}
inline void ProductPriceChange::set_enddatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.ProductPriceChange.endDatetime)
}
inline void ProductPriceChange::set_enddatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  enddatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.ProductPriceChange.endDatetime)
}
inline std::string* ProductPriceChange::_internal_mutable_enddatetime() {
  _has_bits_[0] |= 0x00000010u;
  return enddatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* ProductPriceChange::release_enddatetime() {
  // @@protoc_insertion_point(field_release:fccboscom.ProductPriceChange.endDatetime)
  if (!_internal_has_enddatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return enddatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void ProductPriceChange::set_allocated_enddatetime(std::string* enddatetime) {
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  enddatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), enddatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.ProductPriceChange.endDatetime)
}
inline std::string* ProductPriceChange::unsafe_arena_release_enddatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.ProductPriceChange.endDatetime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return enddatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void ProductPriceChange::unsafe_arena_set_allocated_enddatetime(
    std::string* enddatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (enddatetime != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  enddatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      enddatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.ProductPriceChange.endDatetime)
}

// optional uint32 flag = 10;
inline bool ProductPriceChange::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool ProductPriceChange::has_flag() const {
  return _internal_has_flag();
}
inline void ProductPriceChange::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000200u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 ProductPriceChange::flag() const {
  // @@protoc_insertion_point(field_get:fccboscom.ProductPriceChange.flag)
  return _internal_flag();
}
inline void ProductPriceChange::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000200u;
  flag_ = value;
}
inline void ProductPriceChange::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:fccboscom.ProductPriceChange.flag)
}

// -------------------------------------------------------------------

// PriceChangeStatus

// required uint32 priceIdentifier = 1;
inline bool PriceChangeStatus::_internal_has_priceidentifier() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_priceidentifier() const {
  return _internal_has_priceidentifier();
}
inline void PriceChangeStatus::clear_priceidentifier() {
  priceidentifier_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::_internal_priceidentifier() const {
  return priceidentifier_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::priceidentifier() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.priceIdentifier)
  return _internal_priceidentifier();
}
inline void PriceChangeStatus::_internal_set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  priceidentifier_ = value;
}
inline void PriceChangeStatus::set_priceidentifier(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_priceidentifier(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.priceIdentifier)
}

// required uint32 productId = 2;
inline bool PriceChangeStatus::_internal_has_productid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_productid() const {
  return _internal_has_productid();
}
inline void PriceChangeStatus::clear_productid() {
  productid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::_internal_productid() const {
  return productid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::productid() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.productId)
  return _internal_productid();
}
inline void PriceChangeStatus::_internal_set_productid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  productid_ = value;
}
inline void PriceChangeStatus::set_productid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_productid(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.productId)
}

// required uint32 status = 3;
inline bool PriceChangeStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_status() const {
  return _internal_has_status();
}
inline void PriceChangeStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.status)
  return _internal_status();
}
inline void PriceChangeStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  status_ = value;
}
inline void PriceChangeStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.status)
}

// required float productNewPrice = 4;
inline bool PriceChangeStatus::_internal_has_productnewprice() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_productnewprice() const {
  return _internal_has_productnewprice();
}
inline void PriceChangeStatus::clear_productnewprice() {
  productnewprice_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline float PriceChangeStatus::_internal_productnewprice() const {
  return productnewprice_;
}
inline float PriceChangeStatus::productnewprice() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.productNewPrice)
  return _internal_productnewprice();
}
inline void PriceChangeStatus::_internal_set_productnewprice(float value) {
  _has_bits_[0] |= 0x00000010u;
  productnewprice_ = value;
}
inline void PriceChangeStatus::set_productnewprice(float value) {
  _internal_set_productnewprice(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.productNewPrice)
}

// required string effectiveTime = 5;
inline bool PriceChangeStatus::_internal_has_effectivetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_effectivetime() const {
  return _internal_has_effectivetime();
}
inline void PriceChangeStatus::clear_effectivetime() {
  effectivetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PriceChangeStatus::effectivetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.effectiveTime)
  return _internal_effectivetime();
}
inline void PriceChangeStatus::set_effectivetime(const std::string& value) {
  _internal_set_effectivetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.effectiveTime)
}
inline std::string* PriceChangeStatus::mutable_effectivetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.PriceChangeStatus.effectiveTime)
  return _internal_mutable_effectivetime();
}
inline const std::string& PriceChangeStatus::_internal_effectivetime() const {
  return effectivetime_.Get();
}
inline void PriceChangeStatus::_internal_set_effectivetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PriceChangeStatus::set_effectivetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.PriceChangeStatus.effectiveTime)
}
inline void PriceChangeStatus::set_effectivetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.PriceChangeStatus.effectiveTime)
}
inline void PriceChangeStatus::set_effectivetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  effectivetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.PriceChangeStatus.effectiveTime)
}
inline std::string* PriceChangeStatus::_internal_mutable_effectivetime() {
  _has_bits_[0] |= 0x00000001u;
  return effectivetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PriceChangeStatus::release_effectivetime() {
  // @@protoc_insertion_point(field_release:fccboscom.PriceChangeStatus.effectiveTime)
  if (!_internal_has_effectivetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return effectivetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PriceChangeStatus::set_allocated_effectivetime(std::string* effectivetime) {
  if (effectivetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effectivetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), effectivetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.PriceChangeStatus.effectiveTime)
}
inline std::string* PriceChangeStatus::unsafe_arena_release_effectivetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.PriceChangeStatus.effectiveTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return effectivetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PriceChangeStatus::unsafe_arena_set_allocated_effectivetime(
    std::string* effectivetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (effectivetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  effectivetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      effectivetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.PriceChangeStatus.effectiveTime)
}

// optional uint32 flag = 6;
inline bool PriceChangeStatus::_internal_has_flag() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool PriceChangeStatus::has_flag() const {
  return _internal_has_flag();
}
inline void PriceChangeStatus::clear_flag() {
  flag_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::_internal_flag() const {
  return flag_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 PriceChangeStatus::flag() const {
  // @@protoc_insertion_point(field_get:fccboscom.PriceChangeStatus.flag)
  return _internal_flag();
}
inline void PriceChangeStatus::_internal_set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  flag_ = value;
}
inline void PriceChangeStatus::set_flag(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_flag(value);
  // @@protoc_insertion_point(field_set:fccboscom.PriceChangeStatus.flag)
}

// -------------------------------------------------------------------

// OperationControl

// required uint32 operationControlId = 1;
inline bool OperationControl::_internal_has_operationcontrolid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OperationControl::has_operationcontrolid() const {
  return _internal_has_operationcontrolid();
}
inline void OperationControl::clear_operationcontrolid() {
  operationcontrolid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationControl::_internal_operationcontrolid() const {
  return operationcontrolid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationControl::operationcontrolid() const {
  // @@protoc_insertion_point(field_get:fccboscom.OperationControl.operationControlId)
  return _internal_operationcontrolid();
}
inline void OperationControl::_internal_set_operationcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  operationcontrolid_ = value;
}
inline void OperationControl::set_operationcontrolid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operationcontrolid(value);
  // @@protoc_insertion_point(field_set:fccboscom.OperationControl.operationControlId)
}

// optional uint32 operationMode = 2;
inline bool OperationControl::_internal_has_operationmode() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OperationControl::has_operationmode() const {
  return _internal_has_operationmode();
}
inline void OperationControl::clear_operationmode() {
  operationmode_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationControl::_internal_operationmode() const {
  return operationmode_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OperationControl::operationmode() const {
  // @@protoc_insertion_point(field_get:fccboscom.OperationControl.operationMode)
  return _internal_operationmode();
}
inline void OperationControl::_internal_set_operationmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  operationmode_ = value;
}
inline void OperationControl::set_operationmode(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operationmode(value);
  // @@protoc_insertion_point(field_set:fccboscom.OperationControl.operationMode)
}

// optional string time = 3;
inline bool OperationControl::_internal_has_time() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OperationControl::has_time() const {
  return _internal_has_time();
}
inline void OperationControl::clear_time() {
  time_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& OperationControl::time() const {
  // @@protoc_insertion_point(field_get:fccboscom.OperationControl.time)
  return _internal_time();
}
inline void OperationControl::set_time(const std::string& value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:fccboscom.OperationControl.time)
}
inline std::string* OperationControl::mutable_time() {
  // @@protoc_insertion_point(field_mutable:fccboscom.OperationControl.time)
  return _internal_mutable_time();
}
inline const std::string& OperationControl::_internal_time() const {
  return time_.Get();
}
inline void OperationControl::_internal_set_time(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperationControl::set_time(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  time_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.OperationControl.time)
}
inline void OperationControl::set_time(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.OperationControl.time)
}
inline void OperationControl::set_time(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  time_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.OperationControl.time)
}
inline std::string* OperationControl::_internal_mutable_time() {
  _has_bits_[0] |= 0x00000001u;
  return time_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperationControl::release_time() {
  // @@protoc_insertion_point(field_release:fccboscom.OperationControl.time)
  if (!_internal_has_time()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return time_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationControl::set_allocated_time(std::string* time) {
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), time,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.OperationControl.time)
}
inline std::string* OperationControl::unsafe_arena_release_time() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.OperationControl.time)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return time_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OperationControl::unsafe_arena_set_allocated_time(
    std::string* time) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (time != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  time_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      time, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.OperationControl.time)
}

// optional string configKey = 4;
inline bool OperationControl::_internal_has_configkey() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OperationControl::has_configkey() const {
  return _internal_has_configkey();
}
inline void OperationControl::clear_configkey() {
  configkey_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& OperationControl::configkey() const {
  // @@protoc_insertion_point(field_get:fccboscom.OperationControl.configKey)
  return _internal_configkey();
}
inline void OperationControl::set_configkey(const std::string& value) {
  _internal_set_configkey(value);
  // @@protoc_insertion_point(field_set:fccboscom.OperationControl.configKey)
}
inline std::string* OperationControl::mutable_configkey() {
  // @@protoc_insertion_point(field_mutable:fccboscom.OperationControl.configKey)
  return _internal_mutable_configkey();
}
inline const std::string& OperationControl::_internal_configkey() const {
  return configkey_.Get();
}
inline void OperationControl::_internal_set_configkey(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  configkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperationControl::set_configkey(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  configkey_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.OperationControl.configKey)
}
inline void OperationControl::set_configkey(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  configkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.OperationControl.configKey)
}
inline void OperationControl::set_configkey(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  configkey_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.OperationControl.configKey)
}
inline std::string* OperationControl::_internal_mutable_configkey() {
  _has_bits_[0] |= 0x00000002u;
  return configkey_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperationControl::release_configkey() {
  // @@protoc_insertion_point(field_release:fccboscom.OperationControl.configKey)
  if (!_internal_has_configkey()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return configkey_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationControl::set_allocated_configkey(std::string* configkey) {
  if (configkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  configkey_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configkey,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.OperationControl.configKey)
}
inline std::string* OperationControl::unsafe_arena_release_configkey() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.OperationControl.configKey)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return configkey_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OperationControl::unsafe_arena_set_allocated_configkey(
    std::string* configkey) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (configkey != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  configkey_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      configkey, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.OperationControl.configKey)
}

// optional string configValue = 5;
inline bool OperationControl::_internal_has_configvalue() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OperationControl::has_configvalue() const {
  return _internal_has_configvalue();
}
inline void OperationControl::clear_configvalue() {
  configvalue_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& OperationControl::configvalue() const {
  // @@protoc_insertion_point(field_get:fccboscom.OperationControl.configValue)
  return _internal_configvalue();
}
inline void OperationControl::set_configvalue(const std::string& value) {
  _internal_set_configvalue(value);
  // @@protoc_insertion_point(field_set:fccboscom.OperationControl.configValue)
}
inline std::string* OperationControl::mutable_configvalue() {
  // @@protoc_insertion_point(field_mutable:fccboscom.OperationControl.configValue)
  return _internal_mutable_configvalue();
}
inline const std::string& OperationControl::_internal_configvalue() const {
  return configvalue_.Get();
}
inline void OperationControl::_internal_set_configvalue(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  configvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void OperationControl::set_configvalue(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  configvalue_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.OperationControl.configValue)
}
inline void OperationControl::set_configvalue(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  configvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.OperationControl.configValue)
}
inline void OperationControl::set_configvalue(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  configvalue_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.OperationControl.configValue)
}
inline std::string* OperationControl::_internal_mutable_configvalue() {
  _has_bits_[0] |= 0x00000004u;
  return configvalue_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* OperationControl::release_configvalue() {
  // @@protoc_insertion_point(field_release:fccboscom.OperationControl.configValue)
  if (!_internal_has_configvalue()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return configvalue_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void OperationControl::set_allocated_configvalue(std::string* configvalue) {
  if (configvalue != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  configvalue_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), configvalue,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.OperationControl.configValue)
}
inline std::string* OperationControl::unsafe_arena_release_configvalue() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.OperationControl.configValue)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return configvalue_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void OperationControl::unsafe_arena_set_allocated_configvalue(
    std::string* configvalue) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (configvalue != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  configvalue_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      configvalue, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.OperationControl.configValue)
}

// -------------------------------------------------------------------

// TrxnMopUpdate

// required uint32 trxnId = 1;
inline bool TrxnMopUpdate::_internal_has_trxnid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TrxnMopUpdate::has_trxnid() const {
  return _internal_has_trxnid();
}
inline void TrxnMopUpdate::clear_trxnid() {
  trxnid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxnMopUpdate::_internal_trxnid() const {
  return trxnid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxnMopUpdate::trxnid() const {
  // @@protoc_insertion_point(field_get:fccboscom.TrxnMopUpdate.trxnId)
  return _internal_trxnid();
}
inline void TrxnMopUpdate::_internal_set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  trxnid_ = value;
}
inline void TrxnMopUpdate::set_trxnid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trxnid(value);
  // @@protoc_insertion_point(field_set:fccboscom.TrxnMopUpdate.trxnId)
}

// required uint32 mopType = 2;
inline bool TrxnMopUpdate::_internal_has_moptype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TrxnMopUpdate::has_moptype() const {
  return _internal_has_moptype();
}
inline void TrxnMopUpdate::clear_moptype() {
  moptype_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxnMopUpdate::_internal_moptype() const {
  return moptype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 TrxnMopUpdate::moptype() const {
  // @@protoc_insertion_point(field_get:fccboscom.TrxnMopUpdate.mopType)
  return _internal_moptype();
}
inline void TrxnMopUpdate::_internal_set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  moptype_ = value;
}
inline void TrxnMopUpdate::set_moptype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_moptype(value);
  // @@protoc_insertion_point(field_set:fccboscom.TrxnMopUpdate.mopType)
}

// required string updateDate = 3;
inline bool TrxnMopUpdate::_internal_has_updatedate() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TrxnMopUpdate::has_updatedate() const {
  return _internal_has_updatedate();
}
inline void TrxnMopUpdate::clear_updatedate() {
  updatedate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TrxnMopUpdate::updatedate() const {
  // @@protoc_insertion_point(field_get:fccboscom.TrxnMopUpdate.updateDate)
  return _internal_updatedate();
}
inline void TrxnMopUpdate::set_updatedate(const std::string& value) {
  _internal_set_updatedate(value);
  // @@protoc_insertion_point(field_set:fccboscom.TrxnMopUpdate.updateDate)
}
inline std::string* TrxnMopUpdate::mutable_updatedate() {
  // @@protoc_insertion_point(field_mutable:fccboscom.TrxnMopUpdate.updateDate)
  return _internal_mutable_updatedate();
}
inline const std::string& TrxnMopUpdate::_internal_updatedate() const {
  return updatedate_.Get();
}
inline void TrxnMopUpdate::_internal_set_updatedate(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  updatedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrxnMopUpdate::set_updatedate(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  updatedate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.TrxnMopUpdate.updateDate)
}
inline void TrxnMopUpdate::set_updatedate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  updatedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.TrxnMopUpdate.updateDate)
}
inline void TrxnMopUpdate::set_updatedate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  updatedate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.TrxnMopUpdate.updateDate)
}
inline std::string* TrxnMopUpdate::_internal_mutable_updatedate() {
  _has_bits_[0] |= 0x00000001u;
  return updatedate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrxnMopUpdate::release_updatedate() {
  // @@protoc_insertion_point(field_release:fccboscom.TrxnMopUpdate.updateDate)
  if (!_internal_has_updatedate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return updatedate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrxnMopUpdate::set_allocated_updatedate(std::string* updatedate) {
  if (updatedate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updatedate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updatedate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.TrxnMopUpdate.updateDate)
}
inline std::string* TrxnMopUpdate::unsafe_arena_release_updatedate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.TrxnMopUpdate.updateDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return updatedate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrxnMopUpdate::unsafe_arena_set_allocated_updatedate(
    std::string* updatedate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updatedate != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  updatedate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updatedate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.TrxnMopUpdate.updateDate)
}

// required string updateBy = 4;
inline bool TrxnMopUpdate::_internal_has_updateby() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TrxnMopUpdate::has_updateby() const {
  return _internal_has_updateby();
}
inline void TrxnMopUpdate::clear_updateby() {
  updateby_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TrxnMopUpdate::updateby() const {
  // @@protoc_insertion_point(field_get:fccboscom.TrxnMopUpdate.updateBy)
  return _internal_updateby();
}
inline void TrxnMopUpdate::set_updateby(const std::string& value) {
  _internal_set_updateby(value);
  // @@protoc_insertion_point(field_set:fccboscom.TrxnMopUpdate.updateBy)
}
inline std::string* TrxnMopUpdate::mutable_updateby() {
  // @@protoc_insertion_point(field_mutable:fccboscom.TrxnMopUpdate.updateBy)
  return _internal_mutable_updateby();
}
inline const std::string& TrxnMopUpdate::_internal_updateby() const {
  return updateby_.Get();
}
inline void TrxnMopUpdate::_internal_set_updateby(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void TrxnMopUpdate::set_updateby(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  updateby_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.TrxnMopUpdate.updateBy)
}
inline void TrxnMopUpdate::set_updateby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.TrxnMopUpdate.updateBy)
}
inline void TrxnMopUpdate::set_updateby(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  updateby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.TrxnMopUpdate.updateBy)
}
inline std::string* TrxnMopUpdate::_internal_mutable_updateby() {
  _has_bits_[0] |= 0x00000002u;
  return updateby_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* TrxnMopUpdate::release_updateby() {
  // @@protoc_insertion_point(field_release:fccboscom.TrxnMopUpdate.updateBy)
  if (!_internal_has_updateby()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return updateby_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void TrxnMopUpdate::set_allocated_updateby(std::string* updateby) {
  if (updateby != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  updateby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), updateby,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.TrxnMopUpdate.updateBy)
}
inline std::string* TrxnMopUpdate::unsafe_arena_release_updateby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.TrxnMopUpdate.updateBy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return updateby_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void TrxnMopUpdate::unsafe_arena_set_allocated_updateby(
    std::string* updateby) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (updateby != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  updateby_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      updateby, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.TrxnMopUpdate.updateBy)
}

// -------------------------------------------------------------------

// AlarmAck

// required uint32 recordUid = 1;
inline bool AlarmAck::_internal_has_recorduid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool AlarmAck::has_recorduid() const {
  return _internal_has_recorduid();
}
inline void AlarmAck::clear_recorduid() {
  recorduid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmAck::_internal_recorduid() const {
  return recorduid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 AlarmAck::recorduid() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmAck.recordUid)
  return _internal_recorduid();
}
inline void AlarmAck::_internal_set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  recorduid_ = value;
}
inline void AlarmAck::set_recorduid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recorduid(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmAck.recordUid)
}

// required string ackBy = 2;
inline bool AlarmAck::_internal_has_ackby() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool AlarmAck::has_ackby() const {
  return _internal_has_ackby();
}
inline void AlarmAck::clear_ackby() {
  ackby_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& AlarmAck::ackby() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmAck.ackBy)
  return _internal_ackby();
}
inline void AlarmAck::set_ackby(const std::string& value) {
  _internal_set_ackby(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmAck.ackBy)
}
inline std::string* AlarmAck::mutable_ackby() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmAck.ackBy)
  return _internal_mutable_ackby();
}
inline const std::string& AlarmAck::_internal_ackby() const {
  return ackby_.Get();
}
inline void AlarmAck::_internal_set_ackby(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  ackby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmAck::set_ackby(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  ackby_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmAck.ackBy)
}
inline void AlarmAck::set_ackby(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  ackby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmAck.ackBy)
}
inline void AlarmAck::set_ackby(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  ackby_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmAck.ackBy)
}
inline std::string* AlarmAck::_internal_mutable_ackby() {
  _has_bits_[0] |= 0x00000001u;
  return ackby_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmAck::release_ackby() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmAck.ackBy)
  if (!_internal_has_ackby()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return ackby_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmAck::set_allocated_ackby(std::string* ackby) {
  if (ackby != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ackby_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ackby,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmAck.ackBy)
}
inline std::string* AlarmAck::unsafe_arena_release_ackby() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmAck.ackBy)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return ackby_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmAck::unsafe_arena_set_allocated_ackby(
    std::string* ackby) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (ackby != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  ackby_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      ackby, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmAck.ackBy)
}

// required string ackTime = 3;
inline bool AlarmAck::_internal_has_acktime() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool AlarmAck::has_acktime() const {
  return _internal_has_acktime();
}
inline void AlarmAck::clear_acktime() {
  acktime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& AlarmAck::acktime() const {
  // @@protoc_insertion_point(field_get:fccboscom.AlarmAck.ackTime)
  return _internal_acktime();
}
inline void AlarmAck::set_acktime(const std::string& value) {
  _internal_set_acktime(value);
  // @@protoc_insertion_point(field_set:fccboscom.AlarmAck.ackTime)
}
inline std::string* AlarmAck::mutable_acktime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.AlarmAck.ackTime)
  return _internal_mutable_acktime();
}
inline const std::string& AlarmAck::_internal_acktime() const {
  return acktime_.Get();
}
inline void AlarmAck::_internal_set_acktime(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  acktime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void AlarmAck::set_acktime(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  acktime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.AlarmAck.ackTime)
}
inline void AlarmAck::set_acktime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  acktime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.AlarmAck.ackTime)
}
inline void AlarmAck::set_acktime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  acktime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.AlarmAck.ackTime)
}
inline std::string* AlarmAck::_internal_mutable_acktime() {
  _has_bits_[0] |= 0x00000002u;
  return acktime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* AlarmAck::release_acktime() {
  // @@protoc_insertion_point(field_release:fccboscom.AlarmAck.ackTime)
  if (!_internal_has_acktime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return acktime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void AlarmAck::set_allocated_acktime(std::string* acktime) {
  if (acktime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  acktime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), acktime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.AlarmAck.ackTime)
}
inline std::string* AlarmAck::unsafe_arena_release_acktime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.AlarmAck.ackTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return acktime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void AlarmAck::unsafe_arena_set_allocated_acktime(
    std::string* acktime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (acktime != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  acktime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      acktime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.AlarmAck.ackTime)
}

// -------------------------------------------------------------------

// FccOperation

// required uint32 key = 1;
inline bool FccOperation::_internal_has_key() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FccOperation::has_key() const {
  return _internal_has_key();
}
inline void FccOperation::clear_key() {
  key_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FccOperation::_internal_key() const {
  return key_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FccOperation::key() const {
  // @@protoc_insertion_point(field_get:fccboscom.FccOperation.key)
  return _internal_key();
}
inline void FccOperation::_internal_set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  key_ = value;
}
inline void FccOperation::set_key(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_key(value);
  // @@protoc_insertion_point(field_set:fccboscom.FccOperation.key)
}

// optional string value = 2;
inline bool FccOperation::_internal_has_value() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FccOperation::has_value() const {
  return _internal_has_value();
}
inline void FccOperation::clear_value() {
  value_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FccOperation::value() const {
  // @@protoc_insertion_point(field_get:fccboscom.FccOperation.value)
  return _internal_value();
}
inline void FccOperation::set_value(const std::string& value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:fccboscom.FccOperation.value)
}
inline std::string* FccOperation::mutable_value() {
  // @@protoc_insertion_point(field_mutable:fccboscom.FccOperation.value)
  return _internal_mutable_value();
}
inline const std::string& FccOperation::_internal_value() const {
  return value_.Get();
}
inline void FccOperation::_internal_set_value(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FccOperation::set_value(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.FccOperation.value)
}
inline void FccOperation::set_value(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.FccOperation.value)
}
inline void FccOperation::set_value(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  value_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.FccOperation.value)
}
inline std::string* FccOperation::_internal_mutable_value() {
  _has_bits_[0] |= 0x00000001u;
  return value_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FccOperation::release_value() {
  // @@protoc_insertion_point(field_release:fccboscom.FccOperation.value)
  if (!_internal_has_value()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return value_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FccOperation::set_allocated_value(std::string* value) {
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.FccOperation.value)
}
inline std::string* FccOperation::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.FccOperation.value)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return value_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FccOperation::unsafe_arena_set_allocated_value(
    std::string* value) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (value != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  value_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      value, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.FccOperation.value)
}

// -------------------------------------------------------------------

// BosAck

// required uint32 msgId = 1;
inline bool BosAck::_internal_has_msgid() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BosAck::has_msgid() const {
  return _internal_has_msgid();
}
inline void BosAck::clear_msgid() {
  msgid_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::_internal_msgid() const {
  return msgid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::msgid() const {
  // @@protoc_insertion_point(field_get:fccboscom.BosAck.msgId)
  return _internal_msgid();
}
inline void BosAck::_internal_set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  msgid_ = value;
}
inline void BosAck::set_msgid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_msgid(value);
  // @@protoc_insertion_point(field_set:fccboscom.BosAck.msgId)
}

// required uint32 recId = 2;
inline bool BosAck::_internal_has_recid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BosAck::has_recid() const {
  return _internal_has_recid();
}
inline void BosAck::clear_recid() {
  recid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::_internal_recid() const {
  return recid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::recid() const {
  // @@protoc_insertion_point(field_get:fccboscom.BosAck.recId)
  return _internal_recid();
}
inline void BosAck::_internal_set_recid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  recid_ = value;
}
inline void BosAck::set_recid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_recid(value);
  // @@protoc_insertion_point(field_set:fccboscom.BosAck.recId)
}

// required uint32 operation = 3;
inline bool BosAck::_internal_has_operation() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BosAck::has_operation() const {
  return _internal_has_operation();
}
inline void BosAck::clear_operation() {
  operation_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::_internal_operation() const {
  return operation_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BosAck::operation() const {
  // @@protoc_insertion_point(field_get:fccboscom.BosAck.operation)
  return _internal_operation();
}
inline void BosAck::_internal_set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  operation_ = value;
}
inline void BosAck::set_operation(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:fccboscom.BosAck.operation)
}

// -------------------------------------------------------------------

// HeartBeat

// required uint32 deviceType = 1;
inline bool HeartBeat::_internal_has_devicetype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool HeartBeat::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void HeartBeat::clear_devicetype() {
  devicetype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeartBeat::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeartBeat::devicetype() const {
  // @@protoc_insertion_point(field_get:fccboscom.HeartBeat.deviceType)
  return _internal_devicetype();
}
inline void HeartBeat::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  devicetype_ = value;
}
inline void HeartBeat::set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:fccboscom.HeartBeat.deviceType)
}

// required uint32 deviceId = 2;
inline bool HeartBeat::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool HeartBeat::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void HeartBeat::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeartBeat::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 HeartBeat::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.HeartBeat.deviceId)
  return _internal_deviceid();
}
inline void HeartBeat::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deviceid_ = value;
}
inline void HeartBeat::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.HeartBeat.deviceId)
}

// optional string timestamp = 3;
inline bool HeartBeat::_internal_has_timestamp() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool HeartBeat::has_timestamp() const {
  return _internal_has_timestamp();
}
inline void HeartBeat::clear_timestamp() {
  timestamp_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& HeartBeat::timestamp() const {
  // @@protoc_insertion_point(field_get:fccboscom.HeartBeat.timestamp)
  return _internal_timestamp();
}
inline void HeartBeat::set_timestamp(const std::string& value) {
  _internal_set_timestamp(value);
  // @@protoc_insertion_point(field_set:fccboscom.HeartBeat.timestamp)
}
inline std::string* HeartBeat::mutable_timestamp() {
  // @@protoc_insertion_point(field_mutable:fccboscom.HeartBeat.timestamp)
  return _internal_mutable_timestamp();
}
inline const std::string& HeartBeat::_internal_timestamp() const {
  return timestamp_.Get();
}
inline void HeartBeat::_internal_set_timestamp(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void HeartBeat::set_timestamp(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.HeartBeat.timestamp)
}
inline void HeartBeat::set_timestamp(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.HeartBeat.timestamp)
}
inline void HeartBeat::set_timestamp(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  timestamp_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.HeartBeat.timestamp)
}
inline std::string* HeartBeat::_internal_mutable_timestamp() {
  _has_bits_[0] |= 0x00000001u;
  return timestamp_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* HeartBeat::release_timestamp() {
  // @@protoc_insertion_point(field_release:fccboscom.HeartBeat.timestamp)
  if (!_internal_has_timestamp()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void HeartBeat::set_allocated_timestamp(std::string* timestamp) {
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), timestamp,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.HeartBeat.timestamp)
}
inline std::string* HeartBeat::unsafe_arena_release_timestamp() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.HeartBeat.timestamp)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return timestamp_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void HeartBeat::unsafe_arena_set_allocated_timestamp(
    std::string* timestamp) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (timestamp != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  timestamp_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      timestamp, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.HeartBeat.timestamp)
}

// -------------------------------------------------------------------

// OtherDevice

// required uint32 deviceType = 1;
inline bool OtherDevice::_internal_has_devicetype() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool OtherDevice::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void OtherDevice::clear_devicetype() {
  devicetype_ = 0u;
  _has_bits_[0] &= ~0x00000001u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::devicetype() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.deviceType)
  return _internal_devicetype();
}
inline void OtherDevice::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000001u;
  devicetype_ = value;
}
inline void OtherDevice::set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.deviceType)
}

// required uint32 deviceId = 2;
inline bool OtherDevice::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool OtherDevice::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void OtherDevice::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.deviceId)
  return _internal_deviceid();
}
inline void OtherDevice::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  deviceid_ = value;
}
inline void OtherDevice::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.deviceId)
}

// required uint32 status = 3;
inline bool OtherDevice::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool OtherDevice::has_status() const {
  return _internal_has_status();
}
inline void OtherDevice::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.status)
  return _internal_status();
}
inline void OtherDevice::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  status_ = value;
}
inline void OtherDevice::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.status)
}

// optional uint32 swVersion = 4;
inline bool OtherDevice::_internal_has_swversion() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool OtherDevice::has_swversion() const {
  return _internal_has_swversion();
}
inline void OtherDevice::clear_swversion() {
  swversion_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_swversion() const {
  return swversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::swversion() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.swVersion)
  return _internal_swversion();
}
inline void OtherDevice::_internal_set_swversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  swversion_ = value;
}
inline void OtherDevice::set_swversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_swversion(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.swVersion)
}

// optional uint32 hwVersion = 5;
inline bool OtherDevice::_internal_has_hwversion() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool OtherDevice::has_hwversion() const {
  return _internal_has_hwversion();
}
inline void OtherDevice::clear_hwversion() {
  hwversion_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_hwversion() const {
  return hwversion_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::hwversion() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.hwVersion)
  return _internal_hwversion();
}
inline void OtherDevice::_internal_set_hwversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  hwversion_ = value;
}
inline void OtherDevice::set_hwversion(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hwversion(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.hwVersion)
}

// optional uint32 trxnCount = 6;
inline bool OtherDevice::_internal_has_trxncount() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool OtherDevice::has_trxncount() const {
  return _internal_has_trxncount();
}
inline void OtherDevice::clear_trxncount() {
  trxncount_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::_internal_trxncount() const {
  return trxncount_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 OtherDevice::trxncount() const {
  // @@protoc_insertion_point(field_get:fccboscom.OtherDevice.trxnCount)
  return _internal_trxncount();
}
inline void OtherDevice::_internal_set_trxncount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  trxncount_ = value;
}
inline void OtherDevice::set_trxncount(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_trxncount(value);
  // @@protoc_insertion_point(field_set:fccboscom.OtherDevice.trxnCount)
}

// -------------------------------------------------------------------

// DULogs

// required int32 logId = 1;
inline bool DULogs::_internal_has_logid() const {
  bool value = (_has_bits_[0] & 0x08000000u) != 0;
  return value;
}
inline bool DULogs::has_logid() const {
  return _internal_has_logid();
}
inline void DULogs::clear_logid() {
  logid_ = 0;
  _has_bits_[0] &= ~0x08000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::_internal_logid() const {
  return logid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::logid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.logId)
  return _internal_logid();
}
inline void DULogs::_internal_set_logid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x08000000u;
  logid_ = value;
}
inline void DULogs::set_logid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.logId)
}

// required int32 pumpno = 2;
inline bool DULogs::_internal_has_pumpno() const {
  bool value = (_has_bits_[0] & 0x10000000u) != 0;
  return value;
}
inline bool DULogs::has_pumpno() const {
  return _internal_has_pumpno();
}
inline void DULogs::clear_pumpno() {
  pumpno_ = 0;
  _has_bits_[0] &= ~0x10000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::_internal_pumpno() const {
  return pumpno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::pumpno() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.pumpno)
  return _internal_pumpno();
}
inline void DULogs::_internal_set_pumpno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x10000000u;
  pumpno_ = value;
}
inline void DULogs::set_pumpno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_pumpno(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.pumpno)
}

// required int32 nozzleno = 3;
inline bool DULogs::_internal_has_nozzleno() const {
  bool value = (_has_bits_[0] & 0x20000000u) != 0;
  return value;
}
inline bool DULogs::has_nozzleno() const {
  return _internal_has_nozzleno();
}
inline void DULogs::clear_nozzleno() {
  nozzleno_ = 0;
  _has_bits_[0] &= ~0x20000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::_internal_nozzleno() const {
  return nozzleno_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::nozzleno() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.nozzleno)
  return _internal_nozzleno();
}
inline void DULogs::_internal_set_nozzleno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x20000000u;
  nozzleno_ = value;
}
inline void DULogs::set_nozzleno(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nozzleno(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.nozzleno)
}

// required int32 productCode = 4;
inline bool DULogs::_internal_has_productcode() const {
  bool value = (_has_bits_[0] & 0x40000000u) != 0;
  return value;
}
inline bool DULogs::has_productcode() const {
  return _internal_has_productcode();
}
inline void DULogs::clear_productcode() {
  productcode_ = 0;
  _has_bits_[0] &= ~0x40000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::_internal_productcode() const {
  return productcode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::productcode() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.productCode)
  return _internal_productcode();
}
inline void DULogs::_internal_set_productcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x40000000u;
  productcode_ = value;
}
inline void DULogs::set_productcode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_productcode(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.productCode)
}

// required int32 logTranType = 5;
inline bool DULogs::_internal_has_logtrantype() const {
  bool value = (_has_bits_[0] & 0x80000000u) != 0;
  return value;
}
inline bool DULogs::has_logtrantype() const {
  return _internal_has_logtrantype();
}
inline void DULogs::clear_logtrantype() {
  logtrantype_ = 0;
  _has_bits_[0] &= ~0x80000000u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::_internal_logtrantype() const {
  return logtrantype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 DULogs::logtrantype() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.logTranType)
  return _internal_logtrantype();
}
inline void DULogs::_internal_set_logtrantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x80000000u;
  logtrantype_ = value;
}
inline void DULogs::set_logtrantype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_logtrantype(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.logTranType)
}

// optional string paramDesc1 = 6;
inline bool DULogs::_internal_has_paramdesc1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc1() const {
  return _internal_has_paramdesc1();
}
inline void DULogs::clear_paramdesc1() {
  paramdesc1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DULogs::paramdesc1() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc1)
  return _internal_paramdesc1();
}
inline void DULogs::set_paramdesc1(const std::string& value) {
  _internal_set_paramdesc1(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc1)
}
inline std::string* DULogs::mutable_paramdesc1() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc1)
  return _internal_mutable_paramdesc1();
}
inline const std::string& DULogs::_internal_paramdesc1() const {
  return paramdesc1_.Get();
}
inline void DULogs::_internal_set_paramdesc1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  paramdesc1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  paramdesc1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc1)
}
inline void DULogs::set_paramdesc1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  paramdesc1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc1)
}
inline void DULogs::set_paramdesc1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  paramdesc1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc1)
}
inline std::string* DULogs::_internal_mutable_paramdesc1() {
  _has_bits_[0] |= 0x00000001u;
  return paramdesc1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc1() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc1)
  if (!_internal_has_paramdesc1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return paramdesc1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc1(std::string* paramdesc1) {
  if (paramdesc1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paramdesc1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc1)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return paramdesc1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc1(
    std::string* paramdesc1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  paramdesc1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc1)
}

// optional string param1 = 7;
inline bool DULogs::_internal_has_param1() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DULogs::has_param1() const {
  return _internal_has_param1();
}
inline void DULogs::clear_param1() {
  param1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& DULogs::param1() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param1)
  return _internal_param1();
}
inline void DULogs::set_param1(const std::string& value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param1)
}
inline std::string* DULogs::mutable_param1() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param1)
  return _internal_mutable_param1();
}
inline const std::string& DULogs::_internal_param1() const {
  return param1_.Get();
}
inline void DULogs::_internal_set_param1(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param1(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param1)
}
inline void DULogs::set_param1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param1)
}
inline void DULogs::set_param1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param1)
}
inline std::string* DULogs::_internal_mutable_param1() {
  _has_bits_[0] |= 0x00000002u;
  return param1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param1() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param1)
  if (!_internal_has_param1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return param1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param1(std::string* param1) {
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param1)
}
inline std::string* DULogs::unsafe_arena_release_param1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return param1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param1(
    std::string* param1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param1)
}

// optional string paramDesc2 = 8;
inline bool DULogs::_internal_has_paramdesc2() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc2() const {
  return _internal_has_paramdesc2();
}
inline void DULogs::clear_paramdesc2() {
  paramdesc2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& DULogs::paramdesc2() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc2)
  return _internal_paramdesc2();
}
inline void DULogs::set_paramdesc2(const std::string& value) {
  _internal_set_paramdesc2(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc2)
}
inline std::string* DULogs::mutable_paramdesc2() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc2)
  return _internal_mutable_paramdesc2();
}
inline const std::string& DULogs::_internal_paramdesc2() const {
  return paramdesc2_.Get();
}
inline void DULogs::_internal_set_paramdesc2(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  paramdesc2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc2(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  paramdesc2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc2)
}
inline void DULogs::set_paramdesc2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  paramdesc2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc2)
}
inline void DULogs::set_paramdesc2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  paramdesc2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc2)
}
inline std::string* DULogs::_internal_mutable_paramdesc2() {
  _has_bits_[0] |= 0x00000004u;
  return paramdesc2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc2() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc2)
  if (!_internal_has_paramdesc2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return paramdesc2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc2(std::string* paramdesc2) {
  if (paramdesc2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  paramdesc2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc2)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return paramdesc2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc2(
    std::string* paramdesc2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc2 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  paramdesc2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc2)
}

// optional string param2 = 9;
inline bool DULogs::_internal_has_param2() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DULogs::has_param2() const {
  return _internal_has_param2();
}
inline void DULogs::clear_param2() {
  param2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& DULogs::param2() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param2)
  return _internal_param2();
}
inline void DULogs::set_param2(const std::string& value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param2)
}
inline std::string* DULogs::mutable_param2() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param2)
  return _internal_mutable_param2();
}
inline const std::string& DULogs::_internal_param2() const {
  return param2_.Get();
}
inline void DULogs::_internal_set_param2(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param2(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  param2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param2)
}
inline void DULogs::set_param2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param2)
}
inline void DULogs::set_param2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param2)
}
inline std::string* DULogs::_internal_mutable_param2() {
  _has_bits_[0] |= 0x00000008u;
  return param2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param2() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param2)
  if (!_internal_has_param2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return param2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param2(std::string* param2) {
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param2)
}
inline std::string* DULogs::unsafe_arena_release_param2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return param2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param2(
    std::string* param2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param2)
}

// optional string paramDesc3 = 10;
inline bool DULogs::_internal_has_paramdesc3() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc3() const {
  return _internal_has_paramdesc3();
}
inline void DULogs::clear_paramdesc3() {
  paramdesc3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& DULogs::paramdesc3() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc3)
  return _internal_paramdesc3();
}
inline void DULogs::set_paramdesc3(const std::string& value) {
  _internal_set_paramdesc3(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc3)
}
inline std::string* DULogs::mutable_paramdesc3() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc3)
  return _internal_mutable_paramdesc3();
}
inline const std::string& DULogs::_internal_paramdesc3() const {
  return paramdesc3_.Get();
}
inline void DULogs::_internal_set_paramdesc3(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  paramdesc3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc3(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  paramdesc3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc3)
}
inline void DULogs::set_paramdesc3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  paramdesc3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc3)
}
inline void DULogs::set_paramdesc3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  paramdesc3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc3)
}
inline std::string* DULogs::_internal_mutable_paramdesc3() {
  _has_bits_[0] |= 0x00000010u;
  return paramdesc3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc3() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc3)
  if (!_internal_has_paramdesc3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return paramdesc3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc3(std::string* paramdesc3) {
  if (paramdesc3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  paramdesc3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc3)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return paramdesc3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc3(
    std::string* paramdesc3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc3 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  paramdesc3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc3)
}

// optional string param3 = 11;
inline bool DULogs::_internal_has_param3() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool DULogs::has_param3() const {
  return _internal_has_param3();
}
inline void DULogs::clear_param3() {
  param3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000020u;
}
inline const std::string& DULogs::param3() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param3)
  return _internal_param3();
}
inline void DULogs::set_param3(const std::string& value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param3)
}
inline std::string* DULogs::mutable_param3() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param3)
  return _internal_mutable_param3();
}
inline const std::string& DULogs::_internal_param3() const {
  return param3_.Get();
}
inline void DULogs::_internal_set_param3(const std::string& value) {
  _has_bits_[0] |= 0x00000020u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param3(std::string&& value) {
  _has_bits_[0] |= 0x00000020u;
  param3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param3)
}
inline void DULogs::set_param3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000020u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param3)
}
inline void DULogs::set_param3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000020u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param3)
}
inline std::string* DULogs::_internal_mutable_param3() {
  _has_bits_[0] |= 0x00000020u;
  return param3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param3() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param3)
  if (!_internal_has_param3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000020u;
  return param3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param3(std::string* param3) {
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  param3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param3)
}
inline std::string* DULogs::unsafe_arena_release_param3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000020u;
  return param3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param3(
    std::string* param3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000020u;
  } else {
    _has_bits_[0] &= ~0x00000020u;
  }
  param3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param3)
}

// optional string paramDesc4 = 12;
inline bool DULogs::_internal_has_paramdesc4() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc4() const {
  return _internal_has_paramdesc4();
}
inline void DULogs::clear_paramdesc4() {
  paramdesc4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000040u;
}
inline const std::string& DULogs::paramdesc4() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc4)
  return _internal_paramdesc4();
}
inline void DULogs::set_paramdesc4(const std::string& value) {
  _internal_set_paramdesc4(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc4)
}
inline std::string* DULogs::mutable_paramdesc4() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc4)
  return _internal_mutable_paramdesc4();
}
inline const std::string& DULogs::_internal_paramdesc4() const {
  return paramdesc4_.Get();
}
inline void DULogs::_internal_set_paramdesc4(const std::string& value) {
  _has_bits_[0] |= 0x00000040u;
  paramdesc4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc4(std::string&& value) {
  _has_bits_[0] |= 0x00000040u;
  paramdesc4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc4)
}
inline void DULogs::set_paramdesc4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000040u;
  paramdesc4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc4)
}
inline void DULogs::set_paramdesc4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000040u;
  paramdesc4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc4)
}
inline std::string* DULogs::_internal_mutable_paramdesc4() {
  _has_bits_[0] |= 0x00000040u;
  return paramdesc4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc4() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc4)
  if (!_internal_has_paramdesc4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000040u;
  return paramdesc4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc4(std::string* paramdesc4) {
  if (paramdesc4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  paramdesc4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc4)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000040u;
  return paramdesc4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc4(
    std::string* paramdesc4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc4 != nullptr) {
    _has_bits_[0] |= 0x00000040u;
  } else {
    _has_bits_[0] &= ~0x00000040u;
  }
  paramdesc4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc4)
}

// optional string param4 = 13;
inline bool DULogs::_internal_has_param4() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool DULogs::has_param4() const {
  return _internal_has_param4();
}
inline void DULogs::clear_param4() {
  param4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000080u;
}
inline const std::string& DULogs::param4() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param4)
  return _internal_param4();
}
inline void DULogs::set_param4(const std::string& value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param4)
}
inline std::string* DULogs::mutable_param4() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param4)
  return _internal_mutable_param4();
}
inline const std::string& DULogs::_internal_param4() const {
  return param4_.Get();
}
inline void DULogs::_internal_set_param4(const std::string& value) {
  _has_bits_[0] |= 0x00000080u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param4(std::string&& value) {
  _has_bits_[0] |= 0x00000080u;
  param4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param4)
}
inline void DULogs::set_param4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000080u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param4)
}
inline void DULogs::set_param4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000080u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param4)
}
inline std::string* DULogs::_internal_mutable_param4() {
  _has_bits_[0] |= 0x00000080u;
  return param4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param4() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param4)
  if (!_internal_has_param4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000080u;
  return param4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param4(std::string* param4) {
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  param4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param4)
}
inline std::string* DULogs::unsafe_arena_release_param4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000080u;
  return param4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param4(
    std::string* param4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000080u;
  } else {
    _has_bits_[0] &= ~0x00000080u;
  }
  param4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param4)
}

// optional string paramDesc5 = 14;
inline bool DULogs::_internal_has_paramdesc5() const {
  bool value = (_has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc5() const {
  return _internal_has_paramdesc5();
}
inline void DULogs::clear_paramdesc5() {
  paramdesc5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000100u;
}
inline const std::string& DULogs::paramdesc5() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc5)
  return _internal_paramdesc5();
}
inline void DULogs::set_paramdesc5(const std::string& value) {
  _internal_set_paramdesc5(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc5)
}
inline std::string* DULogs::mutable_paramdesc5() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc5)
  return _internal_mutable_paramdesc5();
}
inline const std::string& DULogs::_internal_paramdesc5() const {
  return paramdesc5_.Get();
}
inline void DULogs::_internal_set_paramdesc5(const std::string& value) {
  _has_bits_[0] |= 0x00000100u;
  paramdesc5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc5(std::string&& value) {
  _has_bits_[0] |= 0x00000100u;
  paramdesc5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc5)
}
inline void DULogs::set_paramdesc5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000100u;
  paramdesc5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc5)
}
inline void DULogs::set_paramdesc5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000100u;
  paramdesc5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc5)
}
inline std::string* DULogs::_internal_mutable_paramdesc5() {
  _has_bits_[0] |= 0x00000100u;
  return paramdesc5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc5() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc5)
  if (!_internal_has_paramdesc5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000100u;
  return paramdesc5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc5(std::string* paramdesc5) {
  if (paramdesc5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  paramdesc5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc5)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000100u;
  return paramdesc5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc5(
    std::string* paramdesc5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc5 != nullptr) {
    _has_bits_[0] |= 0x00000100u;
  } else {
    _has_bits_[0] &= ~0x00000100u;
  }
  paramdesc5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc5)
}

// optional string param5 = 15;
inline bool DULogs::_internal_has_param5() const {
  bool value = (_has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool DULogs::has_param5() const {
  return _internal_has_param5();
}
inline void DULogs::clear_param5() {
  param5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000200u;
}
inline const std::string& DULogs::param5() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param5)
  return _internal_param5();
}
inline void DULogs::set_param5(const std::string& value) {
  _internal_set_param5(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param5)
}
inline std::string* DULogs::mutable_param5() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param5)
  return _internal_mutable_param5();
}
inline const std::string& DULogs::_internal_param5() const {
  return param5_.Get();
}
inline void DULogs::_internal_set_param5(const std::string& value) {
  _has_bits_[0] |= 0x00000200u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param5(std::string&& value) {
  _has_bits_[0] |= 0x00000200u;
  param5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param5)
}
inline void DULogs::set_param5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000200u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param5)
}
inline void DULogs::set_param5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000200u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param5)
}
inline std::string* DULogs::_internal_mutable_param5() {
  _has_bits_[0] |= 0x00000200u;
  return param5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param5() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param5)
  if (!_internal_has_param5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000200u;
  return param5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param5(std::string* param5) {
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  param5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param5)
}
inline std::string* DULogs::unsafe_arena_release_param5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000200u;
  return param5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param5(
    std::string* param5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000200u;
  } else {
    _has_bits_[0] &= ~0x00000200u;
  }
  param5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param5)
}

// optional string paramDesc6 = 16;
inline bool DULogs::_internal_has_paramdesc6() const {
  bool value = (_has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc6() const {
  return _internal_has_paramdesc6();
}
inline void DULogs::clear_paramdesc6() {
  paramdesc6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000400u;
}
inline const std::string& DULogs::paramdesc6() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc6)
  return _internal_paramdesc6();
}
inline void DULogs::set_paramdesc6(const std::string& value) {
  _internal_set_paramdesc6(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc6)
}
inline std::string* DULogs::mutable_paramdesc6() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc6)
  return _internal_mutable_paramdesc6();
}
inline const std::string& DULogs::_internal_paramdesc6() const {
  return paramdesc6_.Get();
}
inline void DULogs::_internal_set_paramdesc6(const std::string& value) {
  _has_bits_[0] |= 0x00000400u;
  paramdesc6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc6(std::string&& value) {
  _has_bits_[0] |= 0x00000400u;
  paramdesc6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc6)
}
inline void DULogs::set_paramdesc6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000400u;
  paramdesc6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc6)
}
inline void DULogs::set_paramdesc6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000400u;
  paramdesc6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc6)
}
inline std::string* DULogs::_internal_mutable_paramdesc6() {
  _has_bits_[0] |= 0x00000400u;
  return paramdesc6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc6() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc6)
  if (!_internal_has_paramdesc6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000400u;
  return paramdesc6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc6(std::string* paramdesc6) {
  if (paramdesc6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  paramdesc6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc6)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000400u;
  return paramdesc6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc6(
    std::string* paramdesc6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc6 != nullptr) {
    _has_bits_[0] |= 0x00000400u;
  } else {
    _has_bits_[0] &= ~0x00000400u;
  }
  paramdesc6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc6)
}

// optional string param6 = 17;
inline bool DULogs::_internal_has_param6() const {
  bool value = (_has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool DULogs::has_param6() const {
  return _internal_has_param6();
}
inline void DULogs::clear_param6() {
  param6_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000800u;
}
inline const std::string& DULogs::param6() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param6)
  return _internal_param6();
}
inline void DULogs::set_param6(const std::string& value) {
  _internal_set_param6(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param6)
}
inline std::string* DULogs::mutable_param6() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param6)
  return _internal_mutable_param6();
}
inline const std::string& DULogs::_internal_param6() const {
  return param6_.Get();
}
inline void DULogs::_internal_set_param6(const std::string& value) {
  _has_bits_[0] |= 0x00000800u;
  param6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param6(std::string&& value) {
  _has_bits_[0] |= 0x00000800u;
  param6_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param6)
}
inline void DULogs::set_param6(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000800u;
  param6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param6)
}
inline void DULogs::set_param6(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000800u;
  param6_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param6)
}
inline std::string* DULogs::_internal_mutable_param6() {
  _has_bits_[0] |= 0x00000800u;
  return param6_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param6() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param6)
  if (!_internal_has_param6()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000800u;
  return param6_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param6(std::string* param6) {
  if (param6 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  param6_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param6,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param6)
}
inline std::string* DULogs::unsafe_arena_release_param6() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param6)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000800u;
  return param6_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param6(
    std::string* param6) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param6 != nullptr) {
    _has_bits_[0] |= 0x00000800u;
  } else {
    _has_bits_[0] &= ~0x00000800u;
  }
  param6_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param6, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param6)
}

// optional string paramDesc7 = 18;
inline bool DULogs::_internal_has_paramdesc7() const {
  bool value = (_has_bits_[0] & 0x00001000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc7() const {
  return _internal_has_paramdesc7();
}
inline void DULogs::clear_paramdesc7() {
  paramdesc7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00001000u;
}
inline const std::string& DULogs::paramdesc7() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc7)
  return _internal_paramdesc7();
}
inline void DULogs::set_paramdesc7(const std::string& value) {
  _internal_set_paramdesc7(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc7)
}
inline std::string* DULogs::mutable_paramdesc7() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc7)
  return _internal_mutable_paramdesc7();
}
inline const std::string& DULogs::_internal_paramdesc7() const {
  return paramdesc7_.Get();
}
inline void DULogs::_internal_set_paramdesc7(const std::string& value) {
  _has_bits_[0] |= 0x00001000u;
  paramdesc7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc7(std::string&& value) {
  _has_bits_[0] |= 0x00001000u;
  paramdesc7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc7)
}
inline void DULogs::set_paramdesc7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00001000u;
  paramdesc7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc7)
}
inline void DULogs::set_paramdesc7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00001000u;
  paramdesc7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc7)
}
inline std::string* DULogs::_internal_mutable_paramdesc7() {
  _has_bits_[0] |= 0x00001000u;
  return paramdesc7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc7() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc7)
  if (!_internal_has_paramdesc7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00001000u;
  return paramdesc7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc7(std::string* paramdesc7) {
  if (paramdesc7 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  paramdesc7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc7,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc7)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc7)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00001000u;
  return paramdesc7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc7(
    std::string* paramdesc7) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc7 != nullptr) {
    _has_bits_[0] |= 0x00001000u;
  } else {
    _has_bits_[0] &= ~0x00001000u;
  }
  paramdesc7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc7, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc7)
}

// optional string param7 = 19;
inline bool DULogs::_internal_has_param7() const {
  bool value = (_has_bits_[0] & 0x00002000u) != 0;
  return value;
}
inline bool DULogs::has_param7() const {
  return _internal_has_param7();
}
inline void DULogs::clear_param7() {
  param7_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00002000u;
}
inline const std::string& DULogs::param7() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param7)
  return _internal_param7();
}
inline void DULogs::set_param7(const std::string& value) {
  _internal_set_param7(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param7)
}
inline std::string* DULogs::mutable_param7() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param7)
  return _internal_mutable_param7();
}
inline const std::string& DULogs::_internal_param7() const {
  return param7_.Get();
}
inline void DULogs::_internal_set_param7(const std::string& value) {
  _has_bits_[0] |= 0x00002000u;
  param7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param7(std::string&& value) {
  _has_bits_[0] |= 0x00002000u;
  param7_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param7)
}
inline void DULogs::set_param7(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00002000u;
  param7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param7)
}
inline void DULogs::set_param7(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00002000u;
  param7_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param7)
}
inline std::string* DULogs::_internal_mutable_param7() {
  _has_bits_[0] |= 0x00002000u;
  return param7_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param7() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param7)
  if (!_internal_has_param7()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00002000u;
  return param7_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param7(std::string* param7) {
  if (param7 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  param7_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param7,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param7)
}
inline std::string* DULogs::unsafe_arena_release_param7() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param7)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00002000u;
  return param7_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param7(
    std::string* param7) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param7 != nullptr) {
    _has_bits_[0] |= 0x00002000u;
  } else {
    _has_bits_[0] &= ~0x00002000u;
  }
  param7_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param7, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param7)
}

// optional string paramDesc8 = 20;
inline bool DULogs::_internal_has_paramdesc8() const {
  bool value = (_has_bits_[0] & 0x00004000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc8() const {
  return _internal_has_paramdesc8();
}
inline void DULogs::clear_paramdesc8() {
  paramdesc8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00004000u;
}
inline const std::string& DULogs::paramdesc8() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc8)
  return _internal_paramdesc8();
}
inline void DULogs::set_paramdesc8(const std::string& value) {
  _internal_set_paramdesc8(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc8)
}
inline std::string* DULogs::mutable_paramdesc8() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc8)
  return _internal_mutable_paramdesc8();
}
inline const std::string& DULogs::_internal_paramdesc8() const {
  return paramdesc8_.Get();
}
inline void DULogs::_internal_set_paramdesc8(const std::string& value) {
  _has_bits_[0] |= 0x00004000u;
  paramdesc8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc8(std::string&& value) {
  _has_bits_[0] |= 0x00004000u;
  paramdesc8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc8)
}
inline void DULogs::set_paramdesc8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00004000u;
  paramdesc8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc8)
}
inline void DULogs::set_paramdesc8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00004000u;
  paramdesc8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc8)
}
inline std::string* DULogs::_internal_mutable_paramdesc8() {
  _has_bits_[0] |= 0x00004000u;
  return paramdesc8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc8() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc8)
  if (!_internal_has_paramdesc8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00004000u;
  return paramdesc8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc8(std::string* paramdesc8) {
  if (paramdesc8 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  paramdesc8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc8,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc8)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc8)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00004000u;
  return paramdesc8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc8(
    std::string* paramdesc8) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc8 != nullptr) {
    _has_bits_[0] |= 0x00004000u;
  } else {
    _has_bits_[0] &= ~0x00004000u;
  }
  paramdesc8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc8, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc8)
}

// optional string param8 = 21;
inline bool DULogs::_internal_has_param8() const {
  bool value = (_has_bits_[0] & 0x00008000u) != 0;
  return value;
}
inline bool DULogs::has_param8() const {
  return _internal_has_param8();
}
inline void DULogs::clear_param8() {
  param8_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00008000u;
}
inline const std::string& DULogs::param8() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param8)
  return _internal_param8();
}
inline void DULogs::set_param8(const std::string& value) {
  _internal_set_param8(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param8)
}
inline std::string* DULogs::mutable_param8() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param8)
  return _internal_mutable_param8();
}
inline const std::string& DULogs::_internal_param8() const {
  return param8_.Get();
}
inline void DULogs::_internal_set_param8(const std::string& value) {
  _has_bits_[0] |= 0x00008000u;
  param8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param8(std::string&& value) {
  _has_bits_[0] |= 0x00008000u;
  param8_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param8)
}
inline void DULogs::set_param8(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00008000u;
  param8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param8)
}
inline void DULogs::set_param8(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00008000u;
  param8_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param8)
}
inline std::string* DULogs::_internal_mutable_param8() {
  _has_bits_[0] |= 0x00008000u;
  return param8_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param8() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param8)
  if (!_internal_has_param8()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00008000u;
  return param8_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param8(std::string* param8) {
  if (param8 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  param8_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param8,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param8)
}
inline std::string* DULogs::unsafe_arena_release_param8() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param8)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00008000u;
  return param8_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param8(
    std::string* param8) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param8 != nullptr) {
    _has_bits_[0] |= 0x00008000u;
  } else {
    _has_bits_[0] &= ~0x00008000u;
  }
  param8_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param8, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param8)
}

// optional string paramDesc9 = 22;
inline bool DULogs::_internal_has_paramdesc9() const {
  bool value = (_has_bits_[0] & 0x00010000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc9() const {
  return _internal_has_paramdesc9();
}
inline void DULogs::clear_paramdesc9() {
  paramdesc9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00010000u;
}
inline const std::string& DULogs::paramdesc9() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc9)
  return _internal_paramdesc9();
}
inline void DULogs::set_paramdesc9(const std::string& value) {
  _internal_set_paramdesc9(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc9)
}
inline std::string* DULogs::mutable_paramdesc9() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc9)
  return _internal_mutable_paramdesc9();
}
inline const std::string& DULogs::_internal_paramdesc9() const {
  return paramdesc9_.Get();
}
inline void DULogs::_internal_set_paramdesc9(const std::string& value) {
  _has_bits_[0] |= 0x00010000u;
  paramdesc9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc9(std::string&& value) {
  _has_bits_[0] |= 0x00010000u;
  paramdesc9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc9)
}
inline void DULogs::set_paramdesc9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00010000u;
  paramdesc9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc9)
}
inline void DULogs::set_paramdesc9(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00010000u;
  paramdesc9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc9)
}
inline std::string* DULogs::_internal_mutable_paramdesc9() {
  _has_bits_[0] |= 0x00010000u;
  return paramdesc9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc9() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc9)
  if (!_internal_has_paramdesc9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00010000u;
  return paramdesc9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc9(std::string* paramdesc9) {
  if (paramdesc9 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  paramdesc9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc9,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc9)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc9)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00010000u;
  return paramdesc9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc9(
    std::string* paramdesc9) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc9 != nullptr) {
    _has_bits_[0] |= 0x00010000u;
  } else {
    _has_bits_[0] &= ~0x00010000u;
  }
  paramdesc9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc9, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc9)
}

// optional string param9 = 23;
inline bool DULogs::_internal_has_param9() const {
  bool value = (_has_bits_[0] & 0x00020000u) != 0;
  return value;
}
inline bool DULogs::has_param9() const {
  return _internal_has_param9();
}
inline void DULogs::clear_param9() {
  param9_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00020000u;
}
inline const std::string& DULogs::param9() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param9)
  return _internal_param9();
}
inline void DULogs::set_param9(const std::string& value) {
  _internal_set_param9(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param9)
}
inline std::string* DULogs::mutable_param9() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param9)
  return _internal_mutable_param9();
}
inline const std::string& DULogs::_internal_param9() const {
  return param9_.Get();
}
inline void DULogs::_internal_set_param9(const std::string& value) {
  _has_bits_[0] |= 0x00020000u;
  param9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param9(std::string&& value) {
  _has_bits_[0] |= 0x00020000u;
  param9_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param9)
}
inline void DULogs::set_param9(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00020000u;
  param9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param9)
}
inline void DULogs::set_param9(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00020000u;
  param9_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param9)
}
inline std::string* DULogs::_internal_mutable_param9() {
  _has_bits_[0] |= 0x00020000u;
  return param9_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param9() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param9)
  if (!_internal_has_param9()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00020000u;
  return param9_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param9(std::string* param9) {
  if (param9 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  param9_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param9,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param9)
}
inline std::string* DULogs::unsafe_arena_release_param9() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param9)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00020000u;
  return param9_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param9(
    std::string* param9) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param9 != nullptr) {
    _has_bits_[0] |= 0x00020000u;
  } else {
    _has_bits_[0] &= ~0x00020000u;
  }
  param9_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param9, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param9)
}

// optional string paramDesc10 = 24;
inline bool DULogs::_internal_has_paramdesc10() const {
  bool value = (_has_bits_[0] & 0x00040000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc10() const {
  return _internal_has_paramdesc10();
}
inline void DULogs::clear_paramdesc10() {
  paramdesc10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00040000u;
}
inline const std::string& DULogs::paramdesc10() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc10)
  return _internal_paramdesc10();
}
inline void DULogs::set_paramdesc10(const std::string& value) {
  _internal_set_paramdesc10(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc10)
}
inline std::string* DULogs::mutable_paramdesc10() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc10)
  return _internal_mutable_paramdesc10();
}
inline const std::string& DULogs::_internal_paramdesc10() const {
  return paramdesc10_.Get();
}
inline void DULogs::_internal_set_paramdesc10(const std::string& value) {
  _has_bits_[0] |= 0x00040000u;
  paramdesc10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc10(std::string&& value) {
  _has_bits_[0] |= 0x00040000u;
  paramdesc10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc10)
}
inline void DULogs::set_paramdesc10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00040000u;
  paramdesc10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc10)
}
inline void DULogs::set_paramdesc10(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00040000u;
  paramdesc10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc10)
}
inline std::string* DULogs::_internal_mutable_paramdesc10() {
  _has_bits_[0] |= 0x00040000u;
  return paramdesc10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc10() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc10)
  if (!_internal_has_paramdesc10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00040000u;
  return paramdesc10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc10(std::string* paramdesc10) {
  if (paramdesc10 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  paramdesc10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc10,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc10)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc10)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00040000u;
  return paramdesc10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc10(
    std::string* paramdesc10) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc10 != nullptr) {
    _has_bits_[0] |= 0x00040000u;
  } else {
    _has_bits_[0] &= ~0x00040000u;
  }
  paramdesc10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc10, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc10)
}

// optional string param10 = 25;
inline bool DULogs::_internal_has_param10() const {
  bool value = (_has_bits_[0] & 0x00080000u) != 0;
  return value;
}
inline bool DULogs::has_param10() const {
  return _internal_has_param10();
}
inline void DULogs::clear_param10() {
  param10_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00080000u;
}
inline const std::string& DULogs::param10() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param10)
  return _internal_param10();
}
inline void DULogs::set_param10(const std::string& value) {
  _internal_set_param10(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param10)
}
inline std::string* DULogs::mutable_param10() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param10)
  return _internal_mutable_param10();
}
inline const std::string& DULogs::_internal_param10() const {
  return param10_.Get();
}
inline void DULogs::_internal_set_param10(const std::string& value) {
  _has_bits_[0] |= 0x00080000u;
  param10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param10(std::string&& value) {
  _has_bits_[0] |= 0x00080000u;
  param10_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param10)
}
inline void DULogs::set_param10(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00080000u;
  param10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param10)
}
inline void DULogs::set_param10(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00080000u;
  param10_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param10)
}
inline std::string* DULogs::_internal_mutable_param10() {
  _has_bits_[0] |= 0x00080000u;
  return param10_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param10() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param10)
  if (!_internal_has_param10()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00080000u;
  return param10_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param10(std::string* param10) {
  if (param10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  param10_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param10,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param10)
}
inline std::string* DULogs::unsafe_arena_release_param10() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param10)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00080000u;
  return param10_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param10(
    std::string* param10) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param10 != nullptr) {
    _has_bits_[0] |= 0x00080000u;
  } else {
    _has_bits_[0] &= ~0x00080000u;
  }
  param10_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param10, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param10)
}

// optional string paramDesc11 = 26;
inline bool DULogs::_internal_has_paramdesc11() const {
  bool value = (_has_bits_[0] & 0x00100000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc11() const {
  return _internal_has_paramdesc11();
}
inline void DULogs::clear_paramdesc11() {
  paramdesc11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00100000u;
}
inline const std::string& DULogs::paramdesc11() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc11)
  return _internal_paramdesc11();
}
inline void DULogs::set_paramdesc11(const std::string& value) {
  _internal_set_paramdesc11(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc11)
}
inline std::string* DULogs::mutable_paramdesc11() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc11)
  return _internal_mutable_paramdesc11();
}
inline const std::string& DULogs::_internal_paramdesc11() const {
  return paramdesc11_.Get();
}
inline void DULogs::_internal_set_paramdesc11(const std::string& value) {
  _has_bits_[0] |= 0x00100000u;
  paramdesc11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc11(std::string&& value) {
  _has_bits_[0] |= 0x00100000u;
  paramdesc11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc11)
}
inline void DULogs::set_paramdesc11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00100000u;
  paramdesc11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc11)
}
inline void DULogs::set_paramdesc11(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00100000u;
  paramdesc11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc11)
}
inline std::string* DULogs::_internal_mutable_paramdesc11() {
  _has_bits_[0] |= 0x00100000u;
  return paramdesc11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc11() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc11)
  if (!_internal_has_paramdesc11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00100000u;
  return paramdesc11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc11(std::string* paramdesc11) {
  if (paramdesc11 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  paramdesc11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc11,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc11)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc11)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00100000u;
  return paramdesc11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc11(
    std::string* paramdesc11) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc11 != nullptr) {
    _has_bits_[0] |= 0x00100000u;
  } else {
    _has_bits_[0] &= ~0x00100000u;
  }
  paramdesc11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc11, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc11)
}

// optional string param11 = 27;
inline bool DULogs::_internal_has_param11() const {
  bool value = (_has_bits_[0] & 0x00200000u) != 0;
  return value;
}
inline bool DULogs::has_param11() const {
  return _internal_has_param11();
}
inline void DULogs::clear_param11() {
  param11_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00200000u;
}
inline const std::string& DULogs::param11() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param11)
  return _internal_param11();
}
inline void DULogs::set_param11(const std::string& value) {
  _internal_set_param11(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param11)
}
inline std::string* DULogs::mutable_param11() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param11)
  return _internal_mutable_param11();
}
inline const std::string& DULogs::_internal_param11() const {
  return param11_.Get();
}
inline void DULogs::_internal_set_param11(const std::string& value) {
  _has_bits_[0] |= 0x00200000u;
  param11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param11(std::string&& value) {
  _has_bits_[0] |= 0x00200000u;
  param11_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param11)
}
inline void DULogs::set_param11(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00200000u;
  param11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param11)
}
inline void DULogs::set_param11(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00200000u;
  param11_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param11)
}
inline std::string* DULogs::_internal_mutable_param11() {
  _has_bits_[0] |= 0x00200000u;
  return param11_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param11() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param11)
  if (!_internal_has_param11()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00200000u;
  return param11_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param11(std::string* param11) {
  if (param11 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  param11_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param11,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param11)
}
inline std::string* DULogs::unsafe_arena_release_param11() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param11)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00200000u;
  return param11_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param11(
    std::string* param11) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param11 != nullptr) {
    _has_bits_[0] |= 0x00200000u;
  } else {
    _has_bits_[0] &= ~0x00200000u;
  }
  param11_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param11, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param11)
}

// optional string paramDesc12 = 28;
inline bool DULogs::_internal_has_paramdesc12() const {
  bool value = (_has_bits_[0] & 0x00400000u) != 0;
  return value;
}
inline bool DULogs::has_paramdesc12() const {
  return _internal_has_paramdesc12();
}
inline void DULogs::clear_paramdesc12() {
  paramdesc12_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00400000u;
}
inline const std::string& DULogs::paramdesc12() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.paramDesc12)
  return _internal_paramdesc12();
}
inline void DULogs::set_paramdesc12(const std::string& value) {
  _internal_set_paramdesc12(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.paramDesc12)
}
inline std::string* DULogs::mutable_paramdesc12() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.paramDesc12)
  return _internal_mutable_paramdesc12();
}
inline const std::string& DULogs::_internal_paramdesc12() const {
  return paramdesc12_.Get();
}
inline void DULogs::_internal_set_paramdesc12(const std::string& value) {
  _has_bits_[0] |= 0x00400000u;
  paramdesc12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_paramdesc12(std::string&& value) {
  _has_bits_[0] |= 0x00400000u;
  paramdesc12_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.paramDesc12)
}
inline void DULogs::set_paramdesc12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00400000u;
  paramdesc12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.paramDesc12)
}
inline void DULogs::set_paramdesc12(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00400000u;
  paramdesc12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.paramDesc12)
}
inline std::string* DULogs::_internal_mutable_paramdesc12() {
  _has_bits_[0] |= 0x00400000u;
  return paramdesc12_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_paramdesc12() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.paramDesc12)
  if (!_internal_has_paramdesc12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00400000u;
  return paramdesc12_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_paramdesc12(std::string* paramdesc12) {
  if (paramdesc12 != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  paramdesc12_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), paramdesc12,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.paramDesc12)
}
inline std::string* DULogs::unsafe_arena_release_paramdesc12() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.paramDesc12)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00400000u;
  return paramdesc12_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_paramdesc12(
    std::string* paramdesc12) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (paramdesc12 != nullptr) {
    _has_bits_[0] |= 0x00400000u;
  } else {
    _has_bits_[0] &= ~0x00400000u;
  }
  paramdesc12_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      paramdesc12, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.paramDesc12)
}

// optional string param12 = 29;
inline bool DULogs::_internal_has_param12() const {
  bool value = (_has_bits_[0] & 0x00800000u) != 0;
  return value;
}
inline bool DULogs::has_param12() const {
  return _internal_has_param12();
}
inline void DULogs::clear_param12() {
  param12_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00800000u;
}
inline const std::string& DULogs::param12() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.param12)
  return _internal_param12();
}
inline void DULogs::set_param12(const std::string& value) {
  _internal_set_param12(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.param12)
}
inline std::string* DULogs::mutable_param12() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.param12)
  return _internal_mutable_param12();
}
inline const std::string& DULogs::_internal_param12() const {
  return param12_.Get();
}
inline void DULogs::_internal_set_param12(const std::string& value) {
  _has_bits_[0] |= 0x00800000u;
  param12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_param12(std::string&& value) {
  _has_bits_[0] |= 0x00800000u;
  param12_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.param12)
}
inline void DULogs::set_param12(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00800000u;
  param12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.param12)
}
inline void DULogs::set_param12(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00800000u;
  param12_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.param12)
}
inline std::string* DULogs::_internal_mutable_param12() {
  _has_bits_[0] |= 0x00800000u;
  return param12_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_param12() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.param12)
  if (!_internal_has_param12()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00800000u;
  return param12_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_param12(std::string* param12) {
  if (param12 != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  param12_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param12,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.param12)
}
inline std::string* DULogs::unsafe_arena_release_param12() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.param12)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00800000u;
  return param12_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_param12(
    std::string* param12) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param12 != nullptr) {
    _has_bits_[0] |= 0x00800000u;
  } else {
    _has_bits_[0] &= ~0x00800000u;
  }
  param12_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param12, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.param12)
}

// required string createDate = 30;
inline bool DULogs::_internal_has_createdate() const {
  bool value = (_has_bits_[0] & 0x01000000u) != 0;
  return value;
}
inline bool DULogs::has_createdate() const {
  return _internal_has_createdate();
}
inline void DULogs::clear_createdate() {
  createdate_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x01000000u;
}
inline const std::string& DULogs::createdate() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.createDate)
  return _internal_createdate();
}
inline void DULogs::set_createdate(const std::string& value) {
  _internal_set_createdate(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.createDate)
}
inline std::string* DULogs::mutable_createdate() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.createDate)
  return _internal_mutable_createdate();
}
inline const std::string& DULogs::_internal_createdate() const {
  return createdate_.Get();
}
inline void DULogs::_internal_set_createdate(const std::string& value) {
  _has_bits_[0] |= 0x01000000u;
  createdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_createdate(std::string&& value) {
  _has_bits_[0] |= 0x01000000u;
  createdate_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.createDate)
}
inline void DULogs::set_createdate(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x01000000u;
  createdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.createDate)
}
inline void DULogs::set_createdate(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x01000000u;
  createdate_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.createDate)
}
inline std::string* DULogs::_internal_mutable_createdate() {
  _has_bits_[0] |= 0x01000000u;
  return createdate_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_createdate() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.createDate)
  if (!_internal_has_createdate()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x01000000u;
  return createdate_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_createdate(std::string* createdate) {
  if (createdate != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  createdate_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), createdate,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.createDate)
}
inline std::string* DULogs::unsafe_arena_release_createdate() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.createDate)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x01000000u;
  return createdate_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_createdate(
    std::string* createdate) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (createdate != nullptr) {
    _has_bits_[0] |= 0x01000000u;
  } else {
    _has_bits_[0] &= ~0x01000000u;
  }
  createdate_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      createdate, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.createDate)
}

// optional string logDatetime = 31;
inline bool DULogs::_internal_has_logdatetime() const {
  bool value = (_has_bits_[0] & 0x02000000u) != 0;
  return value;
}
inline bool DULogs::has_logdatetime() const {
  return _internal_has_logdatetime();
}
inline void DULogs::clear_logdatetime() {
  logdatetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x02000000u;
}
inline const std::string& DULogs::logdatetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.logDatetime)
  return _internal_logdatetime();
}
inline void DULogs::set_logdatetime(const std::string& value) {
  _internal_set_logdatetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.logDatetime)
}
inline std::string* DULogs::mutable_logdatetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.logDatetime)
  return _internal_mutable_logdatetime();
}
inline const std::string& DULogs::_internal_logdatetime() const {
  return logdatetime_.Get();
}
inline void DULogs::_internal_set_logdatetime(const std::string& value) {
  _has_bits_[0] |= 0x02000000u;
  logdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_logdatetime(std::string&& value) {
  _has_bits_[0] |= 0x02000000u;
  logdatetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.logDatetime)
}
inline void DULogs::set_logdatetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x02000000u;
  logdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.logDatetime)
}
inline void DULogs::set_logdatetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x02000000u;
  logdatetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.logDatetime)
}
inline std::string* DULogs::_internal_mutable_logdatetime() {
  _has_bits_[0] |= 0x02000000u;
  return logdatetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_logdatetime() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.logDatetime)
  if (!_internal_has_logdatetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x02000000u;
  return logdatetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_logdatetime(std::string* logdatetime) {
  if (logdatetime != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  logdatetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logdatetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.logDatetime)
}
inline std::string* DULogs::unsafe_arena_release_logdatetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.logDatetime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x02000000u;
  return logdatetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_logdatetime(
    std::string* logdatetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (logdatetime != nullptr) {
    _has_bits_[0] |= 0x02000000u;
  } else {
    _has_bits_[0] &= ~0x02000000u;
  }
  logdatetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      logdatetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.logDatetime)
}

// optional string logTypeDesc = 32;
inline bool DULogs::_internal_has_logtypedesc() const {
  bool value = (_has_bits_[0] & 0x04000000u) != 0;
  return value;
}
inline bool DULogs::has_logtypedesc() const {
  return _internal_has_logtypedesc();
}
inline void DULogs::clear_logtypedesc() {
  logtypedesc_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x04000000u;
}
inline const std::string& DULogs::logtypedesc() const {
  // @@protoc_insertion_point(field_get:fccboscom.DULogs.logTypeDesc)
  return _internal_logtypedesc();
}
inline void DULogs::set_logtypedesc(const std::string& value) {
  _internal_set_logtypedesc(value);
  // @@protoc_insertion_point(field_set:fccboscom.DULogs.logTypeDesc)
}
inline std::string* DULogs::mutable_logtypedesc() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DULogs.logTypeDesc)
  return _internal_mutable_logtypedesc();
}
inline const std::string& DULogs::_internal_logtypedesc() const {
  return logtypedesc_.Get();
}
inline void DULogs::_internal_set_logtypedesc(const std::string& value) {
  _has_bits_[0] |= 0x04000000u;
  logtypedesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DULogs::set_logtypedesc(std::string&& value) {
  _has_bits_[0] |= 0x04000000u;
  logtypedesc_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DULogs.logTypeDesc)
}
inline void DULogs::set_logtypedesc(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x04000000u;
  logtypedesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DULogs.logTypeDesc)
}
inline void DULogs::set_logtypedesc(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x04000000u;
  logtypedesc_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DULogs.logTypeDesc)
}
inline std::string* DULogs::_internal_mutable_logtypedesc() {
  _has_bits_[0] |= 0x04000000u;
  return logtypedesc_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DULogs::release_logtypedesc() {
  // @@protoc_insertion_point(field_release:fccboscom.DULogs.logTypeDesc)
  if (!_internal_has_logtypedesc()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x04000000u;
  return logtypedesc_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DULogs::set_allocated_logtypedesc(std::string* logtypedesc) {
  if (logtypedesc != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  logtypedesc_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), logtypedesc,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DULogs.logTypeDesc)
}
inline std::string* DULogs::unsafe_arena_release_logtypedesc() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DULogs.logTypeDesc)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x04000000u;
  return logtypedesc_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DULogs::unsafe_arena_set_allocated_logtypedesc(
    std::string* logtypedesc) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (logtypedesc != nullptr) {
    _has_bits_[0] |= 0x04000000u;
  } else {
    _has_bits_[0] &= ~0x04000000u;
  }
  logtypedesc_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      logtypedesc, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DULogs.logTypeDesc)
}

// -------------------------------------------------------------------

// BOSAlarm

// required uint32 alarmId = 1;
inline bool BOSAlarm::_internal_has_alarmid() const {
  bool value = (_has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool BOSAlarm::has_alarmid() const {
  return _internal_has_alarmid();
}
inline void BOSAlarm::clear_alarmid() {
  alarmid_ = 0u;
  _has_bits_[0] &= ~0x00000020u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::_internal_alarmid() const {
  return alarmid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::alarmid() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.alarmId)
  return _internal_alarmid();
}
inline void BOSAlarm::_internal_set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000020u;
  alarmid_ = value;
}
inline void BOSAlarm::set_alarmid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmid(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.alarmId)
}

// required uint32 deviceId = 2;
inline bool BOSAlarm::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool BOSAlarm::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void BOSAlarm::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000040u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.deviceId)
  return _internal_deviceid();
}
inline void BOSAlarm::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000040u;
  deviceid_ = value;
}
inline void BOSAlarm::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.deviceId)
}

// required uint32 alarmState = 3;
inline bool BOSAlarm::_internal_has_alarmstate() const {
  bool value = (_has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool BOSAlarm::has_alarmstate() const {
  return _internal_has_alarmstate();
}
inline void BOSAlarm::clear_alarmstate() {
  alarmstate_ = 0u;
  _has_bits_[0] &= ~0x00000080u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::_internal_alarmstate() const {
  return alarmstate_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 BOSAlarm::alarmstate() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.alarmState)
  return _internal_alarmstate();
}
inline void BOSAlarm::_internal_set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000080u;
  alarmstate_ = value;
}
inline void BOSAlarm::set_alarmstate(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_alarmstate(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.alarmState)
}

// optional string param1 = 4;
inline bool BOSAlarm::_internal_has_param1() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool BOSAlarm::has_param1() const {
  return _internal_has_param1();
}
inline void BOSAlarm::clear_param1() {
  param1_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& BOSAlarm::param1() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.param1)
  return _internal_param1();
}
inline void BOSAlarm::set_param1(const std::string& value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.param1)
}
inline std::string* BOSAlarm::mutable_param1() {
  // @@protoc_insertion_point(field_mutable:fccboscom.BOSAlarm.param1)
  return _internal_mutable_param1();
}
inline const std::string& BOSAlarm::_internal_param1() const {
  return param1_.Get();
}
inline void BOSAlarm::_internal_set_param1(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BOSAlarm::set_param1(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  param1_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.BOSAlarm.param1)
}
inline void BOSAlarm::set_param1(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.BOSAlarm.param1)
}
inline void BOSAlarm::set_param1(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  param1_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.BOSAlarm.param1)
}
inline std::string* BOSAlarm::_internal_mutable_param1() {
  _has_bits_[0] |= 0x00000001u;
  return param1_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BOSAlarm::release_param1() {
  // @@protoc_insertion_point(field_release:fccboscom.BOSAlarm.param1)
  if (!_internal_has_param1()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return param1_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BOSAlarm::set_allocated_param1(std::string* param1) {
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param1_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param1,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.BOSAlarm.param1)
}
inline std::string* BOSAlarm::unsafe_arena_release_param1() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.BOSAlarm.param1)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return param1_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BOSAlarm::unsafe_arena_set_allocated_param1(
    std::string* param1) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param1 != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  param1_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param1, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.BOSAlarm.param1)
}

// optional string param2 = 5;
inline bool BOSAlarm::_internal_has_param2() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool BOSAlarm::has_param2() const {
  return _internal_has_param2();
}
inline void BOSAlarm::clear_param2() {
  param2_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000002u;
}
inline const std::string& BOSAlarm::param2() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.param2)
  return _internal_param2();
}
inline void BOSAlarm::set_param2(const std::string& value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.param2)
}
inline std::string* BOSAlarm::mutable_param2() {
  // @@protoc_insertion_point(field_mutable:fccboscom.BOSAlarm.param2)
  return _internal_mutable_param2();
}
inline const std::string& BOSAlarm::_internal_param2() const {
  return param2_.Get();
}
inline void BOSAlarm::_internal_set_param2(const std::string& value) {
  _has_bits_[0] |= 0x00000002u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BOSAlarm::set_param2(std::string&& value) {
  _has_bits_[0] |= 0x00000002u;
  param2_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.BOSAlarm.param2)
}
inline void BOSAlarm::set_param2(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000002u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.BOSAlarm.param2)
}
inline void BOSAlarm::set_param2(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000002u;
  param2_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.BOSAlarm.param2)
}
inline std::string* BOSAlarm::_internal_mutable_param2() {
  _has_bits_[0] |= 0x00000002u;
  return param2_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BOSAlarm::release_param2() {
  // @@protoc_insertion_point(field_release:fccboscom.BOSAlarm.param2)
  if (!_internal_has_param2()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000002u;
  return param2_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BOSAlarm::set_allocated_param2(std::string* param2) {
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param2_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param2,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.BOSAlarm.param2)
}
inline std::string* BOSAlarm::unsafe_arena_release_param2() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.BOSAlarm.param2)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000002u;
  return param2_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BOSAlarm::unsafe_arena_set_allocated_param2(
    std::string* param2) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param2 != nullptr) {
    _has_bits_[0] |= 0x00000002u;
  } else {
    _has_bits_[0] &= ~0x00000002u;
  }
  param2_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param2, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.BOSAlarm.param2)
}

// optional string param3 = 6;
inline bool BOSAlarm::_internal_has_param3() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool BOSAlarm::has_param3() const {
  return _internal_has_param3();
}
inline void BOSAlarm::clear_param3() {
  param3_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000004u;
}
inline const std::string& BOSAlarm::param3() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.param3)
  return _internal_param3();
}
inline void BOSAlarm::set_param3(const std::string& value) {
  _internal_set_param3(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.param3)
}
inline std::string* BOSAlarm::mutable_param3() {
  // @@protoc_insertion_point(field_mutable:fccboscom.BOSAlarm.param3)
  return _internal_mutable_param3();
}
inline const std::string& BOSAlarm::_internal_param3() const {
  return param3_.Get();
}
inline void BOSAlarm::_internal_set_param3(const std::string& value) {
  _has_bits_[0] |= 0x00000004u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BOSAlarm::set_param3(std::string&& value) {
  _has_bits_[0] |= 0x00000004u;
  param3_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.BOSAlarm.param3)
}
inline void BOSAlarm::set_param3(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000004u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.BOSAlarm.param3)
}
inline void BOSAlarm::set_param3(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000004u;
  param3_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.BOSAlarm.param3)
}
inline std::string* BOSAlarm::_internal_mutable_param3() {
  _has_bits_[0] |= 0x00000004u;
  return param3_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BOSAlarm::release_param3() {
  // @@protoc_insertion_point(field_release:fccboscom.BOSAlarm.param3)
  if (!_internal_has_param3()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000004u;
  return param3_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BOSAlarm::set_allocated_param3(std::string* param3) {
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param3_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param3,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.BOSAlarm.param3)
}
inline std::string* BOSAlarm::unsafe_arena_release_param3() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.BOSAlarm.param3)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000004u;
  return param3_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BOSAlarm::unsafe_arena_set_allocated_param3(
    std::string* param3) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param3 != nullptr) {
    _has_bits_[0] |= 0x00000004u;
  } else {
    _has_bits_[0] &= ~0x00000004u;
  }
  param3_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param3, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.BOSAlarm.param3)
}

// optional string param4 = 7;
inline bool BOSAlarm::_internal_has_param4() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool BOSAlarm::has_param4() const {
  return _internal_has_param4();
}
inline void BOSAlarm::clear_param4() {
  param4_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000008u;
}
inline const std::string& BOSAlarm::param4() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.param4)
  return _internal_param4();
}
inline void BOSAlarm::set_param4(const std::string& value) {
  _internal_set_param4(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.param4)
}
inline std::string* BOSAlarm::mutable_param4() {
  // @@protoc_insertion_point(field_mutable:fccboscom.BOSAlarm.param4)
  return _internal_mutable_param4();
}
inline const std::string& BOSAlarm::_internal_param4() const {
  return param4_.Get();
}
inline void BOSAlarm::_internal_set_param4(const std::string& value) {
  _has_bits_[0] |= 0x00000008u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BOSAlarm::set_param4(std::string&& value) {
  _has_bits_[0] |= 0x00000008u;
  param4_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.BOSAlarm.param4)
}
inline void BOSAlarm::set_param4(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000008u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.BOSAlarm.param4)
}
inline void BOSAlarm::set_param4(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000008u;
  param4_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.BOSAlarm.param4)
}
inline std::string* BOSAlarm::_internal_mutable_param4() {
  _has_bits_[0] |= 0x00000008u;
  return param4_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BOSAlarm::release_param4() {
  // @@protoc_insertion_point(field_release:fccboscom.BOSAlarm.param4)
  if (!_internal_has_param4()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000008u;
  return param4_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BOSAlarm::set_allocated_param4(std::string* param4) {
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param4_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param4,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.BOSAlarm.param4)
}
inline std::string* BOSAlarm::unsafe_arena_release_param4() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.BOSAlarm.param4)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000008u;
  return param4_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BOSAlarm::unsafe_arena_set_allocated_param4(
    std::string* param4) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param4 != nullptr) {
    _has_bits_[0] |= 0x00000008u;
  } else {
    _has_bits_[0] &= ~0x00000008u;
  }
  param4_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param4, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.BOSAlarm.param4)
}

// optional string param5 = 8;
inline bool BOSAlarm::_internal_has_param5() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool BOSAlarm::has_param5() const {
  return _internal_has_param5();
}
inline void BOSAlarm::clear_param5() {
  param5_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000010u;
}
inline const std::string& BOSAlarm::param5() const {
  // @@protoc_insertion_point(field_get:fccboscom.BOSAlarm.param5)
  return _internal_param5();
}
inline void BOSAlarm::set_param5(const std::string& value) {
  _internal_set_param5(value);
  // @@protoc_insertion_point(field_set:fccboscom.BOSAlarm.param5)
}
inline std::string* BOSAlarm::mutable_param5() {
  // @@protoc_insertion_point(field_mutable:fccboscom.BOSAlarm.param5)
  return _internal_mutable_param5();
}
inline const std::string& BOSAlarm::_internal_param5() const {
  return param5_.Get();
}
inline void BOSAlarm::_internal_set_param5(const std::string& value) {
  _has_bits_[0] |= 0x00000010u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void BOSAlarm::set_param5(std::string&& value) {
  _has_bits_[0] |= 0x00000010u;
  param5_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.BOSAlarm.param5)
}
inline void BOSAlarm::set_param5(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000010u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.BOSAlarm.param5)
}
inline void BOSAlarm::set_param5(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000010u;
  param5_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.BOSAlarm.param5)
}
inline std::string* BOSAlarm::_internal_mutable_param5() {
  _has_bits_[0] |= 0x00000010u;
  return param5_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* BOSAlarm::release_param5() {
  // @@protoc_insertion_point(field_release:fccboscom.BOSAlarm.param5)
  if (!_internal_has_param5()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000010u;
  return param5_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void BOSAlarm::set_allocated_param5(std::string* param5) {
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  param5_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), param5,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.BOSAlarm.param5)
}
inline std::string* BOSAlarm::unsafe_arena_release_param5() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.BOSAlarm.param5)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000010u;
  return param5_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void BOSAlarm::unsafe_arena_set_allocated_param5(
    std::string* param5) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (param5 != nullptr) {
    _has_bits_[0] |= 0x00000010u;
  } else {
    _has_bits_[0] &= ~0x00000010u;
  }
  param5_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      param5, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.BOSAlarm.param5)
}

// -------------------------------------------------------------------

// FCCDoorStatus

// required uint32 status = 1;
inline bool FCCDoorStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool FCCDoorStatus::has_status() const {
  return _internal_has_status();
}
inline void FCCDoorStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FCCDoorStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 FCCDoorStatus::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.FCCDoorStatus.status)
  return _internal_status();
}
inline void FCCDoorStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  status_ = value;
}
inline void FCCDoorStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.FCCDoorStatus.status)
}

// required string dateTime = 2;
inline bool FCCDoorStatus::_internal_has_datetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FCCDoorStatus::has_datetime() const {
  return _internal_has_datetime();
}
inline void FCCDoorStatus::clear_datetime() {
  datetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FCCDoorStatus::datetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.FCCDoorStatus.dateTime)
  return _internal_datetime();
}
inline void FCCDoorStatus::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.FCCDoorStatus.dateTime)
}
inline std::string* FCCDoorStatus::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.FCCDoorStatus.dateTime)
  return _internal_mutable_datetime();
}
inline const std::string& FCCDoorStatus::_internal_datetime() const {
  return datetime_.Get();
}
inline void FCCDoorStatus::_internal_set_datetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void FCCDoorStatus::set_datetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.FCCDoorStatus.dateTime)
}
inline void FCCDoorStatus::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.FCCDoorStatus.dateTime)
}
inline void FCCDoorStatus::set_datetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.FCCDoorStatus.dateTime)
}
inline std::string* FCCDoorStatus::_internal_mutable_datetime() {
  _has_bits_[0] |= 0x00000001u;
  return datetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* FCCDoorStatus::release_datetime() {
  // @@protoc_insertion_point(field_release:fccboscom.FCCDoorStatus.dateTime)
  if (!_internal_has_datetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void FCCDoorStatus::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.FCCDoorStatus.dateTime)
}
inline std::string* FCCDoorStatus::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.FCCDoorStatus.dateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void FCCDoorStatus::unsafe_arena_set_allocated_datetime(
    std::string* datetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.FCCDoorStatus.dateTime)
}

// -------------------------------------------------------------------

// InterlockStatus

// required int32 deviceType = 1;
inline bool InterlockStatus::_internal_has_devicetype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool InterlockStatus::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void InterlockStatus::clear_devicetype() {
  devicetype_ = 0;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::devicetype() const {
  // @@protoc_insertion_point(field_get:fccboscom.InterlockStatus.deviceType)
  return _internal_devicetype();
}
inline void InterlockStatus::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000002u;
  devicetype_ = value;
}
inline void InterlockStatus::set_devicetype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:fccboscom.InterlockStatus.deviceType)
}

// required int32 deviceId = 2;
inline bool InterlockStatus::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool InterlockStatus::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void InterlockStatus::clear_deviceid() {
  deviceid_ = 0;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.InterlockStatus.deviceId)
  return _internal_deviceid();
}
inline void InterlockStatus::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000004u;
  deviceid_ = value;
}
inline void InterlockStatus::set_deviceid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.InterlockStatus.deviceId)
}

// required int32 interlockType = 3;
inline bool InterlockStatus::_internal_has_interlocktype() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool InterlockStatus::has_interlocktype() const {
  return _internal_has_interlocktype();
}
inline void InterlockStatus::clear_interlocktype() {
  interlocktype_ = 0;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::_internal_interlocktype() const {
  return interlocktype_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::interlocktype() const {
  // @@protoc_insertion_point(field_get:fccboscom.InterlockStatus.interlockType)
  return _internal_interlocktype();
}
inline void InterlockStatus::_internal_set_interlocktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000008u;
  interlocktype_ = value;
}
inline void InterlockStatus::set_interlocktype(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_interlocktype(value);
  // @@protoc_insertion_point(field_set:fccboscom.InterlockStatus.interlockType)
}

// required string dateTime = 4;
inline bool InterlockStatus::_internal_has_datetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool InterlockStatus::has_datetime() const {
  return _internal_has_datetime();
}
inline void InterlockStatus::clear_datetime() {
  datetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& InterlockStatus::datetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.InterlockStatus.dateTime)
  return _internal_datetime();
}
inline void InterlockStatus::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.InterlockStatus.dateTime)
}
inline std::string* InterlockStatus::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.InterlockStatus.dateTime)
  return _internal_mutable_datetime();
}
inline const std::string& InterlockStatus::_internal_datetime() const {
  return datetime_.Get();
}
inline void InterlockStatus::_internal_set_datetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void InterlockStatus::set_datetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.InterlockStatus.dateTime)
}
inline void InterlockStatus::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.InterlockStatus.dateTime)
}
inline void InterlockStatus::set_datetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.InterlockStatus.dateTime)
}
inline std::string* InterlockStatus::_internal_mutable_datetime() {
  _has_bits_[0] |= 0x00000001u;
  return datetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* InterlockStatus::release_datetime() {
  // @@protoc_insertion_point(field_release:fccboscom.InterlockStatus.dateTime)
  if (!_internal_has_datetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void InterlockStatus::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.InterlockStatus.dateTime)
}
inline std::string* InterlockStatus::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.InterlockStatus.dateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void InterlockStatus::unsafe_arena_set_allocated_datetime(
    std::string* datetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.InterlockStatus.dateTime)
}

// optional int32 nozzleId = 5;
inline bool InterlockStatus::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool InterlockStatus::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void InterlockStatus::clear_nozzleid() {
  nozzleid_ = 0;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 InterlockStatus::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.InterlockStatus.nozzleId)
  return _internal_nozzleid();
}
inline void InterlockStatus::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _has_bits_[0] |= 0x00000010u;
  nozzleid_ = value;
}
inline void InterlockStatus::set_nozzleid(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.InterlockStatus.nozzleId)
}

// -------------------------------------------------------------------

// DeviceStatus

// required uint32 deviceType = 1;
inline bool DeviceStatus::_internal_has_devicetype() const {
  bool value = (_has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool DeviceStatus::has_devicetype() const {
  return _internal_has_devicetype();
}
inline void DeviceStatus::clear_devicetype() {
  devicetype_ = 0u;
  _has_bits_[0] &= ~0x00000002u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::_internal_devicetype() const {
  return devicetype_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::devicetype() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeviceStatus.deviceType)
  return _internal_devicetype();
}
inline void DeviceStatus::_internal_set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000002u;
  devicetype_ = value;
}
inline void DeviceStatus::set_devicetype(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_devicetype(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeviceStatus.deviceType)
}

// required uint32 deviceId = 2;
inline bool DeviceStatus::_internal_has_deviceid() const {
  bool value = (_has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool DeviceStatus::has_deviceid() const {
  return _internal_has_deviceid();
}
inline void DeviceStatus::clear_deviceid() {
  deviceid_ = 0u;
  _has_bits_[0] &= ~0x00000004u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::_internal_deviceid() const {
  return deviceid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::deviceid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeviceStatus.deviceId)
  return _internal_deviceid();
}
inline void DeviceStatus::_internal_set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000004u;
  deviceid_ = value;
}
inline void DeviceStatus::set_deviceid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_deviceid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeviceStatus.deviceId)
}

// optional uint32 nozzleId = 3;
inline bool DeviceStatus::_internal_has_nozzleid() const {
  bool value = (_has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool DeviceStatus::has_nozzleid() const {
  return _internal_has_nozzleid();
}
inline void DeviceStatus::clear_nozzleid() {
  nozzleid_ = 0u;
  _has_bits_[0] &= ~0x00000008u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::_internal_nozzleid() const {
  return nozzleid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::nozzleid() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeviceStatus.nozzleId)
  return _internal_nozzleid();
}
inline void DeviceStatus::_internal_set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000008u;
  nozzleid_ = value;
}
inline void DeviceStatus::set_nozzleid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_nozzleid(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeviceStatus.nozzleId)
}

// required uint32 status = 4;
inline bool DeviceStatus::_internal_has_status() const {
  bool value = (_has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool DeviceStatus::has_status() const {
  return _internal_has_status();
}
inline void DeviceStatus::clear_status() {
  status_ = 0u;
  _has_bits_[0] &= ~0x00000010u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::_internal_status() const {
  return status_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 DeviceStatus::status() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeviceStatus.status)
  return _internal_status();
}
inline void DeviceStatus::_internal_set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _has_bits_[0] |= 0x00000010u;
  status_ = value;
}
inline void DeviceStatus::set_status(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_status(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeviceStatus.status)
}

// required string dateTime = 5;
inline bool DeviceStatus::_internal_has_datetime() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool DeviceStatus::has_datetime() const {
  return _internal_has_datetime();
}
inline void DeviceStatus::clear_datetime() {
  datetime_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& DeviceStatus::datetime() const {
  // @@protoc_insertion_point(field_get:fccboscom.DeviceStatus.dateTime)
  return _internal_datetime();
}
inline void DeviceStatus::set_datetime(const std::string& value) {
  _internal_set_datetime(value);
  // @@protoc_insertion_point(field_set:fccboscom.DeviceStatus.dateTime)
}
inline std::string* DeviceStatus::mutable_datetime() {
  // @@protoc_insertion_point(field_mutable:fccboscom.DeviceStatus.dateTime)
  return _internal_mutable_datetime();
}
inline const std::string& DeviceStatus::_internal_datetime() const {
  return datetime_.Get();
}
inline void DeviceStatus::_internal_set_datetime(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void DeviceStatus::set_datetime(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.DeviceStatus.dateTime)
}
inline void DeviceStatus::set_datetime(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.DeviceStatus.dateTime)
}
inline void DeviceStatus::set_datetime(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  datetime_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.DeviceStatus.dateTime)
}
inline std::string* DeviceStatus::_internal_mutable_datetime() {
  _has_bits_[0] |= 0x00000001u;
  return datetime_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* DeviceStatus::release_datetime() {
  // @@protoc_insertion_point(field_release:fccboscom.DeviceStatus.dateTime)
  if (!_internal_has_datetime()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void DeviceStatus::set_allocated_datetime(std::string* datetime) {
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), datetime,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.DeviceStatus.dateTime)
}
inline std::string* DeviceStatus::unsafe_arena_release_datetime() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.DeviceStatus.dateTime)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return datetime_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void DeviceStatus::unsafe_arena_set_allocated_datetime(
    std::string* datetime) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (datetime != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  datetime_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      datetime, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.DeviceStatus.dateTime)
}

// -------------------------------------------------------------------

// PromotionalMsg

// required string message = 1;
inline bool PromotionalMsg::_internal_has_message() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool PromotionalMsg::has_message() const {
  return _internal_has_message();
}
inline void PromotionalMsg::clear_message() {
  message_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& PromotionalMsg::message() const {
  // @@protoc_insertion_point(field_get:fccboscom.PromotionalMsg.message)
  return _internal_message();
}
inline void PromotionalMsg::set_message(const std::string& value) {
  _internal_set_message(value);
  // @@protoc_insertion_point(field_set:fccboscom.PromotionalMsg.message)
}
inline std::string* PromotionalMsg::mutable_message() {
  // @@protoc_insertion_point(field_mutable:fccboscom.PromotionalMsg.message)
  return _internal_mutable_message();
}
inline const std::string& PromotionalMsg::_internal_message() const {
  return message_.Get();
}
inline void PromotionalMsg::_internal_set_message(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void PromotionalMsg::set_message(std::string&& value) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:fccboscom.PromotionalMsg.message)
}
inline void PromotionalMsg::set_message(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:fccboscom.PromotionalMsg.message)
}
inline void PromotionalMsg::set_message(const char* value,
    size_t size) {
  _has_bits_[0] |= 0x00000001u;
  message_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:fccboscom.PromotionalMsg.message)
}
inline std::string* PromotionalMsg::_internal_mutable_message() {
  _has_bits_[0] |= 0x00000001u;
  return message_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* PromotionalMsg::release_message() {
  // @@protoc_insertion_point(field_release:fccboscom.PromotionalMsg.message)
  if (!_internal_has_message()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return message_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void PromotionalMsg::set_allocated_message(std::string* message) {
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), message,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:fccboscom.PromotionalMsg.message)
}
inline std::string* PromotionalMsg::unsafe_arena_release_message() {
  // @@protoc_insertion_point(field_unsafe_arena_release:fccboscom.PromotionalMsg.message)
  GOOGLE_DCHECK(GetArena() != nullptr);
  _has_bits_[0] &= ~0x00000001u;
  return message_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void PromotionalMsg::unsafe_arena_set_allocated_message(
    std::string* message) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (message != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  message_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      message, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:fccboscom.PromotionalMsg.message)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace fccboscom

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_fccboscom_2eproto
